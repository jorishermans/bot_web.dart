// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.register_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("test double click manager"), $._testDoudbleClickManager));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("test add/remove from Panel"), $._testAddRemoveFromPanel));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("Thing remove transform"), $._testRemoveTransform));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("Thing parent"), $._testThingParent));
  },
  $isFunction: true
};

$$._testThingParent_anon = {"": "Closure;child_0",
  call$0: function() {
    return this.child_0.registerParent$1(null);
  },
  $isFunction: true
};

$$._testThingParent_anon0 = {"": "Closure;child_1",
  call$0: function() {
    return this.child_1.unregisterParent$1(null);
  },
  $isFunction: true
};

$$._testThingParent_anon1 = {"": "Closure;child_2,parentThing_3",
  call$0: function() {
    return this.child_2.registerParent$1(this.parentThing_3);
  },
  $isFunction: true
};

$$._testThingParent_anon2 = {"": "Closure;child_4,parentThing_5",
  call$0: function() {
    return this.child_4.unregisterParent$1(this.parentThing_5);
  },
  $isFunction: true
};

$$._testRemoveTransform_anon = {"": "Closure;thing_0",
  call$0: function() {
    return this.thing_0.removeTransform$1(null);
  },
  $isFunction: true
};

$$._testAddRemoveFromPanel_anon = {"": "Closure;panel_0",
  call$0: function() {
    var t1 = this.panel_0;
    return t1.add$1(t1, null);
  },
  $isFunction: true
};

$$._testAddRemoveFromPanel_anon0 = {"": "Closure;panel_1,shape_2",
  call$0: function() {
    var t1 = this.panel_1;
    return t1.add$1(t1, this.shape_2);
  },
  $isFunction: true
};

$$._testAddRemoveFromPanel_anon1 = {"": "Closure;panel_3",
  call$0: function() {
    var t1 = this.panel_3;
    return t1.remove$1(t1, null);
  },
  $isFunction: true
};

$$._testAddRemoveFromPanel_anon2 = {"": "Closure;panel_4,shape_5",
  call$0: function() {
    var t1 = this.panel_4;
    return t1.add$1(t1, this.shape_5);
  },
  $isFunction: true
};

$$._TestParentThing = {"": "ParentThing;_transforms,_invalidatedEventHandle,_cacheCanvas,_width,_height,_alpha,_cacheEnabled,_lastDrawTime,_parent,_propertyValues,_eventHandlers,_disposed"};

$$.ListIterable = {"": "IterableBase;",
  get$iterator: function(_) {
    return $.ListIterator$(this, $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    var $length, i, element;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.firstWhere$2$orElse$bailout1(1, test, orElse, $length);
    for (i = 0; i < $length; ++i) {
      element = this.elementAt$1(this, i);
      if (test.call$1(element) === true)
        return element;
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
    if (orElse != null)
      return orElse.call$0();
    throw $.wrapException($.StateError$("No matching element"));
  },
  firstWhere$2$orElse$bailout1: function(state0, test, orElse, $length) {
    var t1, i, element;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      element = this.elementAt$1(this, i);
      if (test.call$1(element) === true)
        return element;
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
    if (orElse != null)
      return orElse.call$0();
    throw $.wrapException($.StateError$("No matching element"));
  },
  join$1: function(_, separator) {
    var $length, first, buffer, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.join$1$bailout1(1, separator, $length);
    if ($.get$isEmpty$asx(separator) !== true) {
      if ($length === 0)
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      for (i = 1; i < $length; ++i) {
        buffer.write$1(separator);
        buffer.write$1(this.elementAt$1(this, i));
        if ($length !== this.get$length(this))
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    } else {
      buffer = $.StringBuffer$("");
      for (i = 0; i < $length; ++i) {
        buffer.write$1(this.elementAt$1(this, i));
        if ($length !== this.get$length(this))
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    }
  },
  join$1$bailout1: function(state0, separator, $length) {
    var t1, first, buffer, i;
    if ($.get$isEmpty$asx(separator) !== true) {
      t1 = $.getInterceptor($length);
      if (t1.$eq($length, 0) === true)
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      for (i = 1; $.JSNumber_methods.$lt(i, $length); ++i) {
        buffer.write$1(separator);
        buffer.write$1(this.elementAt$1(this, i));
        if (t1.$eq($length, this.get$length(this)) !== true)
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    } else {
      buffer = $.StringBuffer$("");
      for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
        buffer.write$1(this.elementAt$1(this, i));
        if (t1.$eq($length, this.get$length(this)) !== true)
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    }
  },
  where$1: function(_, test) {
    return $.IterableBase.prototype.where$1.call(this, this, test);
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  skip$1: function(_, count) {
    return $.SubListIterable$(this, count, null, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListIterable, 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListIterable, 0)]);
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $asIterable: function() {
    return null;
  }
};

$$.SubListIterable = {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.JSNull_methods.$gt(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 == null || $.JSNull_methods.$ge(t2, $length))
      return $length - t1;
    return $.JSNull_methods.$sub(t2, t1);
  },
  get$length$bailout2: function(state0, $length, t1) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        var t2;
        state0 = 0;
        if ($.$ge$n(t1, $length))
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || $.JSNull_methods.$ge(t2, $length))
          return $.$sub$n($length, t1);
        return $.JSNull_methods.$sub(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(1, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(2, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1)
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
        t1 = this.get$_startIndex();
      case 1:
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
      case 2:
        if (state0 === 2 || state0 === 0 && !(index < 0))
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 2:
              state0 = 0;
              t1 = $.$ge$n(realIndex, t1);
          }
        else
          t1 = true;
        if (t1)
          throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if ($.$lt$n(count, 0))
      throw $.wrapException($.ArgumentError$(count));
    return $.SubListIterable$(this._iterable, $.$add$ns(this._start, count), this._endOrLength, null);
  },
  $asListIterable: null,
  $asIterable: function() {
    return null;
  }
};

$$.ListIterator = {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib$_length;
    t2 = this._iterable;
    if ($.$eq(t1, $.get$length$asx(t2)) !== true)
      throw $.wrapException($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = $.elementAt$1$ax(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f, $.getRuntimeTypeArgument(this, this.$asMappedIterable, 0), $.getRuntimeTypeArgument(this, this.$asMappedIterable, 1));
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterableBase: function (S, T) { return [T]; },
  $asIterable: function() {
    return function (S, T) { return [T]; };
  }
};

$$.MappedIterator = {"": "Iterator;_liblib$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  },
  $asIterator: function (S, T) { return [T]; }
};

$$.MappedListIterable = {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._source, index));
  },
  $asListIterable: function (S, T) { return [T]; },
  $asIterable: function() {
    return function (S, T) { return [T]; };
  }
};

$$.WhereIterable = {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    return $.WhereIterator$($.get$iterator$ax(this._iterable), this._f, $.getRuntimeTypeArgument(this, this.$asWhereIterable, 0));
  },
  $asIterableBase: null,
  $asIterable: function() {
    return null;
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
};

$$.SkipIterable = {"": "IterableBase;_iterable,_skipCount",
  skip$1: function(_, n) {
    if (!(typeof n === "number" && Math.floor(n) === n) || n < 0)
      throw $.wrapException($.ArgumentError$(n));
    return $.SkipIterable$(this._iterable, $.$add$ns(this._skipCount, n), $.getRuntimeTypeArgument(this, this.$asSkipIterable, 0));
  },
  get$iterator: function(_) {
    return $.SkipIterator$($.get$iterator$ax(this._iterable), this._skipCount, $.getRuntimeTypeArgument(this, this.$asSkipIterable, 0));
  },
  SkipIterable$2: function(_iterable, _skipCount, E) {
    var t1 = this._skipCount;
    if (!(typeof t1 === "number" && Math.floor(t1) === t1) || $.$lt$n(t1, 0))
      throw $.wrapException($.ArgumentError$(t1));
  },
  $asIterableBase: null,
  $asIterable: function() {
    return null;
  }
};

$$.SkipIterator = {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i;
    for (t1 = this._iterator, i = 0; $.JSNumber_methods.$lt(i, this._skipCount); ++i)
      t1.moveNext$0();
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount, E) {
  },
  $asIterator: null
};

$$.UnmodifiableListBase = {"": "ListBase;",
  $indexSet: function(_, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  set$length: function(_, newLength) {
    throw $.wrapException($.UnsupportedError$("Cannot change the length of an unmodifiable list"));
  },
  add$1: function(_, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addAll$1: function(_, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  retainWhere$1: function(_, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  sort$1: function(_, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  removeLast$0: function(_) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  $asListBase: null,
  $asList: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  }
};

$$.ToString__emitPair_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  },
  $isFunction: true
};

$$.HashMap_values_anon = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
};

$$.HashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
};

$$.HashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.HashMapKeyIterator$(t1, t1._computeKeys$0(), $.getRuntimeTypeArgument(this, this.$asHashMapKeyIterable, 0));
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException($.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $asIterable: function() {
    return null;
  }
};

$$.HashMapKeyIterator = {"": "Object;_map,_keys,_offset,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
};

$$.LinkedHashMap_values_anon = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
};

$$.LinkedHashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
};

$$.LinkedHashMapCell = {"": "Object;_key<,_value@,_next@,_previous"};

$$.LinkedHashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.LinkedHashMapKeyIterator$(t1, t1._modifications, $.getRuntimeTypeArgument(this, this.$asLinkedHashMapKeyIterable, 0));
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw $.wrapException($.ConcurrentModificationError$(t1));
      cell = cell.get$_next();
    }
  },
  $asIterableBase: null,
  $asIterable: function() {
    return null;
  }
};

$$.LinkedHashMapKeyIterator = {"": "Object;_map,_modifications,_cell,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications, E) {
    this._cell = this._map._first;
  }
};

$$.ConstantMap = {"": "Object;length>,_jsObject,_liblib6$_keys",
  containsKey$1: function(key) {
    if ($.$eq(key, "__proto__") === true)
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  $index: function(_, key) {
    if (!this.containsKey$1(key))
      return;
    return this._jsObject[key];
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._liblib6$_keys, new $.ConstantMap_forEach_anon(this, f));
  },
  get$keys: function() {
    return $._ConstantMapKeyIterable$(this);
  },
  get$values: function(_) {
    return $.map$1$ax(this._liblib6$_keys, new $.ConstantMap_values_anon(this));
  },
  get$isEmpty: function(_) {
    return $.$eq(this.length, 0);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  $indexSet: function(_, key, val) {
    $.throwExpression($.UnsupportedError$("Cannot modify unmodifiable Map"));
    return;
  },
  $isMap: true,
  $asMap: function (V) { return [$.String, V]; }
};

$$.ConstantMap_forEach_anon = {"": "Closure;this_0,f_1",
  call$1: function(key) {
    return this.f_1.call$2(key, $.$index$asx(this.this_0, key));
  },
  $isFunction: true
};

$$.ConstantMap_values_anon = {"": "Closure;this_0",
  call$1: function(key) {
    return $.$index$asx(this.this_0, key);
  },
  $isFunction: true
};

$$._ConstantMapKeyIterable = {"": "IterableBase;_liblib6$_map",
  get$iterator: function(_) {
    return $.get$iterator$ax(this._liblib6$_map._liblib6$_keys);
  },
  $asIterableBase: function () { return [$.String]; },
  $asIterable: function() {
    return function () { return [$.String]; };
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0))
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key);
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1($.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  },
  $isFunction: true
};

$$.Interceptor = {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(receiver)) + "'";
  }
};

$$.JSFunction = {"": "Interceptor;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $isFunction: true
};

$$.JSBool = {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return $.Type_bool;
  },
  $isbool: true
};

$$.JSNull = {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return $.Type_Null;
  }
};

$$.CloseToken = {"": "Object;", $isCloseToken: true};

$$.JsIsolateSink = {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    this._port.send$1(message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port()) === true;
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asEventSink: function () { return [null]; },
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {"": "Object;nextIsolateId@,currentManagerId,nextManagerId,currentContext<,rootContext,topEventLoop<,fromCommandLine,isWorker<,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = $.get$globalWorker() != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = t1.get$isEmpty(t1) && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = this.mainManager;
      t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "close"])));
    }
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.$int, $._IsolateContext);
    this.managers = $.Map_Map($.$int, $._ManagerStub);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId) === true)
      throw $.wrapException($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId(t2 + 1);
    this.id = t2;
    this.ports = $.Map_Map($.$int, $.ReceivePort);
    this.isolateStatics = new Isolate();
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    this.events.addLast$1($._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1))
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null)
      if ($globalState.isolates.containsKey$1($globalState.rootContext.id) === true)
        if ($globalState.fromCommandLine === true) {
          var t1 = $globalState.rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.wrapException($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  },
  $isFunction: true
};

$$._IsolateEvent = {"": "Object;isolate,fn,message>",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function(_) {
    return 0;
  },
  postMessage$1: function(_, msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function(_) {
  }
};

$$.IsolateNatives__processWorkerMessage_anon = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    var t1, t2;
    t1 = this.entryPoint_0;
    t2 = this.replyTo_1;
    $.lazyPort = $.ReceivePortImpl$();
    t2.send$2("spawned", $._Isolate_port().toSendPort$0());
    t1.call$0();
  },
  $isFunction: true
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && !(typeof replyTo === "object" && replyTo !== null && !!$.getInterceptor(replyTo).$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$(null);
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isFunction: true,
  $isSendPort: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  },
  $isFunction: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $isFunction: true
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) === true && $.$eq(this._isolateId, other._isolateId) === true && $.$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      t1 = $globalState.mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        $.postMessage$1$x(manager, workerMessage);
    }
  },
  $isFunction: true
};

$$.ReceivePortImpl = {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function(_) {
    this._callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $.register$2$x($._globalState().get$currentContext(), this._id, this);
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (false)
      this.ports.push(t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return $._NativeJsSendPort$(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return $._WorkerSendPort$(x._workerId, x._isolateId, x._receivePortId);
    throw $.wrapException("Illegal underlying port " + $.S(this.get$p()));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId) === true) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i;
    for ($length = $.get$length$asx(this.tagged), i = 0; i < $length; ++i)
      $.$index$asx(this.tagged, i).__MessageTraverser__attached_info__ = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || $.getInterceptor(x).$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior()))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$indexSet$ax(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  },
  $isFunction: true
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.getInterceptor(dartList).$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t2, len, i;
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    t2 = $.getInterceptor$asx(dartList);
    len = t2.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.getInterceptor(keys).$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, keys, t1, x, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.getInterceptor(values).$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, keys, 0, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, keys, t1, x, result, values) {
    switch (state0) {
      case 0:
        result = $.HashMap$(null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, t3, len, i;
        state0 = 0;
        t3 = $.getInterceptor$asx(keys);
        len = t3.get$length(keys);
        for (t1 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle?",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw $.wrapException($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.wrapException($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = $.hasTimer() !== true || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.activeTimerCount = t1.activeTimerCount + 1;
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.wrapException($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  },
  $isFunction: true
};

$$.JSArray = {"": "Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.wrapException($.ArgumentError$(index));
    if (index < 0 || index >= receiver.length)
      throw $.wrapException($.RangeError$value(index));
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  insert$2: function(receiver, index, value) {
    if (index < 0 || index > receiver.length)
      throw $.wrapException($.RangeError$value(index));
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("insert"));
    receiver.splice(index, 0, value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException($.RangeError$value(-1));
    return receiver.pop();
  },
  retainWhere$1: function(receiver, test) {
    $.IterableMixinWorkaround_removeWhereList(receiver, new $.JSArray_retainWhere_anon(test));
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  addAll$1: function(receiver, collection) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (!!receiver.fixed$length)
        $.throwExpression($.UnsupportedError$("add"));
      receiver.push(t2);
    }
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  join$1: function(receiver, separator) {
    var list, t1, i, t2;
    list = $.List_List(receiver.length, null);
    for (t1 = list.length, i = 0; i < receiver.length; ++i) {
      if (i >= receiver.length || false)
        $.throwExpression($.RangeError$value(i));
      t2 = $.S(receiver[i]);
      if (i >= t1)
        throw $.ioore(i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    var t1;
    if (!(typeof index === "number" && Math.floor(index) === index))
      $.throwExpression($.ArgumentError$(index));
    t1 = $.getInterceptor$n(index);
    if (t1.$ge(index, receiver.length) || t1.$lt(index, 0))
      $.throwExpression($.RangeError$value(index));
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (typeof end !== "number")
      return this.sublist$2$bailout(1, start, end, receiver);
    if (start == null)
      $.throwExpression($.ArgumentError$(null));
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.wrapException($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (!(typeof end === "number" && Math.floor(end) === end))
      throw $.wrapException($.ArgumentError$(end));
    if (end < start || end > receiver.length)
      throw $.wrapException($.RangeError$range(end, start, receiver.length));
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$2$bailout: function(state0, start, end, receiver) {
    if (start == null)
      $.throwExpression($.ArgumentError$(null));
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.wrapException($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (!(typeof end === "number" && Math.floor(end) === end))
        throw $.wrapException($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.wrapException($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.wrapException($.StateError$("No elements"));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  sort$1: function(receiver, compare) {
    var t1;
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("sort"));
    if (compare == null)
      compare = $.Comparable_compare;
    t1 = receiver.length - 1;
    if (t1 - 0 <= 32)
      $.Sort_insertionSort_(receiver, 0, t1, compare);
    else
      $.Sort__dualPivotQuicksort(receiver, 0, t1, compare);
  },
  indexOf$2: function(receiver, element, start) {
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; i < receiver.length; ++i) {
      if (i >= receiver.length || false)
        $.throwExpression($.RangeError$value(i));
      if (t1.$eq(other, receiver[i]) === true)
        return true;
    }
    return false;
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result.toString$0(result);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, receiver.$asJSArray, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver, $.getRuntimeTypeArgument(receiver, receiver.$asJSArray, 0));
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$runtimeType: function(receiver) {
    return $.TypeImpl$($.getRuntimeTypeString(receiver));
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.wrapException($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.wrapException($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("indexed set"));
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    receiver[index] = value;
  },
  $asInterceptor: null,
  $asList: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$.JSArray_retainWhere_anon = {"": "Closure;test_0",
  call$1: function(element) {
    return this.test_0.call$1(element) !== true;
  },
  $isFunction: true
};

$$.JSMutableArray = {"": "JSArray;", $asJSArray: function () { return [null]; },
  $asList: function() {
    return function () { return [null]; };
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$._StackTrace = {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true
};

$$.Null = {"": "Object;"};

$$.JSNumber = {"": "Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (!(typeof b === "number"))
      throw $.wrapException($.ArgumentError$(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.wrapException($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.wrapException($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  truncate$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      $.throwExpression($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      $.throwExpression($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.wrapException($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.wrapException($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.wrapException($.ArgumentError$(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $xor: function(receiver, other) {
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.wrapException($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.wrapException($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.wrapException($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.wrapException($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "JSNumber;",
  get$runtimeType: function(receiver) {
    return $.Type_$int;
  },
  $isint: true,
  $isnum: true
};

$$.JSDouble = {"": "JSNumber;",
  get$runtimeType: function(receiver) {
    return $.Type_$double;
  },
  $isdouble: true,
  $isnum: true
};

$$.TypeImpl = {"": "Object;typeName",
  toString$0: function(_) {
    return this.typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this.typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!$.getInterceptor(other).$isTypeImpl))
      return false;
    return $.$eq(this.typeName, other.typeName);
  },
  $isTypeImpl: true
};

$$.JSString = {"": "Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.wrapException($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  $add: function(receiver, other) {
    if (!(typeof other === "string"))
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  startsWith$1: function(receiver, other) {
    var otherLength = other.length;
    if (otherLength > receiver.length)
      return false;
    return other == receiver.substring(0, otherLength);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    if (!(typeof startIndex === "number"))
      $.throwExpression($.ArgumentError$(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (!(typeof endIndex === "number"))
      $.throwExpression($.ArgumentError$(endIndex));
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0))
      throw $.wrapException($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex))
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.wrapException($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  indexOf$2: function(receiver, other, start) {
    if (other == null)
      $.throwExpression($.ArgumentError$(null));
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.wrapException($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.wrapException($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    if (other == null)
      $.throwExpression($.ArgumentError$(null));
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (!(typeof other === "string"))
      throw $.wrapException($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i;
    for (hash = 0, i = 0; i < receiver.length; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return $.Type_String;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$.MetaInfo = {"": "Object;_tag<,_tags,_set<"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.get$length$asx($.$index$asx(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(this), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return this._nativeRegExp.test(str);
  },
  allMatches$1: function(_, str) {
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function(_) {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true,
  $isRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern,str,start,end,_groups",
  group$1: function(index) {
    return $.$index$asx(this._groups, index);
  },
  $index: function(_, index) {
    return $.$index$asx(this._groups, index);
  }
};

$$._AllMatchesIterable = {"": "IterableBase;_re,_str",
  get$iterator: function(_) {
    return $._AllMatchesIterator$(this._re, this._str);
  },
  $asIterableBase: function () { return [$.Match]; },
  $asIterable: function() {
    return function () { return [$.Match]; };
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib6$_current",
  get$current: function() {
    return this._liblib6$_current;
  },
  moveNext$0: function() {
    this._liblib6$_current = this._re.firstMatch$1(this._str);
    return this._liblib6$_current != null;
  }
};

$$.StringMatch = {"": "Object;start,str,pattern",
  $index: function(_, g) {
    if ($.$eq(g, 0) !== true)
      $.throwExpression($.RangeError$value(g));
    return this.pattern;
  }
};

$$._CompleterImpl = {"": "Object;future,_isComplete",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.wrapException($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    if (this._isComplete)
      throw $.wrapException($.StateError$("Future already completed"));
    this._isComplete = true;
    if (stackTrace != null)
      $._attachStackTrace(error, stackTrace);
    this.future._setError$1(error);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state@,_resultOrListeners<",
  get$_isComplete: function() {
    return this._state !== 0;
  },
  get$_hasValue: function() {
    return this._state === 1;
  },
  get$_hasError: function() {
    return (this._state & 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return (this._state & 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (!this.get$_isComplete()) {
      if (onError == null) {
        t1 = $._ThenFuture$(f, null, null);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError, null, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError()) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this, null);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue())
      return $._FutureWrapper$(this, null);
    if (!this.get$_isComplete()) {
      t1 = $._CatchErrorFuture$(f, test, null);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  whenComplete$1: function(action) {
    var whenFuture = $._WhenFuture$(action, $.getRuntimeTypeArgument(this, this.$as_FutureImpl, 0));
    if (!this.get$_isComplete()) {
      whenFuture._nextListener = this._resultOrListeners;
      this._resultOrListeners = whenFuture;
    } else if (this.get$_hasValue())
      $.Timer_run(new $._FutureImpl_whenComplete_anon(whenFuture, this._resultOrListeners));
    else {
      this._state = (this._state & 4294967291) >>> 0;
      $.Timer_run(new $._FutureImpl_whenComplete_anon0(whenFuture, this._resultOrListeners));
    }
    return whenFuture;
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue, null, null);
    $.Timer_run(new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = (this._state & 4294967291) >>> 0;
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test, null);
    $.Timer_run(new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener._nextListener = this._resultOrListeners;
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1;
    if (!this.get$_isComplete()) {
      t1 = future._asListener$0();
      t1._nextListener = this._resultOrListeners;
      this._resultOrListeners = t1;
    } else if (this.get$_hasValue())
      future._setValue$1(this._resultOrListeners);
    else {
      this._state = (this._state & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture)
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this, null);
  },
  _FutureImpl$immediate$1: function(value, T) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
  },
  $isFunction: true
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    $.$indexSet$ax(t2, this.pos_1, value);
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0) === true) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  },
  $isFunction: true
};

$$._FutureImpl_whenComplete_anon = {"": "Closure;whenFuture_0,value_1",
  call$0: function() {
    this.whenFuture_0._sendValue$1(this.value_1);
  },
  $isFunction: true
};

$$._FutureImpl_whenComplete_anon0 = {"": "Closure;whenFuture_2,error_3",
  call$0: function() {
    this.whenFuture_2._sendError$1(this.error_3);
  },
  $isFunction: true
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  $isFunction: true
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  $isFunction: true
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, error, trace;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError()) {
      t1.set$_state($.$and$n(t1.get$_state(), 4294967291));
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error));
      trace = $.getAttachedStackTrace(error);
      if (trace != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
      throw $.wrapException(error);
    }
  },
  $isFunction: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error);
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($._asyncError(e, s));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._WhenFuture = {"": "_TransformFuture;_action,_nextListener,_state,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _sendValue$1: function(value) {
    var result, resultFuture, e, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendValue_anon(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var t1, result, resultFuture, e, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!$.getInterceptor(t2).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendError_anon(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      e = t2;
      s = $.getTraceFromException(exception);
      t1.error_0 = $._asyncError(e, s);
    }

    this._setError$1(t1.error_0);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._WhenFuture__sendValue_anon = {"": "Closure;this_0,value_1",
  call$1: function(_) {
    this.this_0._setValue$1(this.value_1);
  },
  $isFunction: true
};

$$._WhenFuture__sendError_anon = {"": "Closure;box_0,this_1",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  },
  $isFunction: true
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  whenComplete$1: function(action) {
    return this._future.whenComplete$1(action);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  get$isBroadcast: function() {
    return false;
  },
  asBroadcastStream$0: function() {
    if (this.get$isBroadcast() === true)
      return this;
    return $._SingleStreamMultiplexer$(this, $.getRuntimeTypeArgument(this, this.$asStream, 0));
  },
  where$1: function(_, test) {
    return $._WhereStream$(this, test, $.getRuntimeTypeArgument(this, this.$asStream, 0));
  },
  map$1: function(_, convert) {
    return $._MapStream$(this, convert, $.getRuntimeTypeArgument(this, this.$asStream, 0), null);
  },
  get$length: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.$int);
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$cancelOnError$onDone$onError(t2, true, new $.Stream_length_anon0(t1, future), t3);
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.bool);
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(t2, true, new $.Stream_isEmpty_anon0(future), t3);
    return future;
  },
  toList$0: function(_) {
    var result, future, t1, t2;
    result = [];
    future = $._FutureImpl$([$.List, $.getRuntimeTypeArgument(this, this.$asStream, 0)]);
    t1 = new $.Stream_toList_anon(result);
    t2 = future.get$_setError();
    this.listen$4$cancelOnError$onDone$onError(t1, true, new $.Stream_toList_anon0(result, future), t2);
    return future;
  },
  skip$1: function(_, count) {
    return $._SkipStream$(this, count, null);
  },
  elementAt$1: function(_, index) {
    var t1, t2, future, t3;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (!(typeof t2 === "number" && Math.floor(t2) === t2) || $.$lt$n(t2, 0))
      throw $.wrapException($.ArgumentError$(t1.index_0));
    future = $._FutureImpl$($.getRuntimeTypeArgument(this, this.$asStream, 0));
    t1.subscription_1 = null;
    t2 = new $.Stream_elementAt_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(t2, true, new $.Stream_elementAt_anon0(future), t3);
    return future;
  }
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  },
  $isFunction: true
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  },
  $isFunction: true
};

$$.Stream_isEmpty_anon = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._setValue$1(false);
  },
  $isFunction: true
};

$$.Stream_isEmpty_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setValue$1(true);
  },
  $isFunction: true
};

$$.Stream_toList_anon = {"": "Closure;result_0",
  call$1: function(data) {
    this.result_0.push(data);
  },
  $isFunction: true
};

$$.Stream_toList_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  },
  $isFunction: true
};

$$.Stream_elementAt_anon = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0;
    if ($.$eq(t1.index_0, 0) === true) {
      t1.subscription_1.cancel$0();
      this.future_1._setValue$1(value);
      return;
    }
    t1.index_0 = $.$sub$n(t1.index_0, 1);
  },
  $isFunction: true
};

$$.Stream_elementAt_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.StateError$("Not enough elements for elementAt"));
  },
  $isFunction: true
};

$$.StreamSubscription = {"": "Object;"};

$$.EventSink = {"": "Object;"};

$$.StreamController = {"": "EventSink;stream>",
  add$1: function(_, value) {
    return this.get$stream(this)._liblib2$_add$1(value);
  },
  $asEventSink: null
};

$$._SingleControllerStream = {"": "_SingleStreamImpl;_onListen,_onPause,_onResume,_onCancel,_subscriber,_state,_pendingEvents",
  _runGuarded$1: function(notificationHandler) {
    var e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      notificationHandler.call$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      $._throwDelayed(e, s);
    }

  },
  _onSubscriptionStateChange$0: function() {
    this._runGuarded$1(this.get$_hasListener() === true ? this._onListen : this._onCancel);
  },
  _onPauseStateChange$0: function() {
    this._runGuarded$1(this.get$_isPaused() ? this._onPause : this._onResume);
  },
  $as_SingleStreamImpl: null
};

$$._throwDelayed_anon = {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    var t1, t2, trace, t3;
    t1 = this.stackTrace_1;
    if (t1 != null)
      $.Primitives_printString($.toString$0(t1));
    t2 = this.error_0;
    trace = $.getAttachedStackTrace(t2);
    t3 = $.getInterceptor(trace);
    if (trace != null && t3.$eq(trace, t1) !== true)
      $.Primitives_printString(t3.toString$0(trace));
    throw $.wrapException(t2);
  },
  $isFunction: true
};

$$._StreamImpl = {"": "Stream;_state@",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription;
    if (this.get$_isComplete())
      return $._DoneSubscription$(onDone, null);
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    subscription = this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
    this._addListener$1(subscription);
    return subscription;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _liblib2$_add$1: function(value) {
    if (this.get$_liblib2$_isClosed())
      throw $.wrapException($.StateError$("Sending on closed stream"));
    if (!this.get$_mayFireState()) {
      this._addPendingEvent$1($._DelayedData$(value, $.getRuntimeTypeArgument(this, this.$as_StreamImpl, 0)));
      return;
    }
    if (this.get$_hasPendingEvent())
      this._addPendingEvent$1($._DelayedData$(value, $.getRuntimeTypeArgument(this, this.$as_StreamImpl, 0)));
    else
      this._sendData$1(value);
    this._handlePendingEvents$0();
  },
  get$_liblib2$_add: function() {
    return new $.BoundClosure$1(this, "_liblib2$_add$1");
  },
  _addError$1: function(error) {
    if (this.get$_liblib2$_isClosed())
      throw $.wrapException($.StateError$("Sending on closed stream"));
    if (!this.get$_mayFireState()) {
      this._addPendingEvent$1($._DelayedError$(error));
      return;
    }
    if (this.get$_hasPendingEvent())
      this._addPendingEvent$1($._DelayedError$(error));
    else
      this._sendError$1(error);
    this._handlePendingEvents$0();
  },
  get$_addError: function() {
    return new $.BoundClosure$1(this, "_addError$1");
  },
  _close$0: function() {
    if (this.get$_liblib2$_isClosed())
      return;
    this._state = $.$or$n(this._state, 1);
    if (!this.get$_mayFireState()) {
      this._addPendingEvent$1($.C__DelayedDone);
      return;
    }
    if (this.get$_hasPendingEvent()) {
      this._addPendingEvent$1($._DelayedDone$());
      this._handlePendingEvents$0();
    } else
      this._sendDone$0();
  },
  get$_close: function() {
    return new $.BoundClosure$0(this, "_close$0");
  },
  get$_liblib2$_isClosed: function() {
    return $.$and$n(this._state, 1) !== 0;
  },
  get$_isComplete: function() {
    return $.$and$n(this._state, 2) !== 0;
  },
  get$_isPaused: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_isPaused$bailout(1, t1);
    return t1 >= 64;
  },
  get$_isPaused$bailout: function(state0, t1) {
    return $.$ge$n(t1, 64);
  },
  get$_isInputPaused: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_isInputPaused$bailout(1, t1);
    return t1 >= 32;
  },
  get$_isInputPaused$bailout: function(state0, t1) {
    return $.$ge$n(t1, 32);
  },
  get$_hasPendingResume: function() {
    return $.$and$n(this._state, 32) !== 0;
  },
  get$_isInactive: function() {
    return $.$and$n(this._state, 24) === 0;
  },
  get$_isInCallback: function() {
    return $.$and$n(this._state, 16) !== 0;
  },
  get$_isFiring: function() {
    return $.$and$n(this._state, 8) !== 0;
  },
  get$_hasPendingEvent: function() {
    var t1 = this._pendingEvents;
    return t1 != null && t1.get$isEmpty(t1) !== true;
  },
  get$_currentEventIdBit: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_currentEventIdBit$bailout(1, t1);
    return $.JSInt_methods.$shr(t1 & 4, 2);
  },
  get$_currentEventIdBit$bailout: function(state0, t1) {
    return $.JSInt_methods.$shr($.$and$n(t1, 4), 2);
  },
  get$_mayFireState: function() {
    return $.$and$n(this._state, 4294967256) === 0;
  },
  _updatePauseCount$1: function(by) {
    var oldState = this._state;
    if (by >= 0)
      this._state = $.$add$ns(oldState, by << 6 >>> 0);
    else
      this._state = $.$sub$n(oldState, -by << 6 >>> 0);
  },
  _checkCallbacks$2: function(hadListener, wasPaused) {
    var hasListener, isPaused;
    if (this.get$_isInCallback())
      return;
    if (this.get$_hasPendingResume() && !this.get$_hasPendingEvent())
      this._state = $.$xor$n(this._state, 32);
    this._state = $.$or$n(this._state, 16);
    for (; true; wasPaused = isPaused, hadListener = hasListener) {
      hasListener = this.get$_hasListener();
      isPaused = this.get$_isInputPaused();
      if (!$.$eq(hadListener, hasListener))
        this._onSubscriptionStateChange$0();
      else if (isPaused !== wasPaused)
        this._onPauseStateChange$0();
      else {
        this._state = $.$xor$n(this._state, 16);
        return;
      }
    }
  },
  _onPauseStateChange$0: function() {
  },
  _onSubscriptionStateChange$0: function() {
  },
  _addPendingEvent$1: function($event) {
    var events;
    if (this._pendingEvents == null)
      this._pendingEvents = $._StreamImplEvents$();
    events = this._pendingEvents;
    events.add$1(events, $event);
    if (this.get$_isPaused() || this.get$_isFiring())
      return;
    if (this.get$_isInCallback()) {
      this._pendingEvents.schedule$1(this);
      return;
    }
  },
  _handlePendingEvents$0: function() {
    if (!this.get$_hasPendingEvent())
      return;
    var events = this._pendingEvents;
    do {
      if (this.get$_isPaused())
        return;
      if (events.get$isScheduled())
        events.cancelSchedule$0();
      events.handleNext$1(this);
    } while (events.get$isEmpty(events) !== true);
  },
  _sendData$1: function(value) {
    if (this.get$_hasListener() !== true)
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendData_anon(value));
  },
  _sendError$1: function(error) {
    if (this.get$_hasListener() !== true)
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendError_anon(error));
  },
  _sendDone$0: function() {
    this._state = $.$or$n(this._state, 2);
    if (this.get$_hasListener() !== true)
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendDone_anon(this));
  },
  $asStream: null
};

$$._StreamImpl__sendData_anon = {"": "Closure;value_0",
  call$1: function(subscriber) {
    var e, s, exception, t1;
    try {
      subscriber._sendData$1(this.value_0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      $._throwDelayed(e, s);
    }

  },
  $isFunction: true
};

$$._StreamImpl__sendError_anon = {"": "Closure;error_0",
  call$1: function(subscriber) {
    var e, s, exception, t1;
    try {
      subscriber._sendError$1(this.error_0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      $._throwDelayed(e, s);
    }

  },
  $isFunction: true
};

$$._StreamImpl__sendDone_anon = {"": "Closure;this_0",
  call$1: function(subscriber) {
    var e, s, exception, t1;
    this.this_0._cancel$1(subscriber);
    try {
      subscriber._sendDone$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      $._throwDelayed(e, s);
    }

  },
  $isFunction: true
};

$$._SingleStreamImpl = {"": "_StreamImpl;",
  get$_hasListener: function() {
    return this._subscriber != null;
  },
  _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
    return $._StreamSubscriptionImpl$(this, onData, onError, onDone, cancelOnError, $.getRuntimeTypeArgument(this, this.$as_SingleStreamImpl, 0));
  },
  _addListener$1: function(subscription) {
    if (this.get$_hasListener() === true)
      throw $.wrapException($.StateError$("Stream already has subscriber."));
    this._updatePauseCount$1(-1);
    this._subscriber = subscription;
    subscription._setSubscribed$1(0);
    if (this.get$_isInactive()) {
      this._checkCallbacks$2(false, true);
      if (!this.get$_isPaused() && this.get$_hasPendingEvent())
        this._pendingEvents.schedule$1(this);
    }
  },
  _cancel$1: function(subscriber) {
    var t1, resumeCount;
    t1 = this._subscriber;
    if (t1 == null ? subscriber != null : t1 !== subscriber)
      return;
    this._subscriber = null;
    resumeCount = subscriber._setUnsubscribed$0();
    t1 = -resumeCount;
    this._updatePauseCount$1(this.get$_isComplete() ? t1 : t1 + 1);
    if (this.get$_isInactive()) {
      this._checkCallbacks$2(true, resumeCount > 0);
      if (!this.get$_isPaused() && this.get$_hasPendingEvent())
        this._pendingEvents.schedule$1(this);
    }
  },
  _forEachSubscriber$1: function(action) {
    var wasInputPaused, subscription;
    wasInputPaused = this.get$_isInputPaused();
    subscription = this._subscriber;
    this._state = $.$xor$n(this._state, 12);
    action.call$1(subscription);
    this._state = $.$xor$n(this._state, 8);
    this._checkCallbacks$2(true, wasInputPaused);
  },
  _SingleStreamImpl$0: function(T) {
    this._updatePauseCount$1(1);
  },
  $as_StreamImpl: null
};

$$._MultiStreamImpl = {"": "_StreamImpl;_nextLink@,_previousLink@",
  get$isBroadcast: function() {
    return true;
  },
  get$_hasListener: function() {
    return !$._InternalLinkList_isEmpty(this);
  },
  _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
    return $._StreamSubscriptionImpl$(this, onData, onError, onDone, cancelOnError, $.getRuntimeTypeArgument(this, this.$as_MultiStreamImpl, 0));
  },
  _forEachSubscriber$1: function(action) {
    var wasInputPaused, cursor, cursor0;
    if (!this.get$_hasListener())
      return;
    wasInputPaused = this.get$_isInputPaused();
    this._state = $.$xor$n(this._state, 12);
    cursor = this._nextLink;
    for (; cursor !== this; cursor = cursor0) {
      if (cursor._needsEvent$1(this.get$_currentEventIdBit())) {
        action.call$1(cursor);
        cursor._toggleEventReceived$0();
      }
      cursor0 = cursor.get$_nextLink();
      if (cursor.get$_isPendingUnsubscribe())
        this._removeListener$1(cursor);
    }
    this._state = $.$xor$n(this._state, 8);
    this._checkCallbacks$2(true, wasInputPaused);
  },
  _addListener$1: function(listener) {
    var hadListener;
    listener._setSubscribed$1(this.get$_currentEventIdBit());
    hadListener = this.get$_hasListener();
    $._InternalLinkList_add(this, listener);
    if (!hadListener && this.get$_isInactive()) {
      this._checkCallbacks$2(false, false);
      if (!this.get$_isPaused() && this.get$_hasPendingEvent())
        this._pendingEvents.schedule$1(this);
    }
  },
  _cancel$1: function(listener) {
    var t1, wasInputPaused;
    t1 = listener.get$_nextLink();
    if (listener == null ? t1 == null : listener === t1)
      return;
    if (this.get$_isFiring())
      if (listener._needsEvent$1(this.get$_currentEventIdBit()))
        listener._setPendingUnsubscribe$1(this.get$_currentEventIdBit());
      else
        this._removeListener$1(listener);
    else {
      wasInputPaused = this.get$_isInputPaused();
      this._removeListener$1(listener);
      if (this.get$_isInactive()) {
        this._checkCallbacks$2(true, wasInputPaused);
        if (!this.get$_isPaused() && this.get$_hasPendingEvent())
          this._pendingEvents.schedule$1(this);
      }
    }
  },
  _removeListener$1: function(listener) {
    var pauseCount, t1;
    pauseCount = listener._setUnsubscribed$0();
    $._InternalLink_unlink(listener);
    if (pauseCount > 0) {
      this._updatePauseCount$1(-pauseCount);
      if (!this.get$_isPaused() && this.get$_hasPendingEvent()) {
        t1 = this._state;
        if (typeof t1 !== "number")
          return this._removeListener$1$bailout(1, t1);
        this._state = (t1 | 32) >>> 0;
      }
    }
  },
  _removeListener$1$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
        pauseCount = listener._setUnsubscribed$0();
        $._InternalLink_unlink(listener);
      case 1:
        var pauseCount;
        if (state0 === 1 || state0 === 0 && pauseCount > 0)
          switch (state0) {
            case 0:
              this._updatePauseCount$1(-pauseCount);
            case 1:
              if (state0 === 1 || state0 === 0 && !this.get$_isPaused() && this.get$_hasPendingEvent())
                switch (state0) {
                  case 0:
                    t1 = this._state;
                  case 1:
                    state0 = 0;
                    this._state = $.$or$n(t1, 32);
                }
          }
    }
  },
  _MultiStreamImpl$0: function(T) {
    this._previousLink = this;
    this._nextLink = this;
  },
  $as_StreamImpl: null
};

$$._StreamSubscriptionImpl = {"": "_StreamListener;_cancelOnError,_onData,_onError,_onDone,_liblib2$_source,_state,_nextLink,_previousLink",
  _onData$1: function(arg0) {
    return this._onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  onDone$1: function(handleDone) {
    this._onDone = handleDone;
  },
  _sendData$1: function(data) {
    this._onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._cancelOnError)
      this._liblib2$_source._cancel$1(this);
  },
  _sendDone$0: function() {
    this._onDone$0();
  },
  cancel$0: function() {
    if (!this.get$_isSubscribed())
      return;
    this._liblib2$_source._cancel$1(this);
  },
  $as_StreamListener: null
};

$$._DelayedEvent = {"": "Object;next@"};

$$._DelayedData = {"": "_DelayedEvent;value,next",
  perform$1: function(stream) {
    stream._sendData$1(this.value);
  },
  $as_DelayedEvent: null
};

$$._DelayedError = {"": "_DelayedEvent;error,next",
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  },
  perform$1: function(stream) {
    stream._sendError$1(this.error);
  }
};

$$._DelayedDone = {"": "Object;",
  perform$1: function(stream) {
    stream._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw $.wrapException($.StateError$("No events after a done."));
  }
};

$$._InternalLink = {"": "Object;_nextLink@,_previousLink@",
  _InternalLink$0: function() {
    this._nextLink = this;
    this._previousLink = this;
  }
};

$$._StreamListener = {"": "_InternalLink;_state@",
  get$_isPendingUnsubscribe: function() {
    return (this._state & 2) !== 0;
  },
  get$_isSubscribed: function() {
    return (this._state & 1) !== 0;
  },
  _needsEvent$1: function(currentEventIdBit) {
    return $.JSInt_methods.$shr(this._state & 4, 2) !== currentEventIdBit;
  },
  _toggleEventReceived$0: function() {
    this._state = (this._state ^ 4) >>> 0;
  },
  _setSubscribed$1: function(eventIdBit) {
    this._state = (1 | eventIdBit << 2) >>> 0;
  },
  _setPendingUnsubscribe$1: function(currentEventIdBit) {
    this._state = (this._state | 6) >>> 0;
    this._state = (this._state ^ (1 ^ currentEventIdBit) << 2) >>> 0;
  },
  _setUnsubscribed$0: function() {
    var timesPaused = $.JSInt_methods.$shr(this._state, 3);
    this._state = 0;
    return timesPaused;
  },
  $as_InternalLink: null
};

$$._PendingEvents = {"": "Object;scheduleTimer?",
  get$isScheduled: function() {
    return this.scheduleTimer != null;
  },
  schedule$1: function(stream) {
    var t1, milliseconds;
    if (this.get$isScheduled())
      return;
    t1 = new $._PendingEvents_schedule_anon(this, stream);
    milliseconds = $.Duration_0.get$inMilliseconds();
    if (milliseconds < 0)
      milliseconds = 0;
    this.scheduleTimer = $.TimerImpl$(milliseconds, t1);
  },
  cancelSchedule$0: function() {
    this.scheduleTimer.cancel$0();
    this.scheduleTimer = null;
  }
};

$$._PendingEvents_schedule_anon = {"": "Closure;this_0,stream_1",
  call$0: function() {
    this.this_0.set$scheduleTimer(null);
    this.stream_1._handlePendingEvents$0();
  },
  $isFunction: true
};

$$._StreamImplEvents = {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,scheduleTimer",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  get$isScheduled: function() {
    return this.scheduleTimer != null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(stream) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(stream);
  }
};

$$._DoneSubscription = {"": "Object;_handler<,_timer,_pauseCount",
  _handler$0: function() {
    return this._handler.call$0();
  },
  _delayDone$0: function() {
    var t1, milliseconds;
    t1 = new $._DoneSubscription__delayDone_anon(this);
    milliseconds = $.Duration_0.get$inMilliseconds();
    if (milliseconds < 0)
      milliseconds = 0;
    this._timer = $.TimerImpl$(milliseconds, t1);
  },
  get$_isComplete: function() {
    return this._timer == null && this._pauseCount === 0;
  },
  onDone$1: function(handleDone) {
    this._handler = handleDone;
  },
  cancel$0: function() {
    if (this.get$_isComplete())
      return;
    var t1 = this._timer;
    if (t1 != null) {
      t1.cancel$0();
      this._timer = null;
    }
    this._pauseCount = 0;
  },
  _DoneSubscription$1: function(_handler, T) {
    this._delayDone$0();
  }
};

$$._DoneSubscription__delayDone_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    if (t1.get$_handler() != null)
      t1._handler$0();
  },
  $isFunction: true
};

$$._SingleStreamMultiplexer = {"": "_MultiStreamImpl;_liblib2$_source,_subscription,_nextLink,_previousLink,_state,_pendingEvents",
  _onSubscriptionStateChange$0: function() {
    var t1, t2;
    if (this.get$_hasListener()) {
      t1 = this.get$_liblib2$_add();
      t2 = this.get$_addError();
      this._subscription = this._liblib2$_source.listen$3$onDone$onError(t1, this.get$_close(), t2);
    } else {
      t1 = this._subscription;
      if (t1 == null)
        return;
      t1.cancel$0();
      this._subscription = null;
    }
  },
  $as_MultiStreamImpl: null
};

$$._ForwardingStream = {"": "Stream;",
  get$isBroadcast: function() {
    return this._liblib2$_source.get$isBroadcast();
  },
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, true === cancelOnError, $.getRuntimeTypeArgument(this, this.$as_ForwardingStream, 0), $.getRuntimeTypeArgument(this, this.$as_ForwardingStream, 1));
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._sendData$1(data);
  },
  _handleError$2: function(error, sink) {
    sink._sendError$1(error);
  },
  _handleDone$1: function(sink) {
    sink._sendDone$0();
  },
  $asStream: function (S, T) { return [T]; }
};

$$._BaseStreamSubscription = {"": "Object;",
  _onData$1: function(arg0) {
    return this._onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  onDone$1: function(handleDone) {
    this._onDone = handleDone;
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone, T) {
    if (this._onError == null)
      this._onError = $._nullErrorHandler;
    if (this._onDone == null)
      this._onDone = $._nullDoneHandler;
  }
};

$$._ForwardingStreamSubscription = {"": "_BaseStreamSubscription;_stream,_cancelOnError,_subscription,_onData,_onError,_onDone",
  cancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
  },
  _sendData$1: function(data) {
    this._onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._cancelOnError) {
      this._subscription.cancel$0();
      this._subscription = null;
    }
  },
  _sendDone$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
    this._onDone$0();
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._stream._handleError$2(error, this);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._subscription = null;
    this._stream._handleDone$1(this);
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _cancelOnError, S, T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._liblib2$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BaseStreamSubscription: function (S, T) { return [T]; }
};

$$._WhereStream = {"": "_ForwardingStream;_test,_liblib2$_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s));
      return;
    }

    if (satisfies === true)
      sink._sendData$1(inputEvent);
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
};

$$._MapStream = {"": "_ForwardingStream;_transform,_liblib2$_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s));
      return;
    }

    sink._sendData$1(outputEvent);
  },
  $as_ForwardingStream: null
};

$$._SkipStream = {"": "_ForwardingStream;_remaining,_liblib2$_source",
  _handleData$2: function(inputEvent, sink) {
    if ($.$gt$n(this._remaining, 0)) {
      this._remaining = $.$sub$n(this._remaining, 1);
      return;
    }
    return sink._sendData$1(inputEvent);
  },
  _SkipStream$2: function(source, count, T) {
    if (!(typeof count === "number" && Math.floor(count) === count) || count < 0)
      throw $.wrapException($.ArgumentError$(count));
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
};

$$.Timer_run_anon = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)); i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.addAll$1$ax($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.addAll$1$ax($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  },
  $isFunction: true
};

$$.UnmodifiableListView = {"": "UnmodifiableListBase;_liblib0$_source",
  get$length: function(_) {
    return this._liblib0$_source.length;
  },
  $index: function(_, index) {
    return $.JSArray_methods.elementAt$1(this._liblib0$_source, index);
  },
  $asUnmodifiableListBase: null,
  $asList: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  }
};

$$.HashMap = {"": "Object;_liblib0$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$keys: function() {
    return $.HashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.HashMap_values_anon(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          ;
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        value = strings;
      strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          ;
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        value = nums;
      nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          ;
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        value = [key, value];
        if (value == null)
          value = rest;
        rest[hash] = value;
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib0$_length = this._liblib0$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = $.get$length$asx(keys), i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib0$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true
};

$$.IterableBase = {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0), null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0));
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  skip$1: function(_, n) {
    return $.SkipIterable$(this, n, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0));
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    var t1, t2;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (test.call$1(t2) === true)
        return t2;
    }
    if (orElse != null)
      return orElse.call$0();
    throw $.wrapException($.StateError$("No matching element"));
  },
  elementAt$1: function(_, index) {
    var t1, remaining, t2;
    if (!(typeof index === "number" && Math.floor(index) === index) || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (remaining === 0)
        return t2;
      --remaining;
    }
    throw $.wrapException($.RangeError$value(index));
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$.LinkedHashMap = {"": "Object;_liblib0$_length,_strings,_nums,_rest,_first,_last,_modifications",
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.LinkedHashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException($.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  get$keys: function() {
    return $.LinkedHashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asLinkedHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.LinkedHashMap_values_anon(this));
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = $.LinkedHashMapCell$(key, value);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  $isMap: true
};

$$.ListBase = {"": "Object;",
  get$iterator: function(_) {
    return $.ListIterator$(this, $.getRuntimeTypeArgument(this, this.$asListMixin, 0));
  },
  elementAt$1: function(_, index) {
    return this.$index(this, index);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.$index(this, i));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    var $length, i, element;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.firstWhere$2$orElse$bailout(1, test, orElse, $length);
    for (i = 0; i < $length; ++i) {
      element = this.$index(this, i);
      if (test.call$1(element) === true)
        return element;
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
    if (orElse != null)
      return orElse.call$0();
    throw $.wrapException($.StateError$("No matching element"));
  },
  firstWhere$2$orElse$bailout: function(state0, test, orElse, $length) {
    var t1, i, element;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      element = this.$index(this, i);
      if (test.call$1(element) === true)
        return element;
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
    if (orElse != null)
      return orElse.call$0();
    throw $.wrapException($.StateError$("No matching element"));
  },
  where$1: function(_, test) {
    return $.WhereIterable$(this, test, $.getRuntimeTypeArgument(this, this.$asListMixin, 0));
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  skip$1: function(_, count) {
    return $.SubListIterable$(this, count, null, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListMixin, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListMixin, 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListMixin, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListMixin, 0)]);
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.$index(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    var t1 = this.get$length(this);
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, element, t1);
    this.set$length(this, t1 + 1);
    this.$indexSet(this, t1, element);
  },
  add$1$bailout: function(state0, element, t1) {
    this.set$length(this, $.$add$ns(t1, 1));
    this.$indexSet(this, t1, element);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, t3;
    for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = this.get$length(this);
      this.set$length(this, $.$add$ns(t3, 1));
      this.$indexSet(this, t3, t2);
    }
  },
  retainWhere$1: function(_, test) {
    $.ListMixin__filter(this, test, true);
  },
  removeLast$0: function(_) {
    var result;
    if ($.$eq(this.get$length(this), 0) === true)
      throw $.wrapException($.StateError$("No elements"));
    result = this.$index(this, $.$sub$n(this.get$length(this), 1));
    this.set$length(this, $.$sub$n(this.get$length(this), 1));
    return result;
  },
  sort$1: function(_, compare) {
    var t1 = $.$sub$n(this.get$length(this), 1);
    if ($.$le$n($.$sub$n(t1, 0), 32))
      $.Sort_insertionSort_(this, 0, t1, compare);
    else
      $.Sort__dualPivotQuicksort(this, 0, t1, compare);
  },
  sublist$2: function(_, start, end) {
    var t1, $length, result, i;
    if (typeof start !== "number")
      return this.sublist$2$bailout(1, start, end);
    if (end == null)
      end = this.get$length(this);
    if (start < 0 || $.JSNumber_methods.$gt(start, this.get$length(this)))
      $.throwExpression($.RangeError$range(start, 0, this.get$length(this)));
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(this)))
      $.throwExpression($.RangeError$range(end, start, this.get$length(this)));
    $length = t1.$sub(end, start);
    if (typeof $length !== "number")
      return this.sublist$2$bailout(2, start, 0, $.JSNumber_methods, $length);
    result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListMixin, 0));
    $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListMixin, 0)]);
    $.JSArray_methods.set$length(result, $length);
    for (i = 0; i < $length; ++i) {
      t1 = this.$index(this, start + i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  sublist$2$bailout: function(state0, start, end, t1, $length) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (end == null)
          end = this.get$length(this);
        t1 = $.getInterceptor$n(start);
        if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(this)))
          $.throwExpression($.RangeError$range(start, 0, this.get$length(this)));
        t2 = $.getInterceptor$n(end);
        if (t2.$lt(end, start) || t2.$gt(end, this.get$length(this)))
          $.throwExpression($.RangeError$range(end, start, this.get$length(this)));
        $length = t2.$sub(end, start);
      case 2:
        var t2, result, i;
        state0 = 0;
        result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListMixin, 0));
        $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListMixin, 0)]);
        $.JSArray_methods.set$length(result, $length);
        for (i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
          t2 = this.$index(this, t1.$add(start, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    var t1, $length, otherStart, otherList, i;
    if (typeof start !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount);
    if (typeof end !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount);
    if (typeof iterable !== "string" && (typeof iterable !== "object" || iterable === null || iterable.constructor !== Array && !$.getInterceptor(iterable).$isJavaScriptIndexingBehavior()))
      return this.setRange$4$bailout(1, start, end, iterable, skipCount);
    if (typeof skipCount !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount);
    if (!(start < 0)) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        return this.setRange$4$bailout(2, start, end, iterable, skipCount, $.JSNumber_methods, t1);
      t1 = start > t1;
    } else
      t1 = true;
    if (t1)
      $.throwExpression($.RangeError$range(start, 0, this.get$length(this)));
    if (!(end < start)) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        return this.setRange$4$bailout(3, start, end, iterable, skipCount, $.JSNumber_methods, $.JSNumber_methods, t1);
      t1 = end > t1;
    } else
      t1 = true;
    if (t1)
      $.throwExpression($.RangeError$range(end, start, this.get$length(this)));
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw $.wrapException($.ArgumentError$(skipCount));
    if (typeof iterable === "object" && iterable !== null && (iterable.constructor === Array || $.getInterceptor(iterable).$isList())) {
      otherStart = skipCount;
      otherList = iterable;
    } else {
      otherList = $.toList$1$growable$ax($.skip$1$ax(iterable, skipCount), false);
      if (typeof otherList !== "string" && (typeof otherList !== "object" || otherList === null || otherList.constructor !== Array && !$.getInterceptor(otherList).$isJavaScriptIndexingBehavior()))
        return this.setRange$4$bailout(4, start, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, otherList, $length);
      otherStart = 0;
    }
    if (otherStart + $length > otherList.length)
      throw $.wrapException($.StateError$("Not enough elements"));
    if (otherStart < start)
      for (i = $length - 1; i >= 0; --i) {
        t1 = otherStart + i;
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(this, start + i, otherList[t1]);
      }
    else
      for (i = 0; i < $length; ++i) {
        t1 = otherStart + i;
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(this, start + i, otherList[t1]);
      }
  },
  setRange$4$bailout: function(state0, start, end, iterable, skipCount, t1, t2, t3, otherList, $length) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$n(start);
      case 2:
        if (state0 === 2 || state0 === 0 && !t1.$lt(start, 0))
          switch (state0) {
            case 0:
              t2 = this.get$length(this);
            case 2:
              state0 = 0;
              t2 = t1.$gt(start, t2);
          }
        else
          t2 = true;
        if (t2)
          $.throwExpression($.RangeError$range(start, 0, this.get$length(this)));
        t2 = $.getInterceptor$n(end);
      case 3:
        if (state0 === 3 || state0 === 0 && !t2.$lt(end, start))
          switch (state0) {
            case 0:
              t3 = this.get$length(this);
            case 3:
              state0 = 0;
              t3 = t2.$gt(end, t3);
          }
        else
          t3 = true;
        if (t3)
          $.throwExpression($.RangeError$range(end, start, this.get$length(this)));
        $length = t2.$sub(end, start);
        t2 = $.getInterceptor($length);
        if (t2.$eq($length, 0) === true)
          return;
        if ($.$lt$n(skipCount, 0))
          throw $.wrapException($.ArgumentError$(skipCount));
      case 4:
        var otherStart, t4, i;
        if (state0 === 0 && typeof iterable === "object" && iterable !== null && (iterable.constructor === Array || $.getInterceptor(iterable).$isList())) {
          otherStart = skipCount;
          otherList = iterable;
        } else
          switch (state0) {
            case 0:
              otherList = $.toList$1$growable$ax($.skip$1$ax(iterable, skipCount), false);
            case 4:
              state0 = 0;
              otherStart = 0;
          }
        t3 = $.getInterceptor$ns(otherStart);
        t4 = $.getInterceptor$asx(otherList);
        if ($.$gt$n(t3.$add(otherStart, $length), t4.get$length(otherList)))
          throw $.wrapException($.StateError$("Not enough elements"));
        if (t3.$lt(otherStart, start))
          for (i = t2.$sub($length, 1); t2 = $.getInterceptor$n(i), t2.$ge(i, 0); i = t2.$sub(i, 1))
            this.$indexSet(this, t1.$add(start, i), t4.$index(otherList, t3.$add(otherStart, i)));
        else
          for (i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
            this.$indexSet(this, t1.$add(start, i), t4.$index(otherList, t3.$add(otherStart, i)));
    }
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  indexOf$2: function(_, element, startIndex) {
    var i;
    if (typeof startIndex !== "number")
      return this.indexOf$2$bailout(1, element, startIndex);
    if ($.JSNumber_methods.$ge(startIndex, this.get$length(this)))
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i)
      if ($.$eq(this.$index(this, i), element) === true)
        return i;
    return -1;
  },
  indexOf$2$bailout: function(state0, element, startIndex) {
    var t1, i;
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$ge(startIndex, this.get$length(this)))
      return -1;
    if (t1.$lt(startIndex, 0))
      startIndex = 0;
    for (i = startIndex; t1 = $.getInterceptor$n(i), t1.$lt(i, this.get$length(this)); i = t1.$add(i, 1))
      if ($.$eq(this.$index(this, i), element) === true)
        return i;
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$.ListQueue = {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this, null);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    if (index < 0 || index > this.get$length(this))
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = t1.length;
    t3 = (this._head + index & t2 - 1) >>> 0;
    if (t3 < 0 || t3 >= t2)
      throw $.ioore(t3);
    return t1[t3];
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
      $.JSArray_methods.set$length(list, this.get$length(this));
    } else {
      list = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || $.getInterceptor(elements).$isList())) {
      addCount = $.get$length$asx(elements);
      $length = this.get$length(this);
      if (typeof addCount !== "number")
        throw $.iae(addCount);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        $.JSArray_methods.setRange$4(this._table, $length, t1, elements, 0);
        this._tail = $.$add$ns(this._tail, addCount);
      } else {
        t1 = this._tail;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          $.JSArray_methods.setRange$4(t2, t1, t1 + addCount, elements, 0);
          this._tail = $.$add$ns(this._tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          $.JSArray_methods.setRange$4(t2, t1, t1 + endSpace, elements, 0);
          $.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      this._modificationCount = this._modificationCount + 1;
    } else
      for (t1 = $.get$iterator$ax(elements); t1.moveNext$0() === true;)
        this._add$1(t1.get$current());
  },
  _filterWhere$2: function(test, removeMatching) {
    var index, modificationCount, i, t1, remove;
    index = this._head;
    modificationCount = this._modificationCount;
    for (i = index; !$.$eq(i, this._tail);) {
      t1 = this._table;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      remove = $.$eq(test.call$1(t1[i]), removeMatching);
      if (modificationCount !== this._modificationCount)
        $.throwExpression($.ConcurrentModificationError$(this));
      if (remove === true) {
        i = this._liblib0$_remove$1(i);
        modificationCount = this._modificationCount + 1;
        this._modificationCount = modificationCount;
      } else
        i = (i + 1 & this._table.length - 1) >>> 0;
    }
  },
  retainWhere$1: function(_, test) {
    this._filterWhere$2(test, false);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  addLast$1: function(element) {
    this._add$1(element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _checkModification$1: function(expectedModificationCount) {
    if (typeof expectedModificationCount !== "number")
      return this._checkModification$1$bailout(1, expectedModificationCount);
    if (expectedModificationCount !== this._modificationCount)
      throw $.wrapException($.ConcurrentModificationError$(this));
  },
  _checkModification$1$bailout: function(state0, expectedModificationCount) {
    if ($.$eq(expectedModificationCount, this._modificationCount) !== true)
      throw $.wrapException($.ConcurrentModificationError$(this));
  },
  _add$1: function(element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, this._table.length - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _liblib0$_remove$1: function(offset) {
    var t1, t2, mask, t3, startDistance, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    startDistance = (offset - t3 & mask) >>> 0;
    t4 = this._tail;
    if (typeof t4 !== "number")
      return this._liblib0$_remove$1$bailout(1, offset, mask, startDistance, t4);
    if (startDistance < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t2)
          throw $.ioore(nextOffset);
        t3 = t1[nextOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      return offset;
    }
  },
  _liblib0$_remove$1$bailout: function(state0, offset, mask, startDistance, t1) {
    switch (state0) {
      case 0:
        mask = this._table.length - 1;
        startDistance = (offset - this._head & mask) >>> 0;
        t1 = this._tail;
      case 1:
        state0 = 0;
      case 2:
        var t2, i, t3, prevOffset, nextOffset;
        if (state0 === 0 && startDistance < $.$and$n($.$sub$n(t1, offset), mask)) {
          for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._head, i !== t3; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            if (prevOffset < 0 || prevOffset >= t2)
              throw $.ioore(prevOffset);
            t3 = t1[prevOffset];
            if (i < 0 || i >= t2)
              throw $.ioore(i);
            t1[i] = t3;
          }
          if (t3 < 0 || t3 >= t2)
            throw $.ioore(t3);
          t1[t3] = null;
          this._head = (t3 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else
          switch (state0) {
            case 0:
              t1 = this._tail;
            case 2:
              state0 = 0;
              this._tail = $.$and$n($.$sub$n(t1, 1), mask);
              for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
                nextOffset = (i + 1 & mask) >>> 0;
                if (nextOffset < 0 || nextOffset >= t2)
                  throw $.ioore(nextOffset);
                t3 = t1[nextOffset];
                if (i < 0 || i >= t2)
                  throw $.ioore(i);
                t1[i] = t3;
              }
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t2)
                throw $.ioore(t3);
              t1[t3] = null;
              return offset;
          }
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.JSInt_methods.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$sub$n(this._tail, t2);
      $.JSArray_methods.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t1, t2);
      t2 = this._tail;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      $.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + t2, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount), $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $asIterable: function() {
    return null;
  },
  $isIterable: function() {
    return true;
  }
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount,_liblib0$_position,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    t1._checkModification$1(this._modificationCount);
    t2 = this._liblib0$_position;
    if (t2 === this._end) {
      this._liblib0$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib0$_current = t3[t2];
    this._liblib0$_position = (this._liblib0$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
};

$$.DateTime = {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!$.getInterceptor(other).$isDateTime))
      return false;
    return $.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) === true && $.$eq(this.isUtc, other.isUtc) === true;
  },
  compareTo$1: function(_, other) {
    return $.compareTo$1$ns(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, t2, t3, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_fourDigits();
    t2 = new $.DateTime_toString_threeDigits();
    t3 = new $.DateTime_toString_twoDigits();
    y = t1.call$1(this.get$year());
    m = t3.call$1(this.get$month());
    d = t3.call$1(this.get$day());
    h = t3.call$1(this.get$hour());
    min = t3.call$1(this.get$minute());
    sec = t3.call$1(this.get$second());
    ms = t2.call$1(this.get$millisecond());
    if (this.isUtc === true)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(_, duration) {
    return $.DateTime$fromMillisecondsSinceEpoch($.$add$ns(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
  },
  difference$1: function(other) {
    return $.Duration$(0, 0, 0, $.$sub$n(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch), 0, 0);
  },
  get$year: function() {
    return $.Primitives_getYear(this);
  },
  get$month: function() {
    return $.Primitives_getMonth(this);
  },
  get$day: function() {
    return $.Primitives_getDay(this);
  },
  get$hour: function() {
    return $.Primitives_getHours(this);
  },
  get$minute: function() {
    return $.Primitives_getMinutes(this);
  },
  get$second: function() {
    return $.Primitives_getSeconds(this);
  },
  get$millisecond: function() {
    return $.Primitives_getMilliseconds(this);
  },
  DateTime$_now$0: function() {
    $.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if ($.abs$0$n(millisecondsSinceEpoch) > 8640000000000000)
      throw $.wrapException($.ArgumentError$(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.wrapException($.ArgumentError$(isUtc));
  },
  $isDateTime: true
};

$$.DateTime_toString_fourDigits = {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) ? "-" : "";
    if (absN >= 1000)
      return $.S(n);
    if (absN >= 100)
      return sign + "0" + $.S(absN);
    if (absN >= 10)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  },
  $isFunction: true
};

$$.DateTime_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return $.S(n);
    if (t1.$ge(n, 10))
      return "0" + $.S(n);
    return "00" + $.S(n);
  },
  $isFunction: true
};

$$.DateTime_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
};

$$.Duration = {"": "Object;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.wrapException($.IntegerDivisionByZeroException$());
    return $.Duration$(0, 0, $.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return $.JSNumber_methods.$le(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inHours: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!$.getInterceptor(other).$isDuration))
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  compareTo$1: function(_, other) {
    return $.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_sixDigits();
    t2 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = t2.call$1($.JSNumber_methods.remainder$1(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.JSNumber_methods.remainder$1(this.get$inSeconds(), 60));
    sixDigitUs = t1.call$1($.JSNumber_methods.remainder$1(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  $isFunction: true
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message>",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  },
  $isArgumentError: true
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    for (; $.$lt$n(t1.i_1, t2.length); t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0))
        t1.sb_0.write$1(", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t3.write$1($.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      t3 = t1.sb_0;
      actualParameters = t3.toString$0(t3);
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; $.JSNumber_methods.$lt(i, $.JSNull_methods.get$length(t2)); ++i) {
        if (i > 0)
          t1.sb_0.write$1(", ");
        t1.sb_0.write$1($.JSNull_methods.$index(t2, i));
      }
      t1 = t1.sb_0;
      formalParameters = t1.toString$0(t1);
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {"": "Object;message>",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message>",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message>",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message>",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message>",
  toString$0: function(_) {
    return "FormatException: " + this.message;
  },
  $isException: true
};

$$.IntegerDivisionByZeroException = {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.Expando = {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = $.Object$();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  },
  get$runtimeType: function(_) {
    return $.TypeImpl$($.getRuntimeTypeString(this));
  }
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    if (typeof separator !== "string")
      return this.writeAll$2$bailout(1, objects, separator);
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.JSString_methods.get$isEmpty(separator))
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (; iterator.moveNext$0() === true;) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  writeAll$2$bailout: function(state0, objects, separator) {
    var iterator, str, t1;
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.get$isEmpty$asx(separator) === true)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        this._contents = this._contents + str;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$._ChildrenElementList = {"": "ListBase;_element,_childElements",
  toList$1$growable: function(_, growable) {
    var t1, output, len, t2, i, t3;
    t1 = this._childElements;
    if (growable) {
      output = [];
      $.JSArray_methods.set$length(output, $.get$length$asx(t1));
    } else {
      output = $.List_List($.get$length$asx(t1), $.Element);
      $.setRuntimeTypeInfo(output, [$.Element]);
    }
    for (t1 = this._childElements, len = $.get$length$asx(t1), t2 = $.getInterceptor$asx(t1), i = 0; i < len; ++i) {
      t3 = t2.$index(t1, i);
      if (i >= output.length)
        throw $.ioore(i);
      output[i] = t3;
    }
    return output;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = $.get$iterator$ax(this._childElements); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  map$1: function(_, f) {
    return $.map$1$ax(this._childElements, f);
  },
  where$1: function(_, f) {
    return $.where$1$ax(this._childElements, f);
  },
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  skip$1: function(_, n) {
    return $.skip$1$ax(this._childElements, n);
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    return $.firstWhere$2$orElse$ax(this._childElements, test, orElse);
  },
  elementAt$1: function(_, index) {
    return $.$index$asx(this._childElements, index);
  },
  get$length: function(_) {
    return $.get$length$asx(this._childElements);
  },
  $index: function(_, index) {
    return $.$index$asx(this._childElements, index);
  },
  $indexSet: function(_, index, value) {
    this._element.replaceChild(value, $.$index$asx(this._childElements, index));
  },
  set$length: function(_, newLength) {
    throw $.wrapException($.UnsupportedError$(""));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy)
      iterable = $.List_List$from(iterable, true, null);
    for (t1 = $.get$iterator$ax(iterable), t2 = this._element; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  sort$1: function(_, compare) {
    throw $.wrapException($.UnsupportedError$("TODO(jacobr): should we impl?"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException($.UnimplementedError$(null));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  retainWhere$1: function(_, test) {
    $.retainWhere$1$ax(this._childElements, test);
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      end = this.get$length(this);
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._element.removeChild(result);
    return result;
  },
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  toString$0: function(_) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(this, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $asListBase: function () { return [$.Element]; },
  $asList: function() {
    return function () { return [$.Element]; };
  },
  $asIterable: function() {
    return function () { return [$.Element]; };
  }
};

$$._FrozenElementList = {"": "ListBase;_nodeList",
  get$length: function(_) {
    return $.get$length$asx(this._nodeList);
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $indexSet: function(_, index, value) {
    throw $.wrapException($.UnsupportedError$(""));
  },
  set$length: function(_, newLength) {
    $.set$length$asx(this._nodeList, newLength);
  },
  add$1: function(_, value) {
    throw $.wrapException($.UnsupportedError$(""));
  },
  addAll$1: function(_, iterable) {
    throw $.wrapException($.UnsupportedError$(""));
  },
  sort$1: function(_, compare) {
    throw $.wrapException($.UnsupportedError$(""));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$(""));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sublist$2: function(_, start, end) {
    return $._FrozenElementList$_wrap($.sublist$2$ax(this._nodeList, start, end));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  removeLast$0: function(_) {
    throw $.wrapException($.UnsupportedError$(""));
  },
  retainWhere$1: function(_, test) {
    throw $.wrapException($.UnsupportedError$(""));
  },
  toString$0: function(_) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(this, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $asListBase: function () { return [null]; },
  $asList: function() {
    return function () { return [null]; };
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._ElementFactoryProvider__getColgroup_anon = {"": "Closure;",
  call$1: function(n) {
    return $.get$tagName$x(n) === "COLGROUP";
  },
  $isFunction: true
};

$$._ChildNodeListLazy = {"": "ListBase;_this",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, len, i, t2;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy) {
      t1 = this._this;
      if (iterable._this !== t1) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout1(1, iterable, len, t1);
        i = 0;
        for (; i < len; ++i)
          t1.appendChild(iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  addAll$1$bailout1: function(state0, iterable, len, t1) {
    switch (state0) {
      case 0:
      case 1:
        var i, t2;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && iterable._this !== t1)
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    i = 0;
                    for (; $.JSNumber_methods.$lt(i, len); ++i)
                      t1.appendChild(iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
          t2.appendChild(t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._this.removeChild(result);
    return result;
  },
  _filter$2: function(test, removeMatching) {
    var t1, child, nextChild;
    t1 = this._this;
    child = t1.firstChild;
    for (; child != null; child = nextChild) {
      nextChild = child.get$nextSibling();
      if ($.$eq(test.call$1(child), removeMatching) === true)
        t1.removeChild(child);
    }
  },
  retainWhere$1: function(_, test) {
    this._filter$2(test, false);
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1 = this._this;
    t1.replaceChild(value, $.$index$asx(t1.childNodes, index));
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this._this.childNodes);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  sort$1: function(_, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      $.$eq(end, this.get$length(this));
    return $.Lists_getRange(this, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(_) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(this, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  get$length: function(_) {
    return $.get$length$asx(this._this.childNodes);
  },
  set$length: function(_, value) {
    throw $.wrapException($.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    return $.$index$asx(this._this.childNodes, index);
  },
  $is_ChildNodeListLazy: true,
  $asListBase: function () { return [$.Node]; },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  }
};

$$._AttributeMap = {"": "Object;",
  forEach$1: function(_, f) {
    var t1, t2;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys()); t1.moveNext$0();) {
      t2 = t1.get$current();
      f.call$2(t2, this.$index(this, t2));
    }
  },
  get$keys: function() {
    var attributes, keys, t1, len, i;
    attributes = this._element.attributes;
    keys = $.List_List($, $.String);
    $.setRuntimeTypeInfo(keys, [$.String]);
    for (t1 = $.getInterceptor$asx(attributes), len = t1.get$length(attributes), i = 0; i < len; ++i)
      if (this._matches$1(t1.$index(attributes, i)))
        keys.push(t1.$index(attributes, i).localName);
    return keys;
  },
  get$values: function(_) {
    var attributes, values, t1, len, i;
    attributes = this._element.attributes;
    values = $.List_List($, $.String);
    $.setRuntimeTypeInfo(values, [$.String]);
    for (t1 = $.getInterceptor$asx(attributes), len = t1.get$length(attributes), i = 0; i < len; ++i)
      if (this._matches$1(t1.$index(attributes, i)))
        values.push($.get$value$x(t1.$index(attributes, i)));
    return values;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  $isMap: true,
  $asMap: function () { return [$.String, $.String]; }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_element",
  containsKey$1: function(key) {
    return this._element.hasAttribute(key);
  },
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  get$isBroadcast: function() {
    return true;
  },
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture, $.getRuntimeTypeArgument(this, this.$as_EventStream, 0));
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null
};

$$._EventStreamSubscription = {"": "StreamSubscription;_liblib4$_pauseCount,_target,_eventType,_liblib4$_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_canceled())
      return;
    var t1 = this._liblib4$_onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    this._target = null;
    this._liblib4$_onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  onDone$1: function(handleDone) {
  },
  get$_paused: function() {
    return this._liblib4$_pauseCount > 0;
  },
  _tryResume$0: function() {
    if (this._liblib4$_onData != null && !this.get$_paused())
      $.$$dom_addEventListener$3$x(this._target, this._eventType, this._liblib4$_onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture, T) {
    this._tryResume$0();
  },
  $asStreamSubscription: null
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture, null);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$.Point = {"": "Object;x>,y>",
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!$.getInterceptor(other).$isPoint))
      return false;
    return $.$eq(this.x, other.x) === true && $.$eq(this.y, other.y) === true;
  },
  $add: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Point$($.$add$ns(this.x, t1.get$x(other)), $.$add$ns(this.y, t1.get$y(other)));
  },
  $sub: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Point$($.$sub$n(this.x, t1.get$x(other)), $.$sub$n(this.y, t1.get$y(other)));
  },
  $mul: function(_, factor) {
    return $.Point$($.$mul$n(this.x, factor), $.$mul$n(this.y, factor));
  },
  toInt$0: function(_) {
    return $.Point$($.toInt$0$nx(this.x), $.toInt$0$nx(this.y));
  },
  $isPoint: true
};

$$.Rect = {"": "Object;left>,top>,width>,height>",
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && $.getInterceptor(other).$isRect()))
      return false;
    t1 = this.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = this.top;
      t3 = t2.get$top(other);
      t1 = (t1 == null ? t3 == null : t1 === t3) && $.$eq(this.width, t2.get$width(other)) === true && $.$eq(this.height, t2.get$height(other)) === true;
    } else
      t1 = false;
    return t1;
  },
  toInt$0: function(_) {
    return $.Rect$($.toInt$0$nx(this.left), $.toInt$0$nx(this.top), $.toInt$0$nx(this.width), $.toInt$0$nx(this.height));
  },
  get$topLeft: function(_) {
    return $.Point$(this.left, this.top);
  },
  $isRect: function() {
    return true;
  },
  $asRect: function() {
    return null;
  }
};

$$._WrappedList = {"": "Object;_list",
  get$iterator: function(_) {
    return $._WrappedIterator$($.get$iterator$ax(this._list), null);
  },
  map$1: function(_, f) {
    return $.map$1$ax(this._list, f);
  },
  where$1: function(_, f) {
    return $.where$1$ax(this._list, f);
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._list, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this._list, growable, null);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    return $.get$length$asx(this._list);
  },
  get$isEmpty: function(_) {
    return $.get$isEmpty$asx(this._list);
  },
  skip$1: function(_, n) {
    return $.skip$1$ax(this._list, n);
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    return $.firstWhere$2$orElse$ax(this._list, test, orElse);
  },
  elementAt$1: function(_, index) {
    return $.elementAt$1$ax(this._list, index);
  },
  add$1: function(_, element) {
    $.add$1$ax(this._list, element);
  },
  addAll$1: function(_, elements) {
    $.addAll$1$ax(this._list, elements);
  },
  retainWhere$1: function(_, test) {
    $.retainWhere$1$ax(this._list, test);
  },
  $index: function(_, index) {
    return $.$index$asx(this._list, index);
  },
  $indexSet: function(_, index, value) {
    $.$indexSet$ax(this._list, index, value);
  },
  set$length: function(_, newLength) {
    $.set$length$asx(this._list, newLength);
  },
  sort$1: function(_, compare) {
    $.sort$1$ax(this._list, compare);
  },
  indexOf$2: function(_, element, start) {
    return $.indexOf$2$asx(this._list, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    return $.removeLast$0$ax(this._list);
  },
  sublist$2: function(_, start, end) {
    return $.sublist$2$ax(this._list, start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(_) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(this, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$._WrappedIterator = {"": "Object;_liblib4$_iterator",
  moveNext$0: function() {
    return this._liblib4$_iterator.moveNext$0();
  },
  get$current: function() {
    return this._liblib4$_iterator.get$current();
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$parent: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  get$top: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.top);
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = $.$add$ns(this._position, 1);
    t1 = this._length;
    if ($.$lt$n(nextPosition, t1)) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, $length, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isDateTime)
      throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && $.getInterceptor(e).$isFile())
      return e;
    if (typeof e === "object" && e !== null && $.getInterceptor(e).$isBlob())
      return e;
    if (typeof e === "object" && e !== null && $.getInterceptor(e).$isArrayBuffer())
      return e;
    if (typeof e === "object" && e !== null && $.getInterceptor(e).$isArrayBufferView())
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (t2 != null)
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      e.forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || $.getInterceptor(e).$isList())) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(1, e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      t2 = this.readSlot_6;
      copy = t2.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t1 = e instanceof Array && !!!e.immutable$list;
      t3 = this.writeSlot_7;
      if (t1) {
        t3.call$2(slot, true);
        for (i = 0; i < $length; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (elementCopy == null ? element != null : elementCopy !== element) {
            copy0 = t2.call$1(slot);
            if (true === copy0) {
              copy0 = new Array($length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !$.getInterceptor(copy0).$isJavaScriptIndexingBehavior())
              return this.call$1$bailout(2, e, t3, elementCopy, $.JSArray_methods, copy0, $length, slot, t2, copy, i);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array($length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(3, e, 0, 0, $.JSArray_methods, 0, $length, 0, 0, copy, i);
      for (; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.wrapException($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, t4, elementCopy, t2, copy0, $length, slot, t3, copy, i) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isDateTime)
          throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && $.getInterceptor(e).$isFile())
          return e;
        if (typeof e === "object" && e !== null && $.getInterceptor(e).$isBlob())
          return e;
        if (typeof e === "object" && e !== null && $.getInterceptor(e).$isArrayBuffer())
          return e;
        if (typeof e === "object" && e !== null && $.getInterceptor(e).$isArrayBufferView())
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (t2 != null)
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          e.forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var t1, element, j;
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || $.getInterceptor(e).$isList()))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$asx(e);
              $length = t2.get$length(e);
              slot = this.findSlot_5.call$1(e);
              t3 = this.readSlot_6;
              copy = t3.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t1 = e instanceof Array && !!!e.immutable$list;
              t4 = this.writeSlot_7;
            case 2:
              if (state0 === 2 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t4.call$2(slot, true);
                    i = 0;
                  case 2:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.JSNumber_methods.$lt(i, $length))
                              break L0;
                            element = t2.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 2:
                            if (state0 === 2 || state0 === 0 && (elementCopy == null ? element != null : elementCopy !== element))
                              switch (state0) {
                                case 0:
                                  copy0 = t3.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array($length);
                                    t4.call$2(slot, copy0);
                                  }
                                case 2:
                                  state0 = 0;
                                  for (t1 = $.getInterceptor$ax(copy0), j = 0; j < i; ++j)
                                    t1.$indexSet(copy0, j, t2.$index(e, j));
                                  t1.$indexSet(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t4.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array($length);
                t4.call$2(slot, copy);
                i = 0;
              }
            case 3:
              state0 = 0;
              for (t1 = $.getInterceptor$ax(copy); $.JSNumber_methods.$lt(i, $length); ++i)
                t1.$indexSet(copy, i, this.call$1(t2.$index(e, i)));
              return copy;
          }
        throw $.wrapException($.UnimplementedError$("structured clone of other type"));
    }
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, $length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
        t2 = t1.get$current();
        copy.$indexSet(copy, t2, this.call$1(e[t2]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4)
        copy = new Array($length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(2, e, $length, copy, $.JSArray_methods, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, $length, copy, t1, slot) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if (Object.getPrototypeOf(e) === Object.prototype) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
            t2 = t1.get$current();
            copy.$indexSet(copy, t2, this.call$1(e[t2]));
          }
          return copy;
        }
      case 2:
        var t2, i;
        if (state0 === 2 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null)
                return copy;
              $length = t1.get$length(e);
              copy = this.mustCopy_4 ? new Array($length) : e;
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$ax(copy), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  },
  $isFunction: true
};

$$.FilteredElementList = {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_anon()), true, $.Element);
  },
  forEach$1: function(_, f) {
    $.JSArray_methods.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len;
    if (typeof newLength !== "number")
      return this.set$length$bailout(1, newLength);
    len = this.get$length(this);
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$length(this);
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len))
      return;
    else if (t1.$lt(newLength, 0))
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    var t1 = this._childNodes;
    t1.add$1(t1, value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes; t1.moveNext$0() === true;)
      t2.add$1(t2, t1.get$current());
  },
  sort$1: function(_, compare) {
    throw $.wrapException($.UnsupportedError$("TODO(jacobr): should we impl?"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException($.UnimplementedError$(null));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  removeRange$2: function(_, start, end) {
    $.JSArray_methods.forEach$1($.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_anon());
  },
  clear$0: function(_) {
    var t1 = this._childNodes;
    t1.clear$0(t1);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  map$1: function(_, f) {
    return $.JSArray_methods.map$1(this.get$_filtered(), f);
  },
  where$1: function(_, f) {
    return $.JSArray_methods.where$1(this.get$_filtered(), f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.Element);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    return $.JSArray_methods.firstWhere$2$orElse(this.get$_filtered(), test, orElse);
  },
  elementAt$1: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$isEmpty: function(_) {
    return $.JSArray_methods.get$isEmpty(this.get$_filtered());
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.get$_filtered());
  },
  sublist$2: function(_, start, end) {
    return $.JSArray_methods.sublist$2(this.get$_filtered(), start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(_, element, start) {
    return $.JSArray_methods.indexOf$2(this.get$_filtered(), element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  skip$1: function(_, n) {
    return this.get$IterableMixinWorkaround().skipList$2(this, n);
  },
  get$last: function(_) {
    return $.JSArray_methods.get$last(this.get$_filtered());
  },
  $asListBase: function () { return [$.Element]; },
  $asList: function() {
    return function () { return [$.Element]; };
  },
  $asIterable: function() {
    return function () { return [$.Element]; };
  }
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && $.getInterceptor(n).$isElement();
  },
  $isFunction: true
};

$$.FilteredElementList_removeRange_anon = {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  },
  $isFunction: true
};

$$.Attachable = {"": "Object;"};

$$.AttachableObject = {"": "DisposableImpl;",
  _fireEvent$2: function(attachable, args) {
    var t1, handle;
    if (this._disposed)
      $.throwExpression($.DisposedError_SMD);
    t1 = this._eventHandlers;
    handle = t1.$index(t1, attachable);
    if (handle != null)
      $.add$1$ax(handle, args);
  },
  _liblib3$_set$2: function(key, value) {
    var t1;
    if (this._disposed)
      $.throwExpression($.DisposedError_SMD);
    t1 = this._propertyValues;
    t1.$indexSet(t1, key, value);
    this._fireChange$3(key, value, false);
  },
  _remove$1: function(key) {
    var t1 = this._disposed;
    if (t1)
      $.throwExpression($.DisposedError_SMD);
    if (t1)
      $.throwExpression($.DisposedError_SMD);
    t1 = this._propertyValues;
    if (t1.containsKey$1(key) === true) {
      t1.remove$1(t1, key);
      this._fireChange$3(key, null, true);
    }
  },
  _getValueOrUndefined$3: function(key, obj, ifAbsent) {
    var t1, t2, value;
    t1 = this._disposed;
    if (t1)
      $.throwExpression($.DisposedError_SMD);
    if (t1)
      $.throwExpression($.DisposedError_SMD);
    t2 = this._propertyValues;
    if (t2.containsKey$1(key) === true)
      return t2.$index(t2, key);
    else if (ifAbsent != null) {
      value = ifAbsent.call$1(obj);
      if (t1)
        $.throwExpression($.DisposedError_SMD);
      t2.$indexSet(t2, key, value);
      this._fireChange$3(key, value, false);
      return value;
    } else
      return $.C__UndefinedValue;
  },
  _fireChange$3: function(key, value, isClear) {
    var t1, handle;
    if (this._disposed)
      $.throwExpression($.DisposedError_SMD);
    t1 = this._eventHandlers;
    handle = t1.$index(t1, key);
    t1 = $.getInterceptor(handle);
    if (handle != null)
      if (isClear)
        t1.add$1(handle, $.PropertyChangedEventArgs$valueCleared(key, null));
      else
        t1.add$1(handle, $.PropertyChangedEventArgs$(key, value, null));
  }
};

$$.AttachedEvent = {"": "Attachable;name",
  fireEvent$2: function(obj, args) {
    return obj._fireEvent$2(this, args);
  },
  $asAttachable: null
};

$$.Property = {"": "Attachable;defaultValue,name",
  get$2: function(obj, ifAbsent) {
    var coreValue = obj._getValueOrUndefined$3(this, obj, ifAbsent);
    if (coreValue !== $.C__UndefinedValue)
      return coreValue;
    else
      return this.defaultValue;
  },
  get$1: function(obj) {
    return this.get$2(obj, null);
  },
  set$2: function(obj, value) {
    obj._liblib3$_set$2(this, value);
  },
  clear$1: function(_, obj) {
    return obj._remove$1(this);
  },
  toString$0: function(_) {
    return "Property '" + this.name + "'";
  },
  $asAttachable: null
};

$$._UndefinedValue = {"": "Object;"};

$$.PropertyChangedEventArgs = {"": "EventArgs;property,newValue,cleared", $asEventArgs: null};

$$.DisposedError = {"": "Object;message>"};

$$.DisposableImpl = {"": "Object;"};

$$.EventArgs = {"": "Object;"};

$$.EventHandle = {"": "StreamController;_disposed,_broadcastCache,stream",
  get$stream: function(_) {
    if (this._broadcastCache == null)
      this._broadcastCache = this.stream.asBroadcastStream$0();
    return this._broadcastCache;
  },
  $asStreamController: null
};

$$.DetailedArgumentError = {"": "Object;argument,details",
  get$message: function(_) {
    return "Illegal argument: \"" + this.argument + "\" -- " + $.S(this.details);
  },
  toString$0: function(_) {
    return this.get$message(this);
  },
  DetailedArgumentError$2: function(argument, details) {
    var t1;
    if (this.argument.length === 0)
      throw $.wrapException($.InvalidOperationError$("That's just sad. Give me a valid argument"));
    t1 = this.details;
    if (t1 == null || $.get$length$asx(t1) === 0)
      throw $.wrapException($.InvalidOperationError$("That's just sad. I need details!"));
  },
  $isArgumentError: true
};

$$.InvalidOperationError = {"": "Object;message>", $isException: true};

$$.NullArgumentError = {"": "DetailedArgumentError;argument,details"};

$$.AffineTransform = {"": "Object;_scX<,_shY<,_shX<,_scY<,_tX<,_tY<",
  get$scaleX: function() {
    return this._scX;
  },
  get$scaleY: function() {
    return this._scY;
  },
  get$translateX: function() {
    return this._tX;
  },
  get$translateY: function() {
    return this._tY;
  },
  get$shearX: function() {
    return this._shX;
  },
  get$shearY: function() {
    return this._shY;
  },
  get$determinant: function() {
    return $.$sub$n($.$mul$n(this._scX, this._scY), $.$mul$n(this._shX, this._shY));
  },
  concatenate$1: function(tx) {
    var m0, m1, t1, t2, t3;
    m0 = this._scX;
    m1 = this._shX;
    this._scX = $.$add$ns($.$mul$n(tx.get$_scX(), m0), $.$mul$n(tx.get$_shY(), m1));
    this._shX = $.$add$ns($.$mul$n(tx.get$_shX(), m0), $.$mul$n(tx.get$_scY(), m1));
    t1 = this._tX;
    t2 = tx.get$_tX();
    if (typeof m0 !== "number")
      throw $.iae(m0);
    t3 = tx.get$_tY();
    if (typeof m1 !== "number")
      throw $.iae(m1);
    this._tX = t1 + (t2 * m0 + t3 * m1);
    m0 = this._shY;
    m1 = this._scY;
    this._shY = $.$add$ns($.$mul$n(tx.get$_scX(), m0), $.$mul$n(tx.get$_shY(), m1));
    this._scY = $.$add$ns($.$mul$n(tx.get$_shX(), m0), $.$mul$n(tx.get$_scY(), m1));
    t3 = this._tY;
    t2 = tx.get$_tX();
    if (typeof m0 !== "number")
      throw $.iae(m0);
    t1 = tx.get$_tY();
    if (typeof m1 !== "number")
      throw $.iae(m1);
    this._tY = t3 + (t2 * m0 + t1 * m1);
    return this;
  },
  get$concatenate: function() {
    return new $.BoundClosure$1(this, "concatenate$1");
  },
  transformCoordinate$1: function(point) {
    var t1, t2, t3, t4, t5;
    t1 = point.x;
    t2 = $.getInterceptor$n(t1);
    t3 = t2.$mul(t1, this._scX);
    t4 = point.y;
    t5 = $.getInterceptor$n(t4);
    return $.Coordinate$($.$add$ns($.$add$ns(t3, t5.$mul(t4, this._shX)), this._tX), $.$add$ns($.$add$ns(t2.$mul(t1, this._shY), t5.$mul(t4, this._scY)), this._tY));
  },
  createInverse$0: function() {
    var det, t1, t2;
    det = this.get$determinant();
    t1 = $.$div$n(this._scY, det);
    t2 = $.$negate$n(this._shY);
    if (typeof det !== "number")
      throw $.iae(det);
    return $.AffineTransform$(t1, t2 / det, $.$negate$n(this._shX) / det, $.$div$n(this._scX, det), $.$div$n($.$sub$n($.$mul$n(this._shX, this._tY), $.$mul$n(this._scY, this._tX)), det), $.$div$n($.$sub$n($.$mul$n(this._shY, this._tX), $.$mul$n(this._scX, this._tY)), det));
  },
  $eq: function(_, other) {
    var t1 = other == null;
    if (t1)
      return false;
    return !t1 && $.$eq(this._scX, other.get$_scX()) === true && $.$eq(this._shX, other.get$_shX()) === true && this._tX === other.get$_tX() && $.$eq(this._shY, other.get$_shY()) === true && $.$eq(this._scY, other.get$_scY()) === true && this._tY === other.get$_tY();
  },
  toString$0: function(_) {
    return $.JSArray_methods.join$1([this.get$scaleX(), this.get$shearY(), this.get$shearX(), this.get$scaleY(), this.get$translateX(), this.get$translateY()], ", ");
  }
};

$$.Box = {"": "Object;left>,top>,width>,height>",
  get$topLeft: function(_) {
    return $.Coordinate$(this.left, this.top);
  },
  get$size: function(_) {
    return $.Size$(this.width, this.height);
  },
  contains$1: function(_, point) {
    var t1, t2, t3, t4;
    t1 = point.x;
    t2 = this.left;
    t3 = $.getInterceptor$n(t1);
    if (t3.$ge(t1, t2)) {
      t4 = this.width;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (t3.$le(t1, t2 + t4)) {
        t1 = point.y;
        t2 = this.top;
        t3 = $.getInterceptor$n(t1);
        if (t3.$ge(t1, t2)) {
          t4 = this.height;
          if (typeof t4 !== "number")
            throw $.iae(t4);
          t4 = t3.$le(t1, t2 + t4);
          t1 = t4;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  $eq: function(_, other) {
    var t1, t2;
    t1 = other == null;
    if (t1)
      return false;
    t2 = $.getInterceptor(other);
    return !t1 && $.$eq(t2.get$left(other), this.left) === true && $.$eq(t2.get$top(other), this.top) === true && $.$eq(t2.get$width(other), this.width) === true && $.$eq(t2.get$height(other), this.height) === true;
  },
  toString$0: function(_) {
    return "Location: " + $.S(this.get$topLeft(this)) + ", Size: " + $.S(this.get$size(this));
  },
  get$hashCode: function(_) {
    return $.Util_getHashCode([this.left, this.top, this.width, this.height]);
  }
};

$$.Coordinate = {"": "Object;x>,y>",
  get$isValid: function() {
    return $.isValidNumber(this.x) && $.isValidNumber(this.y);
  },
  $sub: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Vector$($.$sub$n(this.x, t1.get$x(other)), $.$sub$n(this.y, t1.get$y(other)));
  },
  $add: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Coordinate$($.$add$ns(this.x, t1.get$x(other)), $.$add$ns(this.y, t1.get$y(other)));
  },
  $eq: function(_, other) {
    var t1, t2;
    t1 = other == null;
    if (t1)
      return false;
    t2 = $.getInterceptor(other);
    return !t1 && $.$eq(this.x, t2.get$x(other)) === true && $.$eq(this.y, t2.get$y(other)) === true;
  },
  toString$0: function(_) {
    return "{x:" + $.S(this.x) + ", y:" + $.S(this.y) + "}";
  }
};

$$.Size = {"": "Object;width>,height>",
  $eq: function(_, other) {
    var t1, t2;
    t1 = other == null;
    if (t1)
      return false;
    t2 = $.getInterceptor(other);
    return !t1 && $.$eq(this.width, t2.get$width(other)) === true && $.$eq(this.height, t2.get$height(other)) === true;
  },
  get$area: function() {
    return $.$mul$n(this.width, this.height);
  },
  isEmpty$0: function(_) {
    return $.$eq(this.get$area(), 0);
  },
  get$isEmpty: function(receiver) {
    return new $.BoundClosure$i0(this, "isEmpty$0", receiver);
  },
  $mul: function(_, magnitude) {
    return $.Size$($.$mul$n(this.width, magnitude), $.$mul$n(this.height, magnitude));
  },
  toString$0: function(_) {
    return "(" + $.S(this.width) + " x " + $.S(this.height) + ")";
  }
};

$$.Vector = {"": "Coordinate;x,y",
  get$length: function(_) {
    var t1, t2;
    t1 = this.x;
    t2 = this.y;
    return $.sqrt($.$add$ns($.$mul$n(t1, t1), $.$mul$n(t2, t2)));
  },
  $add: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Vector$($.$add$ns(this.x, t1.get$x(other)), $.$add$ns(this.y, t1.get$y(other)));
  },
  $mul: function(_, magnitude) {
    return $.Vector$($.$mul$n(this.x, magnitude), $.$mul$n(this.y, magnitude));
  }
};

$$._RetainedEnum = {"": "Object;",
  toString$0: function(_) {
    return this.name;
  }
};

$$.CanvasThing = {"": "PanelThing;_children,background,_transforms,_invalidatedEventHandle,_cacheCanvas,_width,_height,_alpha,_cacheEnabled,_lastDrawTime,_parent,_propertyValues,_eventHandlers,_disposed"};

$$.Mouse_markMouseOver_anon = {"": "Closure;",
  call$1: function(e) {
    $.clear$1$ax($.get$Mouse_isMouseOverProperty(), e);
    $.clear$1$ax($.get$Mouse_isMouseDirectlyOverProperty(), e);
  },
  $isFunction: true
};

$$.Mouse_markMouseOver_anon0 = {"": "Closure;",
  call$1: function(e) {
    $.get$Mouse_isMouseOverProperty().set$2(e, true);
  },
  $isFunction: true
};

$$.MouseManager = {"": "Object;_stage,_mouseDownThing,_draggingThing,_dragCoordinate",
  get$_isDragging: function() {
    return this._dragCoordinate != null;
  },
  _mouseMove$1: function(e) {
    var t1, t2, t3, items, cursor, args;
    t1 = $.get$offset$x(e);
    t2 = $.getInterceptor$x(t1);
    t3 = this._stage;
    items = $.Mouse_markMouseOver(t3, $.Coordinate$(t2.get$x(t1), t2.get$y(t1)));
    t1 = this._draggingThing;
    cursor = t1 != null ? $.get$MouseManager_cursorProperty().get$1(t1) : null;
    t1 = $.getInterceptor$asx(items);
    if ($.$gt$n(t1.get$length(items), 0)) {
      args = $.ThingMouseEventArgs$(t1.$index(items, 0), e);
      for (t1 = t1.get$iterator(items); t1.moveNext$0() === true;) {
        t2 = t1.get$current();
        $.get$MouseManager__mouseMoveEvent().fireEvent$2(t2, args);
        if (cursor == null)
          cursor = $.get$MouseManager_cursorProperty().get$1(t2);
      }
    }
    $.get$MouseManager_cursorProperty().set$2(t3, cursor);
  },
  get$_mouseMove: function() {
    return new $.BoundClosure$1(this, "_mouseMove$1");
  },
  _mouseOut$1: function(e) {
    var t1 = this._stage;
    $.Mouse_markMouseOver(t1, null);
    $.get$MouseManager__mouseOutEvent().fireEvent$2(t1, $.C_EventArgs);
    $.get$MouseManager_cursorProperty().set$2(t1, null);
  },
  get$_mouseOut: function() {
    return new $.BoundClosure$1(this, "_mouseOut$1");
  },
  _mouseUp$1: function(e) {
    var t1, t2, thing, args;
    t1 = $.get$offset$x(e);
    t2 = $.getInterceptor$x(t1);
    thing = $.firstWhere$2$orElse$ax($.Mouse_markMouseOver(this._stage, $.Coordinate$(t2.get$x(t1), t2.get$y(t1))), new $.MouseManager__mouseUp_anon(), new $.MouseManager__mouseUp_anon0());
    if (thing != null) {
      args = $.ThingMouseEventArgs$(thing, e);
      $.get$MouseManager__mouseUpEvent().fireEvent$2(thing, args);
      if ($.$eq(thing, this._mouseDownThing) === true) {
        args = $.ThingMouseEventArgs$(thing, e);
        $.get$MouseManager__clickEvent().fireEvent$2(thing, args);
      }
      this._mouseDownThing = null;
    }
  },
  get$_mouseUp: function() {
    return new $.BoundClosure$1(this, "_mouseUp$1");
  },
  _mouseDown$1: function(e) {
    var t1, t2, args;
    t1 = $.get$offset$x(e);
    t2 = $.getInterceptor$x(t1);
    for (t1 = $.get$iterator$ax($.Mouse_markMouseOver(this._stage, $.Coordinate$(t2.get$x(t1), t2.get$y(t1)))); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if ($.get$MouseManager__isDraggableProperty().get$1(t2) === true) {
        this._draggingThing = t2;
        this._startDrag$2(this._draggingThing, e);
        break;
      } else if ($.get$MouseManager__isClickableProperty().get$1(t2) === true) {
        this._mouseDownThing = t2;
        t1 = this._mouseDownThing;
        args = $.ThingMouseEventArgs$(t1, e);
        $.get$MouseManager__mouseDownEvent().fireEvent$2(t1, args);
        break;
      }
    }
  },
  get$_mouseDown: function() {
    return new $.BoundClosure$1(this, "_mouseDown$1");
  },
  _startDrag$2: function(thing, e) {
    var args, t1, t2;
    args = $.ThingDragStartingEventArgs$(thing, e);
    $.get$MouseManager__dragStartingEvent().fireEvent$2(thing, args);
    if (!args.get$isCanceled()) {
      t1 = $.getInterceptor$x(e);
      t1.preventDefault$0(e);
      t1 = t1.get$client(e);
      t2 = $.getInterceptor$x(t1);
      this._dragCoordinate = $.Coordinate$(t2.get$x(t1), t2.get$y(t1));
    }
  },
  _windowMouseMove$1: function(e) {
    var t1, t2, newLoc, delta, args;
    if (this.get$_isDragging()) {
      t1 = $.get$client$x(e);
      t2 = $.getInterceptor$x(t1);
      newLoc = $.Coordinate$(t2.get$x(t1), t2.get$y(t1));
      delta = newLoc.$sub(newLoc, this._dragCoordinate);
      args = $.ThingDragEventArgs$(this._draggingThing, e, delta);
      $.get$MouseManager__dragEvent().fireEvent$2(this._draggingThing, args);
      this._dragCoordinate = newLoc;
    }
  },
  get$_windowMouseMove: function() {
    return new $.BoundClosure$1(this, "_windowMouseMove$1");
  },
  _windowMouseUp$1: function(e) {
    if (this.get$_isDragging()) {
      this._dragCoordinate = null;
      this._draggingThing = null;
    }
  },
  get$_windowMouseUp: function() {
    return new $.BoundClosure$1(this, "_windowMouseUp$1");
  },
  _windowBlur$1: function(e) {
    if (this.get$_isDragging()) {
      this._dragCoordinate = null;
      this._draggingThing = null;
    }
  },
  get$_windowBlur: function() {
    return new $.BoundClosure$1(this, "_windowBlur$1");
  },
  MouseManager$_internal$1: function(_stage) {
    var t1 = this._stage;
    $.get$onMouseMove$x(t1.get$_canvas()).listen$1(this.get$_mouseMove());
    $.get$onMouseOut$x(t1.get$_canvas()).listen$1(this.get$_mouseOut());
    $.get$onMouseUp$x(t1.get$_canvas()).listen$1(this.get$_mouseUp());
    $.get$onMouseDown$x(t1.get$_canvas()).listen$1(this.get$_mouseDown());
    $.get$onMouseMove$x($.window()).listen$1(this.get$_windowMouseMove());
    $.get$onMouseUp$x($.window()).listen$1(this.get$_windowMouseUp());
    $.get$onBlur$x($.window()).listen$1(this.get$_windowBlur());
  }
};

$$.MouseManager_MouseManager_anon = {"": "Closure;",
  call$1: function(s) {
    return $.MouseManager$_internal(s);
  },
  $isFunction: true
};

$$.MouseManager__mouseUp_anon = {"": "Closure;",
  call$1: function(e) {
    return $.get$MouseManager__isClickableProperty().get$1(e);
  },
  $isFunction: true
};

$$.MouseManager__mouseUp_anon0 = {"": "Closure;",
  call$0: function() {
    return;
  },
  $isFunction: true
};

$$.ThingDragStartingEventArgs = {"": "ThingMouseEventArgs;_liblib5$_canceled,thing,sourceEvent",
  get$isCanceled: function() {
    return this._liblib5$_canceled;
  }
};

$$.ThingDragEventArgs = {"": "ThingMouseEventArgs;delta,thing,sourceEvent"};

$$.PanelThing = {"": "ParentThing;",
  add$1: function(_, thing) {
    this.insertAt$2(thing, this._children.length);
  },
  insertAt$2: function(thing, index) {
    var message, t1, t2;
    if (false)
      $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
    if (thing == null)
      $.throwExpression($.NullArgumentError$("thing"));
    if (false)
      $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
    if ($.get$parent$x(thing) != null) {
      message = $.JSString_methods.get$isEmpty("already has a parent") ? "value was invalid" : "already has a parent";
      $.throwExpression($.DetailedArgumentError$("thing", message));
    }
    t1 = this._children;
    t2 = $.JSArray_methods.contains$1(t1, thing);
    if (false)
      $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
    if (t2) {
      message = $.JSString_methods.get$isEmpty("Cannot add twice") ? "value was invalid" : "Cannot add twice";
      $.throwExpression($.DetailedArgumentError$("thing", message));
    }
    thing.registerParent$1(this);
    $.JSArray_methods.insert$2(t1, index, thing);
    $.get$PanelThing__containerTransformProperty().set$2(thing, thing.addTransform$0());
    if (this._disposed)
      $.throwExpression($.DisposedError_SMD);
    if (this._lastDrawTime != null) {
      this._lastDrawTime = null;
      t1 = this._invalidatedEventHandle;
      t1.add$1(t1, $.C_EventArgs);
      this._parent.childInvalidated$1(this);
    }
  },
  remove$1: function(_, thing) {
    var t1, index, item;
    if (false)
      $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
    if (thing == null)
      $.throwExpression($.NullArgumentError$("thing"));
    t1 = this._children;
    index = $.JSArray_methods.indexOf$1(t1, thing);
    if ($.$lt$n(index, 0))
      return false;
    else {
      item = $.JSArray_methods.removeAt$1(t1, index);
      item.unregisterParent$1(this);
      item.removeTransform$1($.get$PanelThing__containerTransformProperty().get$1(item));
      $.clear$1$ax($.get$PanelThing__containerTransformProperty(), item);
      return true;
    }
  },
  get$visualChildCount: function() {
    return this._children.length;
  }
};

$$.ParentThing = {"": "Thing;",
  childInvalidated$1: function(child) {
    var t1;
    if (this._disposed)
      $.throwExpression($.DisposedError_SMD);
    if (this._lastDrawTime != null) {
      this._lastDrawTime = null;
      t1 = this._invalidatedEventHandle;
      t1.add$1(t1, $.C_EventArgs);
      this._parent.childInvalidated$1(this);
    }
  }
};

$$.ShapeThing = {"": "Thing;_fillStyle,shapeType,_transforms,_invalidatedEventHandle,_cacheCanvas,_width,_height,_alpha,_cacheEnabled,_lastDrawTime,_parent,_propertyValues,_eventHandlers,_disposed",
  toString$0: function(_) {
    return "Shape [" + this._fillStyle + ", " + this.shapeType.name + "]";
  }
};

$$.ShapeType = {"": "_RetainedEnum;name"};

$$.Stage = {"": "AttachableObject;_invalidatedEventHandle,_canvas<,rootThing<,_ctx,_propertyValues,_eventHandlers,_disposed",
  childInvalidated$1: function(child) {
    var t1;
    if (this._disposed)
      $.throwExpression($.DisposedError_SMD);
    t1 = this._invalidatedEventHandle;
    t1.add$1(t1, $.C_EventArgs);
  },
  Stage$2: function(_canvas, rootThing) {
    this.rootThing.registerParent$1(this);
  }
};

$$.Thing = {"": "AttachableObject;",
  get$width: function(_) {
    return this._width;
  },
  get$height: function(_) {
    return this._height;
  },
  get$parent: function(_) {
    return this._parent;
  },
  getTransform$0: function() {
    var tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
    $.JSArray_methods.forEach$1(this._transforms, tx.get$concatenate());
    return tx;
  },
  addTransform$0: function() {
    if (this._disposed)
      $.throwExpression($.DisposedError_SMD);
    var tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
    this._transforms.push(tx);
    return tx;
  },
  removeTransform$1: function(tx) {
    var t1, index;
    if (false)
      $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
    if (tx == null)
      $.throwExpression($.NullArgumentError$("tx"));
    t1 = this._transforms;
    index = $.JSArray_methods.indexOf$1(t1, tx);
    if ($.$lt$n(index, 0))
      return false;
    else {
      $.JSArray_methods.removeAt$1(t1, index);
      return true;
    }
  },
  registerParent$1: function($parent) {
    if (this._parent != null)
      $.throwExpression($._ExceptionImplementation$("parent already set"));
    if (false)
      $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
    if ($parent == null)
      $.throwExpression($.NullArgumentError$("parent"));
    this._parent = $parent;
  },
  unregisterParent$1: function($parent) {
    var t1, message;
    if (false)
      $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
    if ($parent == null)
      $.throwExpression($.NullArgumentError$("parent"));
    t1 = this._parent;
    if (false)
      $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
    if ($parent == null ? t1 != null : $parent !== t1) {
      message = true ? "value was invalid" : null;
      $.throwExpression($.DetailedArgumentError$("parent", message));
    }
    this._parent = null;
  }
};

$$.ThingMouseEventArgs = {"": "EventArgs;thing,sourceEvent",
  ThingMouseEventArgs$2: function(thing, sourceEvent) {
  }
};

$$.HtmlEnhancedConfiguration = {"": "Configuration;_isLayoutTest,_onErrorSubscription,_onMessageSubscription,_liblib1$_receivePort,name,autoStart",
  _installOnErrorHandler$0: function() {
    if (this._onErrorSubscription == null)
      this._onErrorSubscription = $.get$onError$x(window).listen$1(new $.HtmlEnhancedConfiguration__installOnErrorHandler_anon(this));
  },
  _installOnMessageHandler$0: function() {
    if (this._onMessageSubscription == null)
      this._onMessageSubscription = $.get$onMessage$x(window).listen$1(new $.HtmlEnhancedConfiguration__installOnMessageHandler_anon(this));
  },
  onInit$0: function() {
    var cssElement, t1;
    this._installOnErrorHandler$0();
    this._installOnMessageHandler$0();
    cssElement = $.get$head$x(document).querySelector("#_unittestcss_");
    if (cssElement == null) {
      t1 = $.get$children$x($.get$head$x(document));
      t1.add$1(t1, $._ElementFactoryProvider_createElement_html("<style id=\"_unittestcss_\"></style>"));
      cssElement = $.get$head$x(document).querySelector("#_unittestcss_");
    }
    $.set$innerHtml$x(cssElement, this.get$_htmlTestCSS());
    $.postMessage$2$x(window, "unittest-suite-wait-for-done", "*");
  },
  onStart$0: function() {
    this._installOnErrorHandler$0();
  },
  onSummary$5: function(passed, failed, errors, results, uncaughtError) {
    this._showInteractiveResultsInPage$6(passed, failed, errors, results, this._isLayoutTest, uncaughtError);
  },
  onDone$1: function(success) {
    var t1 = this._onErrorSubscription;
    if (t1 != null) {
      t1.cancel$0();
      this._onErrorSubscription = null;
    }
    t1 = this._onMessageSubscription;
    if (t1 != null) {
      t1.cancel$0();
      this._onMessageSubscription = null;
    }
    $.postMessage$2$x(window, "unittest-suite-done", "*");
  },
  _showInteractiveResultsInPage$6: function(passed, failed, errors, results, isLayoutTest, uncaughtError) {
    var t1, te, t2, t3, t4, t5, t6, groupedBy, t7, flattened, nonAlphanumeric, groupPassFail, safeGroup, testsInGroup, groupTotalTestCount, groupTestPassedCount, passFailClass, grp;
    t1 = {};
    if (isLayoutTest && passed === $.get$length$asx(results))
      document.body.innerHTML = "PASS";
    else {
      te = $._ElementFactoryProvider_createElement_html("<div class=\"unittest-table\"></div>");
      t2 = $.getInterceptor$x(te);
      t3 = t2.get$children(te);
      t4 = $.getInterceptor$asx(results);
      $.add$1$ax(t3, $._ElementFactoryProvider_createElement_html(passed === t4.get$length(results) ? "<div class='unittest-overall unittest-pass'>PASS</div>" : "<div class='unittest-overall unittest-fail'>FAIL</div>"));
      if (passed === t4.get$length(results) && uncaughtError == null)
        $.add$1$ax(t2.get$children(te), $._ElementFactoryProvider_createElement_html("          <div class='unittest-pass'>All " + passed + " tests passed</div>"));
      else {
        t3 = uncaughtError == null;
        if (!t3)
          $.add$1$ax(t2.get$children(te), $._ElementFactoryProvider_createElement_html("            <div class='unittest-summary'>\n              <span class='unittest-error'>Uncaught error: " + $.S(uncaughtError) + "</span>\n            </div>"));
        t5 = t2.get$children(te);
        t6 = "          <div class='unittest-summary'>\n            <span class='unittest-pass'>Total " + passed + " passed</span>,\n            <span class='unittest-fail'>" + failed + " failed</span>,\n            <span class='unittest-error'>\n            ";
        $.add$1$ax(t5, $._ElementFactoryProvider_createElement_html(t6 + (errors + (t3 ? 0 : 1)) + " errors</span>\n          </div>"));
      }
      $.add$1$ax(t2.get$children(te), $._ElementFactoryProvider_createElement_html("        <div><button id='btnCollapseAll'>Collapse All</button></div>\n       "));
      $.get$onClick$x(t2.query$1(te, "#btnCollapseAll")).listen$1(new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon());
      t1.previousGroup_0 = "";
      groupedBy = $.LinkedHashMap$($.String, [$.List, $.TestCase]);
      for (t3 = t4.get$iterator(results); t3.moveNext$0() === true;) {
        t5 = t3.get$current();
        if (groupedBy.containsKey$1(t5.get$currentGroup()) !== true) {
          t6 = t5.get$currentGroup();
          t7 = $.List_List($, $.TestCase);
          $.setRuntimeTypeInfo(t7, [$.TestCase]);
          groupedBy.$indexSet(groupedBy, t6, t7);
        }
        $.add$1$ax(groupedBy.$index(groupedBy, t5.get$currentGroup()), t5);
      }
      flattened = $.List_List($, $.TestCase);
      $.setRuntimeTypeInfo(flattened, [$.TestCase]);
      t3 = groupedBy.get$values(groupedBy);
      t3.forEach$1(t3, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon0(flattened));
      nonAlphanumeric = $.JSSyntaxRegExp$("[^a-z0-9A-Z]", true, false);
      for (t3 = $.JSArray_methods.get$iterator(flattened), groupPassFail = true; t3.moveNext$0();) {
        t5 = t3.get$current();
        safeGroup = $.replaceAll$2$s(t5.get$currentGroup(), nonAlphanumeric, "_");
        if ($.$eq(t5.get$currentGroup(), t1.previousGroup_0) !== true) {
          t1.previousGroup_0 = t5.get$currentGroup();
          testsInGroup = $.toList$0$ax(t4.where$1(results, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon1(t1)));
          t6 = $.getInterceptor$asx(testsInGroup);
          groupTotalTestCount = t6.get$length(testsInGroup);
          groupTestPassedCount = $.get$length$asx(t6.where$1(testsInGroup, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon2()));
          groupPassFail = $.$eq(groupTotalTestCount, groupTestPassedCount);
          passFailClass = "unittest-group-status unittest-group-status-" + (groupPassFail === true ? "pass" : "fail");
          t6 = t2.get$children(te);
          t7 = "            <div>\n              <div id='" + safeGroup + "'\n                   class='unittest-group " + safeGroup + " test" + safeGroup + "'>\n                <div ";
          t7 = t7 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") === true ? "style='display:inline-block' " : "") + "\n                     class='unittest-row-status'>\n                  <div class='" + passFailClass + "'></div>\n                </div>\n                <div ";
          t7 = t7 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") === true ? "style='display:inline-block' " : "") + ">\n                    " + $.S(t5.get$currentGroup()) + "</div>\n                &nbsp;\n                <div ";
          $.add$1$ax(t6, $._ElementFactoryProvider_createElement_html(t7 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") === true ? "style='display:inline-block' " : "") + ">\n                    (" + $.S(groupTestPassedCount) + "/" + $.S(groupTotalTestCount) + ")</div>\n              </div>\n            </div>"));
          grp = safeGroup === "" ? null : t2.query$1(te, "#" + safeGroup);
          if (grp != null)
            $.get$onClick$x(grp).listen$1(new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon3(safeGroup));
        }
        this._buildRow$4(t5, te, safeGroup, groupPassFail !== true);
      }
      t1 = $.get$children$x(document.body);
      t1.clear$0(t1);
      t1 = $.get$children$x(document.body);
      t1.add$1(t1, te);
    }
  },
  _buildRow$4: function(test_, te, groupID, isVisible) {
    var t1, t2, background, display, t3;
    t1 = $.getInterceptor$x(test_);
    t2 = t1.get$id(test_);
    if (typeof t2 !== "number")
      return this._buildRow$4$bailout(1, test_, te, groupID, isVisible, t2, t1);
    background = "unittest-row-" + ($.JSNumber_methods.$mod(t2, 2) === 0 ? "even" : "odd");
    display = isVisible ? "unittest-row" : "unittest-row-hidden";
    t2 = new $.HtmlEnhancedConfiguration__buildRow__htmlEscape();
    t3 = new $.HtmlEnhancedConfiguration__buildRow_addRowElement(test_, te, groupID, background, display);
    if (!test_.get$isComplete()) {
      t3.call$3($.S(t1.get$id(test_)), "NO STATUS", "Test did not complete.");
      return;
    }
    t3.call$3($.S(t1.get$id(test_)), $.toUpperCase$0$s(t1.get$result(test_)), test_.get$description() + ". " + $.S(t2.call$1(t1.get$message(test_))));
    if (test_.get$stackTrace() != null)
      t3.call$3("", "", "<pre>" + $.S(t2.call$1(test_.get$stackTrace())) + "</pre>");
  },
  _buildRow$4$bailout: function(state0, test_, te, groupID, isVisible, t2, t1) {
    var background, display, t3;
    background = "unittest-row-" + ($.$mod$n(t2, 2) === 0 ? "even" : "odd");
    display = isVisible ? "unittest-row" : "unittest-row-hidden";
    t2 = new $.HtmlEnhancedConfiguration__buildRow__htmlEscape();
    t3 = new $.HtmlEnhancedConfiguration__buildRow_addRowElement(test_, te, groupID, background, display);
    if (!test_.get$isComplete()) {
      t3.call$3($.S(t1.get$id(test_)), "NO STATUS", "Test did not complete.");
      return;
    }
    t3.call$3($.S(t1.get$id(test_)), $.toUpperCase$0$s(t1.get$result(test_)), test_.get$description() + ". " + $.S(t2.call$1(t1.get$message(test_))));
    if (test_.get$stackTrace() != null)
      t3.call$3("", "", "<pre>" + $.S(t2.call$1(test_.get$stackTrace())) + "</pre>");
  },
  get$_htmlTestCSS: function() {
    var t1 = "  body{\n    font-size: 14px;\n    font-family: 'Open Sans', 'Lucida Sans Unicode', 'Lucida Grande', sans-serif;\n    background: WhiteSmoke;\n  }\n\n  .unittest-group\n  {\n    background: rgb(75,75,75);\n    width:98%;\n    color: WhiteSmoke;\n    font-weight: bold;\n    padding: 6px;\n    cursor: pointer;\n\n    /* Provide some visual separation between groups for IE */\n    " + ($.HtmlEnhancedConfiguration__isIE() === true ? "border-bottom:solid black 1px;" : "") + "\n    ";
    return t1 + ($.HtmlEnhancedConfiguration__isIE() === true ? "border-top:solid #777777 1px;" : "") + "\n\n    background-image: -webkit-linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n    background-image: -moz-linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n    background-image: -ms-linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n    background-image: linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-box;\n    display: box;\n\n    -webkit-box-orient: horizontal;\n    -moz-box-orient: horizontal;\n    -ms-box-orient: horizontal;\n    box-orient: horizontal;\n\n    -webkit-box-align: center;\n    -moz-box-align: center;\n    -ms-box-align: center;\n    box-align: center;\n   }\n\n  .unittest-group-status\n  {\n    width: 20px;\n    height: 20px;\n    border-radius: 20px;\n    margin-left: 10px;\n  }\n\n  .unittest-group-status-pass{\n    background: Green;\n    background: -webkit-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: -moz-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: -ms-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n  }\n\n  .unittest-group-status-fail{\n    background: Red;\n    background: -webkit-radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n    background: -moz-radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n    background: -ms-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n  }\n\n  .unittest-overall{\n    font-size: 20px;\n  }\n\n  .unittest-summary{\n    font-size: 18px;\n  }\n\n  .unittest-pass{\n    color: Green;\n  }\n\n  .unittest-fail, .unittest-error\n  {\n    color: Red;\n  }\n\n  .unittest-row\n  {\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-box;\n    display: box;\n    -webkit-box-orient: horizontal;\n    -moz-box-orient: horizontal;\n    -ms-box-orient: horizontal;\n    box-orient: horizontal;\n    width: 100%;\n  }\n\n  .unittest-row-hidden\n  {\n    display: none;\n  }\n\n  .unittest-row-odd\n  {\n    background: WhiteSmoke;\n  }\n\n  .unittest-row-even\n  {\n    background: #E5E5E5;\n  }\n\n  .unittest-row-id\n  {\n    width: 3em;\n  }\n\n  .unittest-row-status\n  {\n    width: 4em;\n  }\n\n  .unittest-row-description\n  {\n  }\n\n  ";
  }
};

$$.HtmlEnhancedConfiguration__installOnErrorHandler_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return $._reportTestError("(DOM callback has errors)\nCaught " + $.S(e), "");
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__installOnMessageHandler_anon = {"": "Closure;this_0",
  call$1: function(e) {
    if ("unittest-suite-external-error" === $.get$data$x(e))
      $._reportTestError("(external error detected)\nCaught <unknown>", "");
    return;
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon = {"": "Closure;",
  call$1: function(_) {
    var t1 = $.queryAll$1$x(document, ".unittest-row");
    t1.forEach$1(t1, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon2());
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon2 = {"": "Closure;",
  call$1: function(el) {
    var t1, t2;
    t1 = $.getInterceptor$x(el);
    t2 = t1.get$attributes(el);
    t1 = t1.get$attributes(el);
    t1 = $.replaceAll$2$s(t1.$index(t1, "class"), "unittest-row ", "unittest-row-hidden ");
    t2.$indexSet(t2, "class", t1);
    return t1;
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon0 = {"": "Closure;flattened_1",
  call$1: function(tList) {
    $.sort$1$ax(tList, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon1());
    $.JSArray_methods.addAll$1(this.flattened_1, tList);
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon1 = {"": "Closure;",
  call$2: function(tcA, tcB) {
    return $.$sub$n($.get$id$x(tcA), $.get$id$x(tcB));
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon1 = {"": "Closure;box_0",
  call$1: function(t) {
    return $.$eq(t.get$currentGroup(), this.box_0.previousGroup_0);
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon2 = {"": "Closure;",
  call$1: function(t) {
    return $.$eq($.get$result$x(t), "pass");
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon3 = {"": "Closure;safeGroup_2",
  call$1: function(_) {
    var t1, t2;
    t1 = document;
    t2 = this.safeGroup_2;
    t1 = $.get$attributes$x(t1.querySelector(".unittest-row-" + t2));
    if ($.contains$1$asx(t1.$index(t1, "class"), "unittest-row ") === true) {
      t1 = $.queryAll$1$x(document, ".unittest-row-" + t2);
      t1.forEach$1(t1, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon());
    } else {
      t1 = $.queryAll$1$x(document, ".unittest-row-" + t2);
      t1.forEach$1(t1, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon0());
    }
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon = {"": "Closure;",
  call$1: function(e) {
    var t1, t2;
    t1 = $.getInterceptor$x(e);
    t2 = t1.get$attributes(e);
    t1 = t1.get$attributes(e);
    t1 = $.replaceAll$2$s(t1.$index(t1, "class"), "unittest-row ", "unittest-row-hidden ");
    t2.$indexSet(t2, "class", t1);
    return t1;
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon0 = {"": "Closure;",
  call$1: function(e) {
    var t1, t2;
    t1 = $.getInterceptor$x(e);
    t2 = t1.get$attributes(e);
    t1 = t1.get$attributes(e);
    t1 = $.replaceAll$2$s(t1.$index(t1, "class"), "unittest-row-hidden", "unittest-row");
    t2.$indexSet(t2, "class", t1);
    return t1;
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__buildRow__htmlEscape = {"": "Closure;",
  call$1: function(string) {
    return $.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.replaceAll$2$s(string, "&", "&amp;"), "<", "&lt;"), ">", "&gt;");
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__buildRow_addRowElement = {"": "Closure;test__0,te_1,groupID_2,background_3,display_4",
  call$3: function(id, $status, description) {
    var t1, t2;
    t1 = $.get$children$x(this.te_1);
    t2 = " <div>\n                <div class='" + this.display_4 + " unittest-row-" + this.groupID_2 + " " + this.background_3 + "'>\n                  <div ";
    t2 = t2 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") === true ? "style='display:inline-block' " : "") + "\n                       class='unittest-row-id'>" + $.S(id) + "</div>\n                  <div ";
    t2 = t2 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") === true ? "style='display:inline-block' " : "") + "\n                       class=\"unittest-row-status unittest-" + $.S($.get$result$x(this.test__0)) + "\">\n                       " + $.S($status) + "</div>\n                  <div ";
    $.add$1$ax(t1, $._ElementFactoryProvider_createElement_html(t2 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") === true ? "style='display:inline-block' " : "") + "\n                       class='unittest-row-description'>" + $.S(description) + "</div>\n                </div>\n              </div>"));
  },
  $isFunction: true
};

$$.MatchState = {"": "Object;state*"};

$$.BaseMatcher = {"": "Object;",
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    return mismatchDescription.add$1(mismatchDescription, "was ").addDescriptionOf$1(item);
  },
  $isMatcher: true
};

$$.Configuration = {"": "Object;_liblib1$_receivePort,name,autoStart<",
  onInit$0: function() {
    this._liblib1$_receivePort = $.ReceivePortImpl$();
    $.Primitives_printString("unittest-suite-wait-for-done");
  },
  onStart$0: function() {
  },
  onTestStart$1: function(testCase) {
  },
  onTestResult$1: function(testCase) {
  },
  onTestResultChanged$1: function(testCase) {
  },
  onSummary$5: function(passed, failed, errors, results, uncaughtError) {
    var t1, t2, t3;
    for (t1 = $.get$iterator$ax(results); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = $.getInterceptor$x(t2);
      $.Primitives_printString($.JSString_methods.toUpperCase$0($.S(t3.get$result(t2))) + ": " + t2.get$description());
      if ($.$eq(t3.get$message(t2), "") !== true)
        $.Primitives_printString(this._indent$1(t3.get$message(t2)));
      if (t2.get$stackTrace() != null && $.$eq(t2.get$stackTrace(), "") !== true)
        $.Primitives_printString(this._indent$1(t2.get$stackTrace()));
    }
    $.Primitives_printString("");
    if (passed === 0 && failed === 0 && errors === 0 && uncaughtError == null)
      $.Primitives_printString("No tests found.");
    else if (failed === 0 && errors === 0 && uncaughtError == null)
      $.Primitives_printString("All " + passed + " tests passed.");
    else {
      if (uncaughtError != null)
        $.Primitives_printString("Top-level uncaught error: " + $.S(uncaughtError));
      $.Primitives_printString("" + passed + " PASSED, " + failed + " FAILED, " + errors + " ERRORS");
    }
  },
  onDone$1: function(success) {
    var t1;
    if (success) {
      $.Primitives_printString("unittest-suite-success");
      t1 = this._liblib1$_receivePort;
      t1.close$0(t1);
    } else {
      t1 = this._liblib1$_receivePort;
      t1.close$0(t1);
      throw $.wrapException($._ExceptionImplementation$("Some tests failed."));
    }
  },
  _indent$1: function(str) {
    var t1 = $.JSArray_methods.map$1($.split$1$s(str, "\n"), new $.Configuration__indent_anon());
    return t1.join$1(t1, "\n");
  }
};

$$.Configuration__indent_anon = {"": "Closure;",
  call$1: function(line) {
    return "  " + $.S(line);
  },
  $isFunction: true
};

$$._IsNull = {"": "BaseMatcher;",
  matches$2: function(_, item, matchState) {
    return item == null;
  },
  describe$1: function(description) {
    return description.add$1(description, "null");
  }
};

$$._IsNotNull = {"": "BaseMatcher;",
  matches$2: function(_, item, matchState) {
    return item != null;
  },
  describe$1: function(description) {
    return description.add$1(description, "not null");
  }
};

$$._IsTrue = {"": "BaseMatcher;",
  matches$2: function(_, item, matchState) {
    return $.$eq(item, true);
  },
  describe$1: function(description) {
    return description.add$1(description, "true");
  }
};

$$._IsFalse = {"": "BaseMatcher;",
  matches$2: function(_, item, matchState) {
    return $.$eq(item, false);
  },
  describe$1: function(description) {
    return description.add$1(description, "false");
  }
};

$$._IsSameAs = {"": "BaseMatcher;_expected",
  matches$2: function(_, item, matchState) {
    var t1 = this._expected;
    return item == null ? t1 == null : item === t1;
  },
  describe$1: function(description) {
    return description.add$1(description, "same instance as ").addDescriptionOf$1(this._expected);
  }
};

$$._DeepMatcher = {"": "BaseMatcher;_expected,_limit,count",
  _compareIterables$4: function(expected, actual, matcher, depth) {
    var expectedIterator, actualIterator, position, reason, r;
    if (!(typeof actual === "object" && actual !== null && (actual.constructor === Array || $.getInterceptor(actual).$isIterable())))
      return "is not Iterable";
    expectedIterator = $.get$iterator$ax(expected);
    actualIterator = $.get$iterator$ax(actual);
    for (position = 0, reason = null; reason == null;)
      if (expectedIterator.moveNext$0() === true)
        if (actualIterator.moveNext$0() === true) {
          r = matcher.call$4(expectedIterator.get$current(), actualIterator.get$current(), "mismatch at position " + position, depth);
          if (r != null)
            reason = $.toString$0(r);
          ++position;
        } else
          reason = "shorter than expected";
      else {
        if (actualIterator.moveNext$0() === true)
          ;
        else
          return;
        reason = "longer than expected";
      }
    return reason;
  },
  _recursiveMatch$4: function(expected, actual, $location, depth) {
    var canRecurse, reason, r, err, t1, t2, t3, eType, aType, includeTypes;
    if (typeof expected !== "object" || expected === null || expected.constructor !== Array && !$.getInterceptor(expected).$isJavaScriptIndexingBehavior())
      return this._recursiveMatch$4$bailout(1, expected, actual, $location, depth);
    if (typeof depth !== "number")
      return this._recursiveMatch$4$bailout(1, expected, actual, $location, depth);
    canRecurse = depth === 0 || this._limit > 1;
    if (expected === actual)
      reason = null;
    else if (depth > this._limit)
      reason = $.StringDescription$("recursion depth limit exceeded");
    else if (canRecurse) {
      r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), depth + 1);
      reason = r != null ? $.StringDescription$(r) : null;
    } else if (false)
      if (!(typeof actual === "object" && actual !== null && !!$.getInterceptor(actual).$isMap))
        reason = $.StringDescription$("expected a map");
      else {
        err = expected.length === actual.get$length(actual) ? "" : "different map lengths; ";
        for (t1 = $.get$iterator$ax(expected.get$keys()); reason = null, t1.moveNext$0() === true;) {
          t2 = t1.get$current();
          if (actual.containsKey$1(t2) !== true) {
            reason = $.StringDescription$(err);
            reason.add$1(reason, "missing map key ");
            reason.addDescriptionOf$1(t2);
            break;
          }
        }
        if (reason == null) {
          for (t1 = $.get$iterator$ax(actual.get$keys()); t1.moveNext$0() === true;) {
            t2 = t1.get$current();
            if (expected.containsKey$1(t2) !== true) {
              reason = $.StringDescription$(err);
              reason.add$1(reason, "extra map key ");
              reason.addDescriptionOf$1(t2);
              break;
            }
          }
          if (reason == null)
            for (t1 = $.get$iterator$ax(expected.get$keys()), t2 = depth + 1; t1.moveNext$0() === true;) {
              t3 = t1.get$current();
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= expected.length)
                throw $.ioore(t3);
              reason = this._recursiveMatch$4(expected[t3], actual.$index(actual, t3), "with key <" + t3 + "> " + $.S($location), t2);
              if (reason != null)
                break;
            }
        }
      }
    else {
      reason = $.StringDescription$("");
      eType = this.typeName$1(expected);
      aType = this.typeName$1(actual);
      t1 = $.$eq(eType, aType) === true;
      includeTypes = !t1;
      if (!t1 || depth > 1) {
        reason.add$1(reason, "expected ");
        if (includeTypes) {
          t1 = reason.add$1(reason, eType);
          t1.add$1(t1, ":");
        }
        t1 = reason.addDescriptionOf$1(expected);
        t1.add$1(t1, " but ");
      }
      reason.add$1(reason, "was ");
      if (includeTypes) {
        t1 = reason.add$1(reason, aType);
        t1.add$1(t1, ":");
      }
      reason.addDescriptionOf$1(actual);
    }
    if (reason != null) {
      t1 = $.get$length$asx($location);
      if (typeof t1 !== "number")
        return this._recursiveMatch$4$bailout(2, 0, 0, $location, 0, t1, reason);
      t1 = t1 > 0;
    } else
      t1 = false;
    if (t1)
      $.add$1$ax($.add$1$ax(reason, " "), $location);
    return reason;
  },
  _recursiveMatch$4$bailout: function(state0, expected, actual, $location, depth, t1, reason) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(depth);
        canRecurse = t1.$eq(depth, 0) === true || this._limit > 1;
        t2 = $.getInterceptor(expected);
        if (t2.$eq(expected, actual) === true)
          reason = null;
        else if (t1.$gt(depth, this._limit))
          reason = $.StringDescription$("recursion depth limit exceeded");
        else if (typeof expected === "object" && expected !== null && (expected.constructor === Array || $.getInterceptor(expected).$isIterable()) && canRecurse) {
          r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), t1.$add(depth, 1));
          reason = r != null ? $.StringDescription$(r) : null;
        } else if (typeof expected === "object" && expected !== null && !!$.getInterceptor(expected).$isMap && canRecurse)
          if (!(typeof actual === "object" && actual !== null && !!$.getInterceptor(actual).$isMap))
            reason = $.StringDescription$("expected a map");
          else {
            err = $.$eq(t2.get$length(expected), actual.get$length(actual)) === true ? "" : "different map lengths; ";
            for (t3 = $.get$iterator$ax(expected.get$keys()); reason = null, t3.moveNext$0() === true;) {
              t4 = t3.get$current();
              if (actual.containsKey$1(t4) !== true) {
                reason = $.StringDescription$(err);
                reason.add$1(reason, "missing map key ");
                reason.addDescriptionOf$1(t4);
                break;
              }
            }
            if (reason == null) {
              for (t3 = $.get$iterator$ax(actual.get$keys()); t3.moveNext$0() === true;) {
                t4 = t3.get$current();
                if (expected.containsKey$1(t4) !== true) {
                  reason = $.StringDescription$(err);
                  reason.add$1(reason, "extra map key ");
                  reason.addDescriptionOf$1(t4);
                  break;
                }
              }
              if (reason == null)
                for (t3 = $.get$iterator$ax(expected.get$keys()); t3.moveNext$0() === true;) {
                  t4 = t3.get$current();
                  reason = this._recursiveMatch$4(t2.$index(expected, t4), actual.$index(actual, t4), "with key <" + $.S(t4) + "> " + $.S($location), t1.$add(depth, 1));
                  if (reason != null)
                    break;
                }
            }
          }
        else {
          reason = $.StringDescription$("");
          eType = this.typeName$1(expected);
          aType = this.typeName$1(actual);
          t2 = $.$eq(eType, aType) === true;
          includeTypes = !t2;
          if (!t2 || t1.$gt(depth, 1)) {
            reason.add$1(reason, "expected ");
            if (includeTypes) {
              t1 = reason.add$1(reason, eType);
              t1.add$1(t1, ":");
            }
            t1 = reason.addDescriptionOf$1(expected);
            t1.add$1(t1, " but ");
          }
          reason.add$1(reason, "was ");
          if (includeTypes) {
            t1 = reason.add$1(reason, aType);
            t1.add$1(t1, ":");
          }
          reason.addDescriptionOf$1(actual);
        }
      case 2:
        var canRecurse, t2, r, err, t3, t4, eType, aType, includeTypes;
        if (state0 === 2 || state0 === 0 && reason != null)
          switch (state0) {
            case 0:
              t1 = $.get$length$asx($location);
            case 2:
              state0 = 0;
              t1 = $.$gt$n(t1, 0);
          }
        else
          t1 = false;
        if (t1)
          $.add$1$ax($.add$1$ax(reason, " "), $location);
        return reason;
    }
  },
  get$_recursiveMatch: function() {
    return new $.BoundClosure$4(this, "_recursiveMatch$4");
  },
  typeName$1: function(x) {
    var t1, exception;
    try {
      if (x == null)
        return "null";
      t1 = $.get$runtimeType$(x);
      t1 = t1.toString$0(t1);
      return t1;
    } catch (exception) {
      $.unwrapException(exception);
      return "Unknown";
    }

  },
  matches$2: function(_, item, matchState) {
    var reason = this._recursiveMatch$4(this._expected, item, "", 0);
    return (reason == null ? null : $.toString$0(reason)) == null;
  },
  describe$1: function(description) {
    return description.addDescriptionOf$1(this._expected);
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var reason = this._recursiveMatch$4(this._expected, item, "", 0);
    return mismatchDescription.add$1(mismatchDescription, reason == null ? null : $.toString$0(reason));
  }
};

$$.Throws = {"": "BaseMatcher;_matcher<",
  matches$2: function(_, item, matchState) {
    var e, s, t1, done, exception;
    t1 = item;
    if (!(typeof t1 === "function" || typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFunction)) {
      t1 = item;
      t1 = !(typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture);
    } else
      t1 = false;
    if (t1)
      return false;
    t1 = item;
    if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture) {
      done = $.get$wrapAsync().call$1(new $.Throws_matches_anon());
      item.then$2$onError(new $.Throws_matches_anon0(done), new $.Throws_matches_anon1(this, done));
      return true;
    }
    try {
      item.call$0();
      return false;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      t1 = this._matcher;
      if (t1 == null || t1.matches$2(t1, e, matchState))
        return true;
      else {
        $.set$state$x(matchState, $.makeLiteralMap(["exception", e, "stack", s]));
        return false;
      }
    }

  },
  describe$1: function(description) {
    var t1 = this._matcher;
    if (t1 == null)
      return description.add$1(description, "throws an exception");
    else
      return description.add$1(description, "throws an exception which matches ").addDescriptionOf$1(t1);
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var t1, t2, t3;
    if (!(typeof item === "function" || typeof item === "object" && item !== null && !!$.getInterceptor(item).$isFunction) && !(typeof item === "object" && item !== null && !!$.getInterceptor(item).$isFuture))
      return mismatchDescription.add$1(mismatchDescription, " not a Function or Future");
    else {
      t1 = this._matcher;
      if (t1 == null || $.get$state$x(matchState) == null)
        return mismatchDescription.add$1(mismatchDescription, " no exception");
      else {
        t2 = $.getInterceptor$x(matchState);
        mismatchDescription.add$1(mismatchDescription, " exception ").addDescriptionOf$1($.$index$asx(t2.get$state(matchState), "exception"));
        if (verbose === true) {
          t3 = mismatchDescription.add$1(mismatchDescription, " at ");
          t3.add$1(t3, $.toString$0($.$index$asx(t2.get$state(matchState), "stack")));
        }
        mismatchDescription.add$1(mismatchDescription, " does not match ").addDescriptionOf$1(t1);
        return mismatchDescription;
      }
    }
  }
};

$$.Throws_matches_anon = {"": "Closure;",
  call$1: function(fn) {
    return fn.call$0();
  },
  $isFunction: true
};

$$.Throws_matches_anon0 = {"": "Closure;done_0",
  call$1: function(value) {
    this.done_0.call$1(new $.Throws_matches__anon0(value));
  },
  $isFunction: true
};

$$.Throws_matches__anon0 = {"": "Closure;value_1",
  call$0: function() {
    var t1, failureHandler;
    t1 = "Expected future to fail, but succeeded with '" + $.S(this.value_1) + "'.";
    if ($._assertFailureHandler == null)
      $._assertFailureHandler = $.DefaultFailureHandler$();
    failureHandler = $._assertFailureHandler;
    failureHandler.fail$1(t1);
    return;
  },
  $isFunction: true
};

$$.Throws_matches_anon1 = {"": "Closure;this_2,done_3",
  call$1: function(error) {
    this.done_3.call$1(new $.Throws_matches__anon(this.this_2, error));
  },
  $isFunction: true
};

$$.Throws_matches__anon = {"": "Closure;this_4,error_5",
  call$0: function() {
    var t1, t2, trace, reason;
    t1 = this.this_4;
    if (t1.get$_matcher() == null)
      return;
    t2 = this.error_5;
    trace = $.getAttachedStackTrace(t2);
    reason = trace != null ? "Actual exception trace:\n" + ("  " + $.replaceAll$2$s($.toString$0(trace), "\n", "\n  ")) : null;
    $.expect(t2, t1.get$_matcher(), null, reason, false);
  },
  $isFunction: true
};

$$.TypeMatcher = {"": "BaseMatcher;",
  describe$1: function(description) {
    return description.add$1(description, this._name);
  }
};

$$._ArgumentError = {"": "TypeMatcher;_name",
  matches$2: function(_, item, matchState) {
    return typeof item === "object" && item !== null && !!$.getInterceptor(item).$isArgumentError;
  }
};

$$._Predicate = {"": "BaseMatcher;_matcher<,_description",
  _matcher$1: function(arg0) {
    return this._matcher.call$1(arg0);
  },
  matches$2: function(_, item, matchState) {
    return this._matcher$1(item);
  },
  describe$1: function(description) {
    return description.add$1(description, this._description);
  }
};

$$.StringDescription = {"": "Object;_out",
  toString$0: function(_) {
    return this._out;
  },
  add$1: function(_, text) {
    this._out = $.S(this._out) + $.S(text);
    return this;
  },
  addDescriptionOf$1: function(value) {
    var t1, description, t2, t3;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isMatcher)
      value.describe$1(this);
    else if (typeof value === "string")
      this._addEscapedString$1(value);
    else {
      t1 = $.getInterceptor(value);
      if (value == null)
        description = "null";
      else {
        t2 = t1.toString$0(value);
        if (typeof t2 !== "string")
          return this.addDescriptionOf$1$bailout(1, value, t1, t2);
        description = t2;
      }
      if ($.JSString_methods.startsWith$1(description, "<") && $.JSString_methods.endsWith$1(description, ">"))
        this._out = $.S(this._out) + description;
      else {
        t2 = $.JSString_methods.startsWith$1(description, "Instance of");
        t3 = this._out;
        if (t2) {
          this._out = $.S(t3) + "<";
          this._out = $.S(this._out) + description;
          this._out = $.S(this._out) + ":";
          t1 = $.toString$0(t1.get$hashCode(value));
          this._out = $.S(this._out) + $.S(t1);
          this._out = $.S(this._out) + ">";
        } else {
          this._out = $.S(t3) + "<";
          this._out = $.S(this._out) + description;
          this._out = $.S(this._out) + ">";
        }
      }
    }
    return this;
  },
  addDescriptionOf$1$bailout: function(state0, value, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        var description, t3;
        if (state0 === 0 && typeof value === "object" && value !== null && !!$.getInterceptor(value).$isMatcher)
          value.describe$1(this);
        else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && typeof value === "string")
                this._addEscapedString$1(value);
              else
                switch (state0) {
                  case 0:
                    t1 = $.getInterceptor(value);
                  case 1:
                    if (state0 === 0 && value == null)
                      description = "null";
                    else
                      switch (state0) {
                        case 0:
                          t2 = t1.toString$0(value);
                        case 1:
                          state0 = 0;
                          description = t2;
                      }
                    t2 = $.getInterceptor$s(description);
                    if (t2.startsWith$1(description, "<") && t2.endsWith$1(description, ">"))
                      this._out = $.S(this._out) + $.S(description);
                    else {
                      t2 = t2.startsWith$1(description, "Instance of");
                      t3 = this._out;
                      if (t2) {
                        this._out = $.S(t3) + "<";
                        this._out = $.S(this._out) + $.S(description);
                        this._out = $.S(this._out) + ":";
                        t1 = $.toString$0(t1.get$hashCode(value));
                        this._out = $.S(this._out) + $.S(t1);
                        this._out = $.S(this._out) + ">";
                      } else {
                        this._out = $.S(t3) + "<";
                        this._out = $.S(this._out) + $.S(description);
                        this._out = $.S(this._out) + ">";
                      }
                    }
                }
          }
        return this;
    }
  },
  _addEscapedString$1: function(string) {
    var t1, i, t2;
    this._out = $.S(this._out) + "'";
    for (t1 = string.length, i = 0; i < t1; ++i) {
      t2 = this._escape$1(string[i]);
      this._out = $.S(this._out) + $.S(t2);
    }
    this._out = $.S(this._out) + "'";
  },
  _escape$1: function(ch) {
    if (ch === "'")
      return "'";
    else if (ch === "\n")
      return "\\n";
    else if (ch === "\r")
      return "\\r";
    else if (ch === "\t")
      return "\\t";
    else
      return ch;
  },
  StringDescription$1: function(init) {
    this._out = init;
  }
};

$$.TestFailure = {"": "Object;_message",
  get$message: function(_) {
    return this._message;
  },
  toString$0: function(_) {
    return this._message;
  },
  $isTestFailure: true
};

$$.anon = {"": "Closure;",
  call$2: function(f, id) {
    return f;
  },
  call$1: function(f) {
    return this.call$2(f, null);
  },
  $isFunction: true
};

$$.DefaultFailureHandler = {"": "Object;",
  fail$1: function(reason) {
    throw $.wrapException($.TestFailure$(reason));
  },
  failMatch$5: function(actual, matcher, reason, matchState, verbose) {
    $.throwExpression($.TestFailure$($._assertErrorFormatter.call$5(actual, matcher, reason, matchState, verbose)));
  },
  DefaultFailureHandler$0: function() {
    if ($._assertErrorFormatter == null)
      $._assertErrorFormatter = $._defaultErrorFormatter;
  }
};

$$.TestCase = {"": "Object;id>,description<,setUp,tearDown,testFunction,_callbackFunctionsOutstanding@,_liblib1$_message,_result,_stackTrace,currentGroup<,_startTime?,_runningTime?,enabled,_doneTeardown,_testComplete@",
  setUp$0: function() {
    return this.setUp.call$0();
  },
  tearDown$0: function() {
    return this.tearDown.call$0();
  },
  testFunction$0: function() {
    return this.testFunction.call$0();
  },
  get$message: function(_) {
    return this._liblib1$_message;
  },
  get$result: function(_) {
    return this._result;
  },
  get$stackTrace: function() {
    return this._stackTrace;
  },
  get$startTime: function(_) {
    return this._startTime;
  },
  get$runningTime: function() {
    return this._runningTime;
  },
  get$isComplete: function() {
    return !this.enabled || this.get$result(this) != null;
  },
  _runTest$0: function() {
    $._config.onTestStart$1(this);
    this._startTime = $.DateTime$_now();
    this._runningTime = null;
    this._callbackFunctionsOutstanding = this._callbackFunctionsOutstanding + 1;
    var f = this.testFunction$0();
    this._callbackFunctionsOutstanding = this._callbackFunctionsOutstanding - 1;
    if (typeof f === "object" && f !== null && !!$.getInterceptor(f).$isFuture)
      return f.then$1(new $.TestCase__runTest_anon(this)).catchError$1(new $.TestCase__runTest_anon0(this));
    else {
      if (this.get$result(this) == null && this._callbackFunctionsOutstanding === 0)
        this._complete$1("pass");
      return;
    }
  },
  _run$0: function() {
    var rtn, f;
    if (!this.enabled)
      return;
    this._stackTrace = null;
    this._result = null;
    this._liblib1$_message = "";
    this._doneTeardown = false;
    rtn = this.setUp == null ? null : this.setUp$0();
    if (typeof rtn === "object" && rtn !== null && !!$.getInterceptor(rtn).$isFuture)
      rtn.then$1(new $.TestCase__run_anon(this)).catchError$1(new $.TestCase__run_anon0(this));
    else {
      f = this._runTest$0();
      if (f != null)
        return f;
    }
    if (this.get$result(this) == null) {
      this._testComplete = $._CompleterImpl$(null);
      return this._testComplete.future;
    }
    return;
  },
  get$_run: function() {
    return new $.BoundClosure$0(this, "_run$0");
  },
  _setResult$3: function(testResult, messageText, stack) {
    var t1, t2;
    this._liblib1$_message = messageText;
    this._stackTrace = stack;
    t1 = this.get$result(this);
    t2 = $._config;
    if (t1 == null) {
      this._result = testResult;
      t2.onTestResult$1(this);
    } else {
      this._result = testResult;
      t2.onTestResultChanged$1(this);
    }
  },
  _complete$3: function(testResult, messageText, stack) {
    var rtn, t1;
    if (this.get$runningTime() == null)
      if (this.get$startTime(this) != null)
        this._runningTime = $.DateTime$_now().difference$1(this.get$startTime(this));
      else
        this._runningTime = $.Duration_0;
    this._setResult$3(testResult, messageText, stack);
    if (!this._doneTeardown) {
      this._doneTeardown = true;
      if (this.tearDown != null) {
        rtn = this.tearDown$0();
        if (typeof rtn === "object" && rtn !== null && !!$.getInterceptor(rtn).$isFuture) {
          rtn.then$1(new $.TestCase__complete_anon(this)).catchError$1(new $.TestCase__complete_anon0(this));
          return;
        }
      }
    }
    t1 = this._testComplete;
    if (t1 != null) {
      t1.complete$1(t1, this);
      this._testComplete = null;
    }
  },
  _complete$1: function(testResult) {
    return this._complete$3(testResult, "", "");
  },
  fail$2: function(messageText, stack) {
    if (this.get$result(this) != null)
      this._complete$3("error", this.get$result(this) === "pass" ? "Test failed after initially passing: " + $.S(messageText) : "Test failed more than once: " + $.S(messageText), stack);
    else
      this._complete$3("fail", messageText, stack);
  },
  fail$1: function(messageText) {
    return this.fail$2(messageText, "");
  },
  error$2: function(_, messageText, stack) {
    this._complete$3("error", messageText, stack);
  },
  _markCallbackComplete$0: function() {
    var t1 = this._callbackFunctionsOutstanding - 1;
    this._callbackFunctionsOutstanding = t1;
    if (t1 === 0 && !this.get$isComplete())
      this._complete$1("pass");
  }
};

$$.TestCase__runTest_anon = {"": "Closure;this_0",
  call$1: function(_) {
    var t1 = this.this_0;
    if ($.get$result$x(t1) == null && t1.get$_callbackFunctionsOutstanding() === 0)
      t1._complete$1("pass");
    return;
  },
  $isFunction: true
};

$$.TestCase__runTest_anon0 = {"": "Closure;this_1",
  call$1: function(error) {
    return this.this_1.fail$1($.S(error));
  },
  $isFunction: true
};

$$.TestCase__run_anon = {"": "Closure;this_0",
  call$1: function(_) {
    return this.this_0._runTest$0();
  },
  $isFunction: true
};

$$.TestCase__run_anon0 = {"": "Closure;this_1",
  call$1: function(e) {
    var t1, t2;
    t1 = $._config;
    t2 = this.this_1;
    t1.onTestStart$1(t2);
    t2.set$_startTime($.DateTime$_now());
    t2.set$_runningTime(null);
    t2._complete$3("error", t2.get$description() + ": Test setup failed: " + $.S(e), "");
  },
  $isFunction: true
};

$$.TestCase__complete_anon = {"": "Closure;this_0",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.get$_testComplete();
    if (t2 != null) {
      t2.complete$1(t2, t1);
      t1.set$_testComplete(null);
    }
  },
  $isFunction: true
};

$$.TestCase__complete_anon0 = {"": "Closure;this_1",
  call$1: function(error) {
    var trace, t1, t2;
    trace = $.getAttachedStackTrace(error);
    t1 = this.this_1;
    t2 = t1.get$description() + ": Test teardown failed: " + $.S(error);
    t1._setResult$3("error", t2, trace == null ? "" : $.toString$0(trace));
    t2 = t1.get$_testComplete();
    if (t2 != null) {
      t2.complete$1(t2, t1);
      t1.set$_testComplete(null);
    }
  },
  $isFunction: true
};

$$._SpreadArgsHelper = {"": "Object;callback,minExpectedCalls,maxExpectedCalls,isDone,testNum,id>,actualCalls,testCase,complete",
  callback$1: function(arg0) {
    return this.callback.call$1(arg0);
  },
  isDone$0: function() {
    return this.isDone.call$0();
  },
  shouldCallBack$0: function() {
    var t1, t2, t3;
    this.actualCalls = this.actualCalls + 1;
    if (this.testCase.get$isComplete()) {
      if ($.$eq($.get$result$x(this.testCase), "pass") === true) {
        t1 = this.testCase;
        t2 = "Callback " + this.id + "called (" + $.S(this.actualCalls) + ") after test case ";
        t3 = this.testCase;
        $.error$2$x(t1, t2 + t3.get$description() + " has already been marked as " + $.S($.get$result$x(t3)) + ".", "");
      }
      return false;
    } else {
      t1 = this.maxExpectedCalls;
      if (t1 >= 0 && this.actualCalls > t1)
        throw $.wrapException($.TestFailure$("Callback " + this.id + "called more times than expected (" + t1 + ")."));
    }
    return true;
  },
  after$0: function() {
    if (!this.complete) {
      var t1 = this.minExpectedCalls;
      if (t1 > 0 && this.actualCalls < t1)
        return;
      if (this.isDone != null && this.isDone$0() !== true)
        return;
      this.complete = true;
      this.testCase._markCallbackComplete$0();
    }
  },
  get$after: function() {
    return new $.BoundClosure$0(this, "after$0");
  },
  invoke1$1: function(arg1) {
    return $._guardAsync(new $._SpreadArgsHelper_invoke1_anon(this, arg1), this.get$after(), this.testNum);
  },
  get$invoke1: function() {
    return new $.BoundClosure$1(this, "invoke1$1");
  },
  _SpreadArgsHelper$5: function(callback, minExpected, maxExpected, isDone, id) {
    var t1;
    $.ensureInitialized();
    if (!($.$ge$n($._currentTestCaseIndex, 0) && $.$lt$n($._currentTestCaseIndex, $.get$length$asx($.get$_testCases())) && $.$index$asx($.get$_testCases(), $._currentTestCaseIndex) != null))
      $.print("No valid test, did you forget to run your test inside a call to test()?");
    this.testCase = $.$index$asx($.get$_testCases(), $._currentTestCaseIndex);
    if (isDone != null || minExpected > 0) {
      t1 = this.testCase;
      t1.set$_callbackFunctionsOutstanding(t1.get$_callbackFunctionsOutstanding() + 1);
      this.complete = false;
    } else
      this.complete = true;
  }
};

$$._SpreadArgsHelper_invoke1_anon = {"": "Closure;this_0,arg1_1",
  call$0: function() {
    var t1 = this.this_0;
    if (t1.shouldCallBack$0())
      return t1.callback$1(this.arg1_1);
  },
  $isFunction: true
};

$$._nextTestCase_anon = {"": "Closure;",
  call$0: function() {
    $._currentTestCaseIndex = $.$add$ns($._currentTestCaseIndex, 1);
    $._nextBatch();
  },
  $isFunction: true
};

$$._defer_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
};

$$.filterTests_anon = {"": "Closure;re_0",
  call$1: function(t) {
    return this.re_0.hasMatch$1(t.get$description());
  },
  $isFunction: true
};

$$.filterTests_anon0 = {"": "Closure;testFilter_1",
  call$1: function(t) {
    return this.testFilter_1.hasMatch$1(t.get$description());
  },
  $isFunction: true
};

$$.runTests_anon = {"": "Closure;",
  call$1: function(t) {
    return $.$eq(t, $._soloTest);
  },
  $isFunction: true
};

$$.runTests_anon0 = {"": "Closure;",
  call$0: function() {
    $._nextBatch();
  },
  $isFunction: true
};

$$._nextBatch_anon = {"": "Closure;",
  call$0: function() {
    $._nextTestCase();
  },
  $isFunction: true
};

$$._ensureInitialized_anon = {"": "Closure;",
  call$2: function(f, id) {
    return $._SpreadArgsHelper$(f, 1, 0, null, id).get$invoke1();
  },
  call$1: function(f) {
    return this.call$2(f, null);
  },
  $isFunction: true
};

$$._WorkerStub = {"": "Interceptor;",
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, i) {
    receiver.id = i;
  },
  set$onmessage: function(receiver, f) {
    receiver.onmessage = f;
  },
  postMessage$1: function(receiver, msg) {
    receiver.postMessage(msg);
  },
  terminate$0: function(receiver) {
    receiver.terminate();
  }
};

$$._HTMLElement = {"": "Element;"};

$$.AnchorElement = {"": "Element;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.AreaElement = {"": "Element;"};

$$.ArrayBuffer = {"": "Interceptor;",
  $isArrayBuffer: function() {
    return true;
  },
  $asArrayBuffer: function() {
    return null;
  }
};

$$.ArrayBufferView = {"": "Interceptor;",
  $isArrayBufferView: function() {
    return true;
  },
  $asArrayBufferView: function() {
    return null;
  }
};

$$.Attr = {"": "Node;"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "Element;"};

$$.BaseElement = {"": "Element;"};

$$.BeforeLoadEvent = {"": "Event;"};

$$.Blob = {"": "Interceptor;",
  $isBlob: function() {
    return true;
  },
  $asBlob: function() {
    return null;
  }
};

$$.BodyElement = {"": "Element;",
  get$onBlur: function(receiver) {
    return $.EventStreamProvider_blur.forTarget$1(receiver);
  }
};

$$.ButtonElement = {"": "Element;value="};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "Element;height%,width%"};

$$.CharacterData = {"": "Node;data=,length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.CompositionEvent = {"": "UIEvent;data="};

$$.ContentElement = {"": "Element;"};

$$.CssFontFaceLoadEvent = {"": "Event;",
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  }
};

$$.CssStyleDeclaration = {"": "Interceptor;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  get$clear: function(receiver) {
    return this.getPropertyValue$1(receiver, "clear");
  },
  clear$1: function($receiver, arg0) {
    return this.get$clear($receiver).call$1(arg0);
  },
  get$height: function(receiver) {
    return this.getPropertyValue$1(receiver, "height");
  },
  get$left: function(receiver) {
    return this.getPropertyValue$1(receiver, "left");
  },
  get$top: function(receiver) {
    return this.getPropertyValue$1(receiver, "top");
  },
  get$width: function(receiver) {
    return this.getPropertyValue$1(receiver, "width");
  }
};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DataView = {"": "ArrayBufferView;"};

$$.DetailsElement = {"": "Element;"};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DialogElement = {"": "Element;"};

$$.DivElement = {"": "Element;"};

$$.Document = {"": "Node;",
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  register$2: function(receiver, $name, options) {
    var t1 = $ === options;
    if (t1)
      options = null;
    if (!t1)
      return receiver.webkitRegister($name, $.convertDartToNative_Dictionary(options));
    return receiver.webkitRegister($name);
  },
  get$onBlur: function(receiver) {
    return $.EventStreamProvider_blur.forTarget$1(receiver);
  },
  get$onMouseMove: function(receiver) {
    return $.EventStreamProvider_mousemove.forTarget$1(receiver);
  },
  get$onMouseUp: function(receiver) {
    return $.EventStreamProvider_mouseup.forTarget$1(receiver);
  },
  queryAll$1: function(receiver, selectors) {
    return $._FrozenElementList$_wrap(receiver.querySelectorAll(selectors));
  }
};

$$.DocumentFragment = {"": "Node;",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = $.FilteredElementList$(receiver);
    return receiver._children;
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  set$innerHtml: function(receiver, value) {
    var t1, e, nodes;
    t1 = this.get$nodes(receiver);
    t1.clear$0(t1);
    e = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    nodes = $.List_List$from(t1.get$nodes(e), true, null);
    t1 = this.get$nodes(receiver);
    t1.addAll$1(t1, nodes);
  }
};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;$$dom_children:children=,id=,innerHtml:innerHTML},tagName=",
  get$attributes: function(receiver) {
    return $._ElementAttributeMap$(receiver);
  },
  get$children: function(receiver) {
    return $._ChildrenElementList$_wrap(receiver);
  },
  get$client: function(receiver) {
    return $.Rect$(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
  },
  get$offset: function(receiver) {
    return $.Rect$(receiver.offsetLeft, receiver.offsetTop, receiver.offsetWidth, receiver.offsetHeight);
  },
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  get$onBlur: function(receiver) {
    return $.EventStreamProvider_blur.forTarget$1(receiver);
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  },
  get$onMouseDown: function(receiver) {
    return $.EventStreamProvider_mousedown.forTarget$1(receiver);
  },
  get$onMouseMove: function(receiver) {
    return $.EventStreamProvider_mousemove.forTarget$1(receiver);
  },
  get$onMouseOut: function(receiver) {
    return $.EventStreamProvider_mouseout.forTarget$1(receiver);
  },
  get$onMouseUp: function(receiver) {
    return $.EventStreamProvider_mouseup.forTarget$1(receiver);
  },
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  }
};

$$.EmbedElement = {"": "Element;height%,width%"};

$$.EntityReference = {"": "Node;"};

$$.ErrorEvent = {"": "Event;message="};

$$.Event = {"": "Interceptor;",
  get$target: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.target);
  },
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  }
};

$$.EventException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.FieldSetElement = {"": "Element;"};

$$.File = {"": "Blob;",
  $isFile: function() {
    return true;
  },
  $asFile: function() {
    return null;
  }
};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Float32Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.num);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.num);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$double]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$double]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Float64Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.num);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.num);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$double]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$double]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FormElement = {"": "Element;length="};

$$.HRElement = {"": "Element;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "Element;"};

$$.HeadingElement = {"": "Element;"};

$$.HtmlCollection = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.HtmlDocument = {"": "Document;",
  get$head: function(receiver) {
    return receiver.head;
  }
};

$$.HtmlElement = {"": "Element;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequestException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;"};

$$.IFrameElement = {"": "Element;height%,width%"};

$$.ImageElement = {"": "Element;height%,width%,x=,y="};

$$.InputElement = {"": "Element;height%,value=,width%",
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  }
};

$$.Int16Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Int32Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Int8Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.KeyboardEvent = {"": "UIEvent;"};

$$.KeygenElement = {"": "Element;"};

$$.LIElement = {"": "Element;value="};

$$.LabelElement = {"": "Element;"};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;"};

$$.LocalMediaStream = {"": "MediaStream;"};

$$.MapElement = {"": "Element;"};

$$.MediaElement = {"": "Element;",
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  }
};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MediaKeyEvent = {"": "Event;message="};

$$.MediaStream = {"": "EventTarget;id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MenuElement = {"": "Element;"};

$$.MessageEvent = {"": "Event;",
  get$data: function(receiver) {
    return $.convertNativeToDart_SerializedScriptValue(receiver.data);
  }
};

$$.MetaElement = {"": "Element;"};

$$.MeterElement = {"": "Element;value="};

$$.ModElement = {"": "Element;"};

$$.MouseEvent = {"": "UIEvent;",
  get$client: function(receiver) {
    return $.Point$(receiver.clientX, receiver.clientY);
  },
  get$offset: function(receiver) {
    var target, t1;
    if (!!receiver.offsetX)
      return $.Point$(receiver.offsetX, receiver.offsetY);
    else {
      target = this.get$target(receiver);
      if (!(typeof target === "object" && target !== null && $.getInterceptor(target).$isElement()))
        throw $.wrapException($.UnsupportedError$("offsetX is only supported on elements"));
      t1 = this.get$client(receiver);
      t1 = t1.$sub(t1, $.get$topLeft$x($.getBoundingClientRect$0$x(this.get$target(receiver))));
      return t1.toInt$0(t1);
    }
  }
};

$$.MutationEvent = {"": "Event;"};

$$.Navigator = {"": "Interceptor;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;parent:parentElement=",
  get$nodes: function(receiver) {
    return $._ChildNodeListLazy$(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.localName;
    if (t1 == null) {
      t1 = receiver.nodeValue;
      if (t1 == null)
        t1 = $.Object.prototype.toString$0.call(receiver, receiver);
    }
    return t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  }
};

$$.NodeList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Notation = {"": "Node;"};

$$.OListElement = {"": "Element;"};

$$.ObjectElement = {"": "Element;data=,height%,width%"};

$$.OptGroupElement = {"": "Element;"};

$$.OptionElement = {"": "Element;value="};

$$.OutputElement = {"": "Element;value="};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;value="};

$$.PopStateEvent = {"": "Event;",
  get$state: function(receiver) {
    return $.convertNativeToDart_SerializedScriptValue(receiver.state);
  }
};

$$.PositionError = {"": "Interceptor;message="};

$$.PreElement = {"": "Element;"};

$$.ProcessingInstruction = {"": "Node;data="};

$$.ProgressElement = {"": "Element;value="};

$$.ProgressEvent = {"": "Event;"};

$$.QuoteElement = {"": "Element;"};

$$.RadioNodeList = {"": "NodeList;"};

$$.RangeException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.ScriptElement = {"": "Element;"};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "Element;length%,value="};

$$.ShadowElement = {"": "Element;"};

$$.ShadowRoot = {"": "DocumentFragment;innerHtml:innerHTML}"};

$$.SourceElement = {"": "Element;"};

$$.SpanElement = {"": "Element;"};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechRecognitionError = {"": "Event;message=",
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  }
};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.StorageEvent = {"": "Event;"};

$$.StyleElement = {"": "Element;"};

$$.TableCaptionElement = {"": "Element;"};

$$.TableCellElement = {"": "Element;"};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;caption=,tFoot=,tHead=",
  get$tBodies: function(receiver) {
    return $._WrappedList$(receiver.tBodies, $.TableSectionElement);
  },
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  }
};

$$.TableRowElement = {"": "Element;",
  get$cells: function(receiver) {
    return $._WrappedList$(receiver.cells, $.TableCellElement);
  }
};

$$.TableSectionElement = {"": "Element;",
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  }
};

$$.TemplateElement = {"": "Element;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "Element;rows=,value="};

$$.TextEvent = {"": "UIEvent;data="};

$$.TitleElement = {"": "Element;"};

$$.TouchEvent = {"": "UIEvent;"};

$$.TrackElement = {"": "Element;"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.UIEvent = {"": "Event;"};

$$.UListElement = {"": "Element;"};

$$.Uint16Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Uint32Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Uint8Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Uint8ClampedArray = {"": "Uint8Array;",
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.UnknownElement = {"": "Element;"};

$$.VideoElement = {"": "MediaElement;height%,width%"};

$$.WheelEvent = {"": "MouseEvent;"};

$$.Window = {"": "EventTarget;navigator=",
  get$parent: function(receiver) {
    return $._convertNativeToDart_Window(receiver.parent);
  },
  get$top: function(receiver) {
    return $._convertNativeToDart_Window(receiver.top);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  postMessage$3: function(receiver, message, targetOrigin, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      receiver.postMessage($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin, messagePorts);
      return;
    }
    receiver.postMessage($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
    return;
  },
  postMessage$2: function($receiver, message, targetOrigin) {
    return this.postMessage$3($receiver, message, targetOrigin, $);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onBlur: function(receiver) {
    return $.EventStreamProvider_blur.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onMessage: function(receiver) {
    return $.EventStreamProvider_message.forTarget$1(receiver);
  },
  get$onMouseMove: function(receiver) {
    return $.EventStreamProvider_mousemove.forTarget$1(receiver);
  },
  get$onMouseUp: function(receiver) {
    return $.EventStreamProvider_mouseup.forTarget$1(receiver);
  }
};

$$.XPathException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._ClientRect = {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && $.getInterceptor(other).$isRect()))
      return false;
    t1 = receiver.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = receiver.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = receiver.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = receiver.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  toInt$0: function(receiver) {
    return $.Rect$($.toInt$0$nx(receiver.left), $.toInt$0$nx(receiver.top), $.toInt$0$nx(receiver.width), $.toInt$0$nx(receiver.height));
  },
  get$topLeft: function(receiver) {
    return $.Point$(receiver.left, receiver.top);
  },
  $isRect: function() {
    return true;
  },
  $asRect: function() {
    return null;
  }
};

$$._NamedNodeMap = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.wrapException($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$._WebKitTransitionEvent = {"": "Event;"};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;"};

$$.AltGlyphElement = {"": "TextPositioningElement;"};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimatedString = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;"};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEColorMatrixElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEComponentTransferElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FECompositeElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEConvolveMatrixElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEDiffuseLightingElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEDisplacementMapElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEImageElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEMergeElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEOffsetElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEPointLightElement = {"": "SvgElement;x=,y="};

$$.FESpecularLightingElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FESpotLightElement = {"": "SvgElement;x=,y="};

$$.FETileElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FETurbulenceElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FilterElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ForeignObjectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;height=,width=,x=,y="};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;height=,width=,x=,y="};

$$.MetadataElement = {"": "SvgElement;"};

$$.PathElement = {"": "StyledElement;"};

$$.PatternElement = {"": "StyledElement;height=,width=,x=,y="};

$$.PolygonElement = {"": "StyledElement;"};

$$.PolylineElement = {"": "StyledElement;"};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.RectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ScriptElement0 = {"": "SvgElement;"};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StyleElement0 = {"": "SvgElement;"};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver);
  },
  set$children: function(receiver, value) {
    var children = this.get$children(receiver);
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    this.set$children(receiver, $.get$children$x($.$index$asx(t1.get$children(container), 0)));
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
};

$$.SvgException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;height=,width=,x=,y="};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;"};

$$.TextPositioningElement = {"": "TextContentElement;x=,y="};

$$.TitleElement0 = {"": "StyledElement;"};

$$.UseElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ViewElement = {"": "SvgElement;"};

$$.ZoomEvent = {"": "UIEvent;"};

$$._GradientElement = {"": "StyledElement;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.AudioProcessingEvent = {"": "Event;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.ContextEvent = {"": "Event;"};

$$.SqlError = {"": "Interceptor;message="};

$$.SqlException = {"": "Interceptor;message="};

// Bound closures
$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};

$$.BoundClosure$i0 = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  }
};

$$.BoundClosure$4 = {"": "Closure;self,target",
  call$4: function(p0, p1, p2, p3) {
    return this.self[this.target](p0, p1, p2, p3);
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.register = function() {
  $.group("bot_retained", new $.register_anon());
};

$._testThingParent = function() {
  var child, parentThing;
  child = $.ShapeThing$(10, 10, "blue", $.ShapeType_Rect);
  $.expect(child.get$parent(child), $.C__IsNull, null, null, false);
  $.expect(new $._testThingParent_anon(child), $.Throws__ArgumentError_ArgumentError, null, null, false);
  $.expect(new $._testThingParent_anon0(child), $.Throws__ArgumentError_ArgumentError, null, null, false);
  parentThing = $._TestParentThing$();
  child.registerParent$1(parentThing);
  $.expect(child.get$parent(child), $.C__IsNotNull, null, null, false);
  $.expect(new $._testThingParent_anon1(child, parentThing), $.Throws_null, null, null, false);
  child.unregisterParent$1(parentThing);
  $.expect(new $._testThingParent_anon2(child, parentThing), $.Throws__ArgumentError_ArgumentError, null, null, false);
  $.expect(child.get$parent(child), $.C__IsNull, null, null, false);
};

$._testRemoveTransform = function() {
  var thing, tx;
  thing = $.ShapeThing$(10, 10, "blue", $.ShapeType_Rect);
  $.expect(new $._testRemoveTransform_anon(thing), $.Throws__ArgumentError_ArgumentError, null, null, false);
  tx = thing.addTransform$0();
  $.expect(thing.removeTransform$1(tx), $.C__IsTrue, null, null, false);
  $.expect(thing.removeTransform$1(tx), $.C__IsFalse, null, null, false);
};

$._testDoudbleClickManager = function() {
  var stage, cm;
  stage = $.Stage$($.CanvasElement_CanvasElement(null, null), $.ShapeThing$(100, 100, "blue", $.ShapeType_Rect));
  cm = $.MouseManager_MouseManager(stage);
  $.expect($.MouseManager_MouseManager(stage), $._IsSameAs$(cm), null, null, false);
};

$._testAddRemoveFromPanel = function() {
  var panel, shape, panel2;
  panel = $.CanvasThing$(100, 100);
  $.expect(new $._testAddRemoveFromPanel_anon(panel), $.Throws__ArgumentError_ArgumentError, null, null, false);
  $.expect(panel.get$visualChildCount(), 0, null, null, false);
  shape = $.ShapeThing$(10, 10, "blue", $.ShapeType_Rect);
  $.expect(shape.get$parent(shape), $.C__IsNull, null, null, false);
  panel.add$1(panel, shape);
  $.expect(panel.get$visualChildCount(), 1, null, null, false);
  $.expect(shape.get$parent(shape), $.C__IsNotNull, null, null, false);
  $.expect(new $._testAddRemoveFromPanel_anon0(panel, shape), $.Throws__ArgumentError_ArgumentError, null, null, false);
  $.expect(new $._testAddRemoveFromPanel_anon1(panel), $.Throws__ArgumentError_ArgumentError, null, null, false);
  $.expect(panel.remove$1(panel, shape), $.C__IsTrue, null, null, false);
  $.expect(panel.get$visualChildCount(), 0, null, null, false);
  $.expect(shape.get$parent(shape), $.C__IsNull, null, null, false);
  panel2 = $.CanvasThing$(10, 10);
  panel2.add$1(panel2, shape);
  $.expect(new $._testAddRemoveFromPanel_anon2(panel, shape), $.Throws__ArgumentError_ArgumentError, null, null, false);
};

$._TestParentThing$ = function() {
  var t1 = $.List_List($, $.AffineTransform);
  $.setRuntimeTypeInfo(t1, [$.AffineTransform]);
  return new $._TestParentThing(t1, $.EventHandle$(null, $.EventArgs), null, 10, 10, 1, false, null, null, $.Map_Map($.Property, $.Object), $.Map_Map($.Attachable, $.EventHandle), false);
};

$.main = function() {
  $.groupSep = " - ";
  var t1 = $.get$_singletonNotLayout();
  $.unittestConfiguration(t1);
  $.register();
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.getInterceptor(src).$isJavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof srcStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.getInterceptor(dst).$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof count !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3;
  t1 = $.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart))
    for (i = $.$sub$n(t1.$add(srcStart, count), 1), j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src); t2 = $.getInterceptor$n(i), t2.$ge(i, srcStart); i = t2.$sub(i, 1), j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t2 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = $.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)); i = t3.$add(i, 1), j = $.$add$ns(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex !== (startIndex | 0))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, i;
  t1 = $.getInterceptor$n(startIndex);
  if (t1.$ge(startIndex, a.length))
    return -1;
  if (t1.$lt(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.$lt$n(i, endIndex); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.SubListIterable$ = function(_iterable, _start, _endOrLength, E) {
  var t1 = new $.SubListIterable(_iterable, _start, _endOrLength);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.ListIterator$ = function(iterable, E) {
  var t1 = new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f, S, T) {
  var t1 = new $.MappedIterator(null, _iterator, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedListIterable$ = function(_source, _f, S, T) {
  var t1 = new $.MappedListIterable(_source, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f, E) {
  var t1 = new $.WhereIterator(_iterator, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.SkipIterable$ = function(_iterable, _skipCount, E) {
  var t1 = new $.SkipIterable(_iterable, _skipCount);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterable$2(_iterable, _skipCount, E);
  return t1;
};

$.SkipIterator$ = function(_iterator, _skipCount, E) {
  var t1 = new $.SkipIterator(_iterator, _skipCount);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterator$2(_iterator, _skipCount, E);
  return t1;
};

$.IterableMixinWorkaround_removeWhereList = function(list, test) {
  var retained, $length, i, element, t1, t2;
  if (typeof list !== "object" || list === null || (list.constructor !== Array || !!list.immutable$list) && !$.getInterceptor(list).$isJavaScriptIndexingBehavior())
    return $.IterableMixinWorkaround_removeWhereList$bailout(1, list, test);
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.wrapException($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === $length)
    return;
  $.JSArray_methods.set$length(list, t1);
  for (t1 = list.length, i = 0; i < retained.length; ++i) {
    t2 = retained[i];
    if (i >= t1)
      throw $.ioore(i);
    list[i] = t2;
  }
};

$.IterableMixinWorkaround_removeWhereList$bailout = function(state0, list, test) {
  var retained, $length, i, element, t1;
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.wrapException($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === $length)
    return;
  $.JSArray_methods.set$length(list, t1);
  for (i = 0; i < retained.length; ++i)
    $.JSArray_methods.$indexSet(list, i, retained[i]);
};

$.IterableMixinWorkaround_firstWhere = function(iterable, test, orElse) {
  var t1, t2;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (test.call$1(t2) === true)
      return t2;
  }
  if (orElse != null)
    return orElse.call$0();
  throw $.wrapException($.StateError$("No matching element"));
};

$.IterableMixinWorkaround__rangeCheck = function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) || t1.$gt(start, list.length))
    throw $.wrapException($.RangeError$range(start, 0, list.length));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, list.length))
    throw $.wrapException($.RangeError$range(end, start, list.length));
};

$.IterableMixinWorkaround_setRangeList = function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0) === true)
    return;
  if ($.$lt$n(skipCount, 0))
    throw $.wrapException($.ArgumentError$(skipCount));
  if (typeof from === "object" && from !== null && (from.constructor === Array || $.getInterceptor(from).$isList())) {
    otherStart = skipCount;
    otherList = from;
  } else {
    otherList = $.toList$1$growable$ax($.skip$1$ax(from, skipCount), false);
    otherStart = 0;
  }
  if ($.$gt$n($.$add$ns(otherStart, $length), $.get$length$asx(otherList)))
    throw $.wrapException($.StateError$("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
};

$.Sort_insertionSort_ = function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.getInterceptor(a).$isJavaScriptIndexingBehavior())
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof right !== "number")
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t1 = $.$gt$n(compare.call$2(a[t1], el), 0);
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
};

$.Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = $.getInterceptor$asx(a); $.JSNumber_methods.$le(i, right); ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && $.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
};

$.Sort__dualPivotQuicksort = function(a, left, right, compare) {
  var t1, sixth, index1, index5, index3, index2, index4, el1, el2, el3, el4, el5, t0, t2, less, great, k, ak, comp, t3, great0, less0, t4;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.getInterceptor(a).$isJavaScriptIndexingBehavior())
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  t1 = $.getInterceptor$n(right);
  sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
  if (typeof sixth !== "number")
    throw $.iae(sixth);
  index1 = left + sixth;
  index5 = t1.$sub(right, sixth);
  if (typeof right !== "number")
    throw $.iae(right);
  index3 = $.JSNumber_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  if (index1 !== (index1 | 0))
    throw $.iae(index1);
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 !== (index2 | 0))
    throw $.iae(index2);
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 !== (index3 | 0))
    throw $.iae(index3);
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 !== (index4 | 0))
    throw $.iae(index4);
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 !== (index5 | 0))
    throw $.iae(index5);
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left !== (left | 0))
    throw $.iae(left);
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right !== (right | 0))
    throw $.iae(right);
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  t1 = $.$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0)) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t2 = less - 1;
  t3 = a.length;
  if (t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (left >= t3)
    throw $.ioore(left);
  a[left] = t4;
  a[t2] = el2;
  t2 = great + 1;
  if (t2 < 0 || t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (right >= t3)
    throw $.ioore(right);
  a[right] = t4;
  a[t2] = el4;
  t2 = less - 2;
  if (t2 - left <= 32)
    $.Sort_insertionSort_(a, left, t2, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t2, compare);
  t2 = great + 2;
  if (right - t2 <= 32)
    $.Sort_insertionSort_(a, t2, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
};

$.Sort__dualPivotQuicksort$bailout = function(state0, a, left, right, compare) {
  var t1, sixth, index1, index5, index3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, t2, k, ak, comp, t3, great0, less0;
  t1 = $.getInterceptor$n(right);
  sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
  if (typeof sixth !== "number")
    throw $.iae(sixth);
  index1 = left + sixth;
  index5 = t1.$sub(right, sixth);
  if (typeof right !== "number")
    throw $.iae(right);
  index3 = $.JSNumber_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = $.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if ($.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  t2 = $.$eq(compare.call$2(el2, el4), 0) === true;
  if (t2)
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t3 = $.getInterceptor(comp);
      if (t3.$eq(comp, 0) === true)
        continue;
      if (t3.$lt(comp, 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t3 = $.getInterceptor$n(comp);
          if (t3.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t3.$lt(comp, 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if ($.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if ($.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if ($.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
  t3 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t3));
  t1.$indexSet(a, t3, el2);
  t3 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t3));
  t1.$indexSet(a, t3, el4);
  t3 = less - 2;
  if (t3 - left <= 32)
    $.Sort_insertionSort_(a, left, t3, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t3, compare);
  t3 = great + 2;
  if (right - t3 <= 32)
    $.Sort_insertionSort_(a, t3, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t3, right, compare);
  if (t2)
    return;
  if (less < index1 && $.JSNumber_methods.$gt(great, index5)) {
    for (; $.$eq(compare.call$2(t1.$index(a, less), el2), 0) === true;)
      ++less;
    for (; $.$eq(compare.call$2(t1.$index(a, great), el4), 0) === true;)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if ($.$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;)
          if ($.$eq(compare.call$2(t1.$index(a, great), el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if ($.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
};

$.ToString__emitValue = function(i, result, visiting) {
  var t1, isList, t2, first, t3;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || $.getInterceptor(i).$isList());
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    t3 = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(t3, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || $.getInterceptor(o).$isIterable()))
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || $.getInterceptor(o).$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    result.write$1(o);
};

$.ToString__containsRef = function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString__emitPair = function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitPair_anon(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
};

$.HashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key) === true)
      return i;
  return -1;
};

$.HashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.HashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashMapKeyIterator$ = function(_map, _keys, E) {
  var t1 = new $.HashMapKeyIterator(_map, _keys, 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedHashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key) === true)
      return i;
  return -1;
};

$.LinkedHashMapCell$ = function(_key, _value) {
  return new $.LinkedHashMapCell(_key, _value, null, null);
};

$.LinkedHashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.LinkedHashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedHashMapKeyIterator$ = function(_map, _modifications, E) {
  var t1 = new $.LinkedHashMapKeyIterator(_map, _modifications, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedHashMapKeyIterator$2(_map, _modifications, E);
  return t1;
};

$._ConstantMapKeyIterable$ = function(_map) {
  return new $._ConstantMapKeyIterable(_map);
};

$.getDispatchProperty = function(object) {
  return object[$.dispatchPropertyName];
};

$.setDispatchProperty = function(object, value) {
  object[$.dispatchPropertyName] = value;
};

$.getNativeInterceptor = function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, _port);
};

$._callInIsolate = function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_anon(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.managers;
      t2 = $.getInterceptor$x(sender);
      t1.remove$1(t1, t2.get$id(sender));
      t2.terminate$0(sender);
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, t2, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  t1 = $.getInterceptor$x(worker);
  t1.set$onmessage(worker, function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t2 = $globalState;
  workerId = t2.nextManagerId;
  t2.nextManagerId = workerId + 1;
  t1.set$id(worker, workerId);
  t2 = $globalState.managers;
  t2.$indexSet(t2, workerId, worker);
  t1.postMessage$1(worker, $._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports, $.List).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkGrowable = function(list, reason) {
  if (!!list.fixed$length)
    throw $.wrapException($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (!(typeof res === "string"))
    throw $.wrapException($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCFullYear() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getFullYear() + 0;
  }
  return t1;
};

$.Primitives_getMonth = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCMonth() + 1;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getMonth() + 1;
  }
  return t1;
};

$.Primitives_getDay = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCDate() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getDate() + 0;
  }
  return t1;
};

$.Primitives_getHours = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCHours() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getHours() + 0;
  }
  return t1;
};

$.Primitives_getMinutes = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCMinutes() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getMinutes() + 0;
  }
  return t1;
};

$.Primitives_getSeconds = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCSeconds() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getSeconds() + 0;
  }
  return t1;
};

$.Primitives_getMilliseconds = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCMilliseconds() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getMilliseconds() + 0;
  }
  return t1;
};

$.Primitives_getProperty = function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  return object[key];
};

$.Primitives_setProperty = function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  object[key] = value;
};

$.iae = function(argument) {
  throw $.wrapException($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.wrapException($.RangeError$value(index));
};

$.wrapException = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.throwExpression = function(ex) {
  throw $.wrapException(ex);
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $._StackTrace$(exception.stack);
};

$._StackTrace$ = function(_stack) {
  return new $._StackTrace(_stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.wrapException($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.throwCyclicInit = function(staticName) {
  throw $.wrapException($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.getRuntimeTypeInfo(target);
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments == null ? null : $arguments[index];
};

$.TypeImpl$ = function(typeName) {
  return new $.TypeImpl(typeName);
};

$.runtimeTypeToString = function(type) {
  if (typeof type !== "string" && (typeof type !== "object" || type === null || type.constructor !== Array && !$.getInterceptor(type).$isJavaScriptIndexingBehavior()))
    return $.runtimeTypeToString$bailout(1, type);
  if (type.constructor === Array) {
    if (0 >= type.length)
      throw $.ioore(0);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
};

$.runtimeTypeToString$bailout = function(state0, type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array)
    return $.$index$asx(type, 0).builtin$cls + $.joinArguments(type, 1);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.getInterceptor(types).$isJavaScriptIndexingBehavior()))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(", ");
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    buffer.write$1($.runtimeTypeToString(argument));
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var t1, buffer, index, firstArgument, allDynamic, argument;
  t1 = $.getInterceptor(types);
  if (types == null)
    return "";
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; $.JSNumber_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(", ");
    argument = t1.$index(types, index);
    if (argument != null)
      allDynamic = false;
    buffer.write$1($.runtimeTypeToString(argument));
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.getRuntimeTypeString = function(object) {
  var className = object.constructor === Array ? "List" : object.constructor.builtin$cls;
  return className + $.joinArguments(object.$builtinTypeInfo, 0);
};

$.createRuntimeType = function($name) {
  return $.TypeImpl$($name);
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.getFunctionForTypeNameOf = function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.toStringForNativeObject = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.defineNativeMethods = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
};

$.defineNativeMethodsNonleaf = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
};

$.defineNativeMethodsCommon = function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
};

$.defineNativeMethodsFinish = function() {
};

$.lookupDispatchRecord = function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag, $.interceptorsByTag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag, $.interceptorsByTag);
  }
  if (interceptor == null)
    interceptor = {__what: "interceptor not found", __tag: tag};
  if (true === $.leafTags[tag])
    return {i: interceptor, p: false, e: null};
  else
    return {i: interceptor, p: Object.getPrototypeOf(obj), e: null};
};

$.lookupInterceptor = function(hasOwnPropertyFunction, tag, methods) {
  var method, t1, i, entry;
  method = hasOwnPropertyFunction.call(methods, tag) ? methods[tag] : null;
  if (method == null) {
    if (typeof $dynamicMetadata === "undefined")
      $._dynamicMetadata([]);
    t1 = $dynamicMetadata != null;
  } else
    t1 = false;
  if (t1) {
    i = 0;
    while (true) {
      if (typeof $dynamicMetadata === "undefined")
        $._dynamicMetadata([]);
      if (!(i < $dynamicMetadata.length))
        break;
      if (typeof $dynamicMetadata === "undefined")
        $._dynamicMetadata([]);
      entry = $dynamicMetadata[i];
      if (hasOwnPropertyFunction.call(entry.get$_set(), tag)) {
        t1 = entry.get$_tag();
        method = hasOwnPropertyFunction.call(methods, t1) ? methods[t1] : null;
        if (method != null)
          break;
      }
      ++i;
    }
  }
  return method;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive, $.JSSyntaxRegExp_makeNative(pattern, multiLine, caseSensitive, false));
};

$.JSSyntaxRegExp$_globalVersionOf = function(other) {
  var t1, t2, t3;
  t1 = other.get$pattern(other);
  t2 = other.get$isMultiLine();
  t3 = other.get$isCaseSensitive();
  return new $.JSSyntaxRegExp(t1, t2, t3, $.JSSyntaxRegExp_makeNative(t1, t2, t3, true));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  if (!(typeof pattern === "string"))
    $.throwExpression($.ArgumentError$(pattern));
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.wrapException($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp$_globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = $.List_List($, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  else if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isJSSyntaxRegExp)
    return other.hasMatch$1($.JSString_methods.substring$1(receiver, startIndex));
  else
    return $.get$iterator$ax($.allMatches$1$s(other, $.JSString_methods.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  if (typeof from === "string")
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = $.StringBuffer$("");
        $length = receiver.length;
        result.write$1(to);
        for (i = 0; i < $length; ++i) {
          result.write$1(receiver[i]);
          result.write$1(to);
        }
        return result.toString$0(result);
      }
    else
      return receiver.replace(new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
  else if (typeof from === "object" && from !== null && !!$.getInterceptor(from).$isJSSyntaxRegExp)
    return receiver.replace($.JSSyntaxRegExp$_globalVersionOf(from)._nativeRegExp, to.replace("$", "$$$$"));
  else
    throw $.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
};

$._attachStackTrace = function(o, st) {
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  $.$indexSet$ax($.get$_stackTraceExpando(), o, st);
};

$.getAttachedStackTrace = function(o) {
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  return $.$index$asx($.get$_stackTraceExpando(), o);
};

$._asyncRunCallback = function() {
  var callbacks, i, callback, remainingCallbacks, newCallbacks, exception;
  for (; $.get$isEmpty$asx($.get$_asyncCallbacks()) !== true;) {
    callbacks = $.get$_asyncCallbacks();
    $._asyncCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(callbacks)); i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(callbacks, i);
      $.$indexSet$ax(callbacks, i, null);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        i = $.$add$ns(i, 1);
        remainingCallbacks = $.sublist$1$ax(callbacks, i);
        newCallbacks = $.get$_asyncCallbacks();
        $._asyncCallbacks = [];
        $.addAll$1$ax($.get$_asyncCallbacks(), remainingCallbacks);
        $.addAll$1$ax($.get$_asyncCallbacks(), newCallbacks);
        $.Timer_run($._asyncRunCallback);
        throw exception;
      }

    }
  }
  $._callbacksAreEnqueued = false;
};

$._CompleterImpl$ = function(T) {
  var t1 = new $._CompleterImpl($._FutureImpl$(T), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureListenerWrapper$ = function(future, T) {
  var t1 = new $._FutureListenerWrapper(future, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$immediate = function(value, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value, T);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures, T) {
  var t1, t2, t3, t4, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    t4 = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    t4.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0) === true)
    return $._FutureImpl$immediate($.List_empty, null);
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $._CompleterImpl$($.List);
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue, S, T) {
  var t1 = new $._ThenFuture(_onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._CatchErrorFuture$ = function(_onError, _test, T) {
  var t1 = new $._CatchErrorFuture(_test, _onError, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SubscribeFuture$ = function(onValue, _onError, S, T) {
  var t1 = new $._SubscribeFuture(_onError, onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._WhenFuture$ = function(_action, T) {
  var t1 = new $._WhenFuture(_action, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureWrapper$ = function(_future, T) {
  var t1 = new $._FutureWrapper(_future);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SingleControllerStream$ = function(_onListen, _onPause, _onResume, _onCancel, T) {
  var t1 = new $._SingleControllerStream(_onListen, _onPause, _onResume, _onCancel, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._SingleStreamImpl$0(T);
  return t1;
};

$._throwDelayed = function(error, stackTrace) {
  var t1 = new $._throwDelayed_anon(error, stackTrace);
  $.add$1$ax($.get$_asyncCallbacks(), t1);
  if ($._callbacksAreEnqueued !== true) {
    $.Timer_run($._asyncRunCallback);
    $._callbacksAreEnqueued = true;
  }
};

$._StreamSubscriptionImpl$ = function(source, _onData, _onError, _onDone, _cancelOnError, T) {
  var t1 = new $._StreamSubscriptionImpl(_cancelOnError, _onData, _onError, _onDone, source, 0, null, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._InternalLink$0();
  return t1;
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  $._throwDelayed(error, null);
};

$._nullDoneHandler = function() {
};

$._DelayedData$ = function(value, T) {
  var t1 = new $._DelayedData(value, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._DelayedError$ = function(error) {
  return new $._DelayedError(error, null);
};

$._DelayedDone$ = function() {
  return new $._DelayedDone();
};

$._InternalLink_unlink = function(element) {
  var next, previous;
  next = element.get$_nextLink();
  previous = element.get$_previousLink();
  next.set$_previousLink(previous);
  previous.set$_nextLink(next);
  element.set$_previousLink(element);
  element.set$_nextLink(element);
};

$._InternalLinkList_add = function(list, element) {
  var listEnd;
  if (element !== element._nextLink)
    $._InternalLink_unlink(element);
  listEnd = list._previousLink;
  listEnd.set$_nextLink(element);
  list._previousLink = element;
  element._previousLink = listEnd;
  element._nextLink = list;
};

$._InternalLinkList_isEmpty = function(list) {
  return list === list._nextLink;
};

$._StreamImplEvents$ = function() {
  return new $._StreamImplEvents(null, null, null);
};

$._DoneSubscription$ = function(_handler, T) {
  var t1 = new $._DoneSubscription(_handler, null, 0);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._DoneSubscription$1(_handler, T);
  return t1;
};

$._SingleStreamMultiplexer$ = function(_source, T) {
  var t1 = new $._SingleStreamMultiplexer(_source, null, null, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._MultiStreamImpl$0(T);
  return t1;
};

$._asyncError = function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
};

$._ForwardingStreamSubscription$ = function(_stream, onData, onError, onDone, _cancelOnError, S, T) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _cancelOnError, null, onData, onError, onDone);
  $.setRuntimeTypeInfo(t1, [S, T]);
  t1._BaseStreamSubscription$3(onData, onError, onDone, T);
  t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, _cancelOnError, S, T);
  return t1;
};

$._WhereStream$ = function(source, test, T) {
  var t1 = new $._WhereStream(test, source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._MapStream$ = function(source, transform, S, T) {
  var t1 = new $._MapStream(transform, source);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._SkipStream$ = function(source, count, T) {
  var t1 = new $._SkipStream(count, source);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._SkipStream$2(source, count, T);
  return t1;
};

$.Timer_run = function(callback) {
  var t1, milliseconds;
  $.add$1$ax($.get$Timer__runCallbacks(), callback);
  if ($.$eq($.get$length$asx($.get$Timer__runCallbacks()), 1) === true) {
    t1 = new $.Timer_run_anon();
    milliseconds = $.Duration_0.get$inMilliseconds();
    if (milliseconds < 0)
      milliseconds = 0;
    $.TimerImpl$(milliseconds, t1);
  }
};

$.UnmodifiableListView$ = function(source, E) {
  var t1 = new $.UnmodifiableListView(source);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashMap$ = function(K, V) {
  var t1 = new $.HashMap(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.ListMixin__filter = function(source, test, retainMatching) {
  var retained, $length, i, element;
  retained = [];
  $length = source.get$length(source);
  if (typeof $length !== "number")
    return $.ListMixin__filter$bailout(1, source, test, retainMatching, retained, $length);
  for (i = 0; i < $length; ++i) {
    element = source.$index(source, i);
    if ($.$eq(test.call$1(element), retainMatching) === true)
      retained.push(element);
    if ($length !== source.get$length(source))
      throw $.wrapException($.ConcurrentModificationError$(source));
  }
  if (retained.length !== source.get$length(source)) {
    source.setRange$3(source, 0, retained.length, retained);
    source.set$length(source, retained.length);
  }
};

$.ListMixin__filter$bailout = function(state0, source, test, retainMatching, retained, $length) {
  var t1, i, element;
  for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
    element = source.$index(source, i);
    if ($.$eq(test.call$1(element), retainMatching) === true)
      retained.push(element);
    if (t1.$eq($length, source.get$length(source)) !== true)
      throw $.wrapException($.ConcurrentModificationError$(source));
  }
  if (retained.length !== source.get$length(source)) {
    source.setRange$3(source, 0, retained.length, retained);
    source.set$length(source, retained.length);
  }
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  return $.JSNull_methods.$and(number, $.JSNull_methods.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var nextNumber;
  number = $.$shl$n(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue, E) {
  var t1 = new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.Comparable_compare = function(a, b) {
  return $.compareTo$1$ns(a, b);
};

$.DateTime$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.DateTime$_now = function() {
  var t1 = new $.DateTime($.Primitives_dateNow(), false);
  t1.DateTime$_now$0();
  return t1;
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  var t1 = $.$mul$n(milliseconds, 1000);
  if (typeof t1 !== "number")
    throw $.iae(t1);
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + t1 + microseconds);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string")
    return "\"" + $.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"") + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IntegerDivisionByZeroException$ = function() {
  return new $.IntegerDivisionByZeroException();
};

$.Expando$ = function($name, T) {
  var t1 = new $.Expando($name);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.List_List = function($length, E) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.List_List$from = function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.Object$ = function() {
  return new $.Object();
};

$.print = function(object) {
  $.Primitives_printString(object);
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.CanvasElement_CanvasElement = function(height, width) {
  var e = document.createElement("canvas");
  if (width != null)
    $.set$width$x(e, width);
  if (height != null)
    $.set$height$x(e, height);
  return e;
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$._ElementFactoryProvider_createElement_html = function(html) {
  var match, tag, parentTag, temp, t1, element;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (match != null) {
    tag = $.toLowerCase$0$s(match.group$1(1));
    if ($.Device__isIE == null)
      $.Device__isIE = $.Device_isOpera() !== true && $.contains$2$asx($.Device_userAgent(), "MSIE", 0) === true;
    if ($.Device__isIE === true && $.Map_Ai46y.containsKey$1(tag))
      return $._ElementFactoryProvider__createTableForIE(html, tag);
    parentTag = $.Map_8h6qb.$index($.Map_8h6qb, tag);
    if (parentTag == null)
      parentTag = "div";
  } else {
    parentTag = "div";
    tag = null;
  }
  temp = document.createElement(parentTag);
  t1 = $.getInterceptor$x(temp);
  t1.set$innerHtml(temp, html);
  if ($.$eq($.get$length$asx(t1.get$children(temp)), 1) === true)
    element = $.$index$asx(t1.get$children(temp), 0);
  else if ($.$eq(parentTag, "html") === true && $.$eq($.get$length$asx(t1.get$children(temp)), 2) === true) {
    t1 = t1.get$children(temp);
    element = $.$index$asx(t1, tag === "head" ? 0 : 1);
  } else {
    $._ElementFactoryProvider__singleNode(t1.get$children(temp));
    element = null;
  }
  $.remove$0$ax(element);
  return element;
};

$._ElementFactoryProvider__createTableForIE = function(html, tag) {
  var div, t1, table, element;
  div = document.createElement("div");
  t1 = $.getInterceptor$x(div);
  t1.set$innerHtml(div, "<table>" + html + "</table>");
  table = $._ElementFactoryProvider__singleNode(t1.get$children(div));
  element = null;
  switch (tag) {
    case "td":
    case "th":
      element = $._ElementFactoryProvider__singleNode($.get$cells$x($._ElementFactoryProvider__singleNode($.get$rows$x(table))));
      break;
    case "tr":
      element = $._ElementFactoryProvider__singleNode($.get$rows$x(table));
      break;
    case "tbody":
      element = $._ElementFactoryProvider__singleNode($.get$tBodies$x(table));
      break;
    case "thead":
      element = $.get$tHead$x(table);
      break;
    case "tfoot":
      element = $.get$tFoot$x(table);
      break;
    case "caption":
      element = $.get$caption$x(table);
      break;
    case "colgroup":
      element = $._ElementFactoryProvider__getColgroup(table);
      break;
    case "col":
      element = $._ElementFactoryProvider__singleNode($.get$children$x($._ElementFactoryProvider__getColgroup(table)));
      break;
  }
  $.remove$0$ax(element);
  return element;
};

$._ElementFactoryProvider__getColgroup = function(table) {
  var t1 = $.where$1$ax($.get$children$x(table), new $._ElementFactoryProvider__getColgroup_anon());
  return $._ElementFactoryProvider__singleNode(t1.toList$0(t1));
};

$._ElementFactoryProvider__singleNode = function(list) {
  var t1 = $.getInterceptor$asx(list);
  if ($.$eq(t1.get$length(list), 1) === true)
    return t1.$index(list, 0);
  throw $.wrapException($.ArgumentError$("HTML had " + $.S(t1.get$length(list)) + " top level elements but 1 expected"));
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, _eventType, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture, T) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture, T);
  return t1;
};

$.Point$ = function(x, y) {
  return new $.Point(x, y);
};

$.Rect$ = function(left, $top, width, height) {
  return new $.Rect(left, $top, width, height);
};

$._WrappedList$ = function(_list, E) {
  var t1 = new $._WrappedList(_list);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._WrappedIterator$ = function(_iterator, E) {
  var t1 = new $._WrappedIterator(_iterator);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertNativeToDart_EventTarget = function(e) {
  if (e == null)
    return;
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array, T) {
  var t1 = new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  dict.forEach$1(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$.convertNativeToDart_SerializedScriptValue = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, true);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, t1, t2, t3, t4, copy;
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.Device_userAgent = function() {
  return $.get$navigator$x($.window()).userAgent;
};

$.Device_isOpera = function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = $.contains$2$asx($.Device_userAgent(), "Opera", 0);
  return $.Device__isOpera;
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, $.get$nodes$x(node));
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !$.getInterceptor(a).$isJavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$asx(a);
  t2 = $.getInterceptor$n(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)))
    return -1;
  if (t2.$lt(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$n(i), t2.$lt(i, endIndex); i = t2.$add(i, 1))
    if ($.$eq(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, end, accumulator) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !$.getInterceptor(a).$isJavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.wrapException($.RangeError$value(start));
  if (end < start)
    throw $.wrapException($.RangeError$value(end));
  if (end > a.length)
    throw $.wrapException($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if ($.$lt$n(start, 0))
    throw $.wrapException($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start))
    throw $.wrapException($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)))
    throw $.wrapException($.RangeError$value(end));
  for (i = start; t1 = $.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
    accumulator.push(t2.$index(a, i));
  return accumulator;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.sqrt = function(x) {
  if (!(typeof x === "number"))
    $.throwExpression($.ArgumentError$(x));
  return Math.sqrt(x);
};

$.AttachedEvent$ = function($name, T) {
  var t1 = new $.AttachedEvent($name);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.Property$ = function($name, defaultValue, T) {
  var t1 = new $.Property(defaultValue, $name);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.PropertyChangedEventArgs$ = function(property, newValue, T) {
  var t1 = new $.PropertyChangedEventArgs(property, newValue, false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.PropertyChangedEventArgs$valueCleared = function(property, T) {
  var t1 = new $.PropertyChangedEventArgs(property, null, true);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.EventHandle$ = function(onCancel, T) {
  var t1 = new $.EventHandle(false, null, $._SingleControllerStream$(null, null, null, onCancel, T));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.DetailedArgumentError$ = function(argument, details) {
  var t1 = new $.DetailedArgumentError(argument, details);
  t1.DetailedArgumentError$2(argument, details);
  return t1;
};

$.InvalidOperationError$ = function(message) {
  return new $.InvalidOperationError(message);
};

$.NullArgumentError$ = function(argument) {
  var t1 = new $.NullArgumentError(argument, "cannot be null");
  t1.DetailedArgumentError$2(argument, "cannot be null");
  return t1;
};

$.AffineTransform$ = function(scaleX, shearY, shearX, scaleY, translateX, translateY) {
  return new $.AffineTransform(scaleX, shearY, shearX, scaleY, translateX, translateY);
};

$.Box$ = function(left, $top, width, height) {
  return new $.Box(left, $top, width, height);
};

$.Coordinate$ = function(x, y) {
  return new $.Coordinate(x, y);
};

$.isValidNumber = function(value) {
  var t1 = $.getInterceptor(value);
  return value != null && !t1.get$isInfinite(value) && !t1.get$isNaN(value);
};

$.Size$ = function(width, height) {
  return new $.Size(width, height);
};

$.Vector$ = function(x, y) {
  return new $.Vector(x, y);
};

$.Util_getHashCode = function(source) {
  var t1, hash, t2, next;
  if (false)
    $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
  for (t1 = $.JSArray_methods.get$iterator(source), hash = 0; t1.moveNext$0();) {
    t2 = t1.get$current();
    next = t2 == null ? 0 : $.get$hashCode$(t2);
    if (typeof next !== "number")
      throw $.iae(next);
    hash = 536870911 & hash + next;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    hash = (hash ^ $.JSInt_methods.$shr(hash, 6)) >>> 0;
  }
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ $.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
};

$.CanvasThing$ = function(w, h) {
  var t1, t2;
  t1 = $.List_List($, $.Thing);
  $.setRuntimeTypeInfo(t1, [$.Thing]);
  t2 = $.List_List($, $.AffineTransform);
  $.setRuntimeTypeInfo(t2, [$.AffineTransform]);
  return new $.CanvasThing(t1, null, t2, $.EventHandle$(null, $.EventArgs), null, w, h, 1, false, null, null, $.Map_Map($.Property, $.Object), $.Map_Map($.Attachable, $.EventHandle), false);
};

$.Mouse_markMouseOver = function(stage, coordinate) {
  var t1, t2, message, items, hits;
  if (false)
    $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
  if (stage == null)
    $.throwExpression($.NullArgumentError$("stage"));
  t1 = coordinate != null;
  t2 = coordinate == null || coordinate.get$isValid();
  if (false)
    $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
  if (!t2) {
    message = true ? "value was invalid" : null;
    $.throwExpression($.DetailedArgumentError$("coordinate", message));
  }
  items = $.get$Mouse__stageMouseCacheProperty().get$1(stage);
  if (items != null) {
    $.forEach$1$ax(items, new $.Mouse_markMouseOver_anon());
    $.clear$1$ax($.get$Mouse__stageMouseCacheProperty(), stage);
  }
  if (t1) {
    hits = $.RetainedUtil__hitTest(stage.get$rootThing(), coordinate);
    $.get$Mouse__stageMouseCacheProperty().set$2(stage, hits);
    t1 = $.getInterceptor$ax(hits);
    t1.forEach$1(hits, new $.Mouse_markMouseOver_anon0());
    if ($.$gt$n(t1.get$length(hits), 0))
      $.get$Mouse_isMouseDirectlyOverProperty().set$2(t1.$index(hits, 0), true);
    return hits;
  }
  return;
};

$.MouseManager_MouseManager = function(stage) {
  if (false)
    $.throwExpression($.InvalidOperationError$("That's just sad. Give me a good argName"));
  return $.get$MouseManager__clickManagerProperty().get$2(stage, new $.MouseManager_MouseManager_anon());
};

$.MouseManager$_internal = function(_stage) {
  var t1 = new $.MouseManager(_stage, null, null, null);
  t1.MouseManager$_internal$1(_stage);
  return t1;
};

$.ThingDragStartingEventArgs$ = function(thing, source) {
  var t1 = new $.ThingDragStartingEventArgs(false, thing, source);
  t1.ThingMouseEventArgs$2(thing, source);
  return t1;
};

$.ThingDragEventArgs$ = function(thing, source, delta) {
  var t1 = new $.ThingDragEventArgs(delta, thing, source);
  t1.ThingMouseEventArgs$2(thing, source);
  return t1;
};

$.RetainedUtil__hitTest = function(thing, point) {
  var bounds, hits;
  point = thing.getTransform$0().createInverse$0().transformCoordinate$1(point);
  bounds = $.Box$(0, 0, thing.get$width(thing), thing.get$height(thing));
  hits = $.List_List($, $.Thing);
  $.setRuntimeTypeInfo(hits, [$.Thing]);
  if (bounds.contains$1(bounds, point))
    hits.push(thing);
  return hits;
};

$.RetainedUtil__hitTest$bailout = function(state0, thing, hits, point, $length, i, t1) {
  switch (state0) {
    case 0:
      point = thing.getTransform$0().createInverse$0().transformCoordinate$1(point);
      bounds = $.Box$(0, 0, thing.get$width(thing), thing.get$height(thing));
      hits = $.List_List($, $.Thing);
      $.setRuntimeTypeInfo(hits, [$.Thing]);
    default:
      var bounds;
      if (state0 === 2 || state0 === 1 || state0 === 0 && bounds.contains$1(bounds, point))
        switch (state0) {
          case 0:
            $.add$1$ax(hits, thing);
        }
      return hits;
  }
};

$.ShapeThing$ = function(w, h, fillStyle, shapeType) {
  var t1 = $.List_List($, $.AffineTransform);
  $.setRuntimeTypeInfo(t1, [$.AffineTransform]);
  return new $.ShapeThing(fillStyle, shapeType, t1, $.EventHandle$(null, $.EventArgs), null, w, h, 1, false, null, null, $.Map_Map($.Property, $.Object), $.Map_Map($.Attachable, $.EventHandle), false);
};

$.Stage$ = function(_canvas, rootThing) {
  var t1 = new $.Stage($.EventHandle$(null, $.EventArgs), _canvas, rootThing, null, $.Map_Map($.Property, $.Object), $.Map_Map($.Attachable, $.EventHandle), false);
  t1.Stage$2(_canvas, rootThing);
  return t1;
};

$.ThingMouseEventArgs$ = function(thing, sourceEvent) {
  var t1 = new $.ThingMouseEventArgs(thing, sourceEvent);
  t1.ThingMouseEventArgs$2(thing, sourceEvent);
  return t1;
};

$.HtmlEnhancedConfiguration$ = function(_isLayoutTest) {
  return new $.HtmlEnhancedConfiguration(_isLayoutTest, null, null, null, "Configuration", true);
};

$.HtmlEnhancedConfiguration__isIE = function() {
  return $.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE");
};

$.MatchState$ = function(state) {
  return new $.MatchState(state);
};

$.Configuration$ = function() {
  return new $.Configuration(null, "Configuration", true);
};

$._IsSameAs$ = function(_expected) {
  return new $._IsSameAs(_expected);
};

$._DeepMatcher$ = function(_expected, limit) {
  return new $._DeepMatcher(_expected, limit, null);
};

$._Predicate$ = function(_matcher, _description) {
  return new $._Predicate(_matcher, _description);
};

$.StringDescription$ = function(init) {
  var t1 = new $.StringDescription(null);
  t1.StringDescription$1(init);
  return t1;
};

$.TestFailure$ = function(message) {
  return new $.TestFailure(message);
};

$.expect = function(actual, matcher, failureHandler, reason, verbose) {
  var doesMatch, matchState, e, trace, exception, t1;
  matcher = $.wrapMatcher(matcher);
  doesMatch = null;
  matchState = $.MatchState$(null);
  try {
    doesMatch = $.matches$2$x(matcher, actual, matchState);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    doesMatch = false;
    if (reason == null) {
      t1 = e;
      reason = $.S(typeof t1 === "string" ? e : $.toString$0(e)) + " at " + $.S(trace);
    }
  }

  if (doesMatch !== true) {
    if (failureHandler == null) {
      if ($._assertFailureHandler == null)
        $._assertFailureHandler = $.DefaultFailureHandler$();
      failureHandler = $._assertFailureHandler;
    }
    failureHandler.failMatch$5(actual, matcher, reason, matchState, verbose);
  }
};

$.wrapMatcher = function(x) {
  if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMatcher)
    return x;
  else if (typeof x === "function" || typeof x === "object" && x !== null && !!$.getInterceptor(x).$isFunction)
    return $._Predicate$(x, "satisfies function");
  else
    return $._DeepMatcher$(x, 100);
};

$.DefaultFailureHandler$ = function() {
  var t1 = new $.DefaultFailureHandler();
  t1.DefaultFailureHandler$0();
  return t1;
};

$._defaultErrorFormatter = function(actual, matcher, reason, matchState, verbose) {
  var description, t1, count, t2;
  description = $.StringDescription$("");
  t1 = description.add$1(description, "Expected: ").addDescriptionOf$1(matcher);
  t1.add$1(t1, "\n     but: ");
  matcher.describeMismatch$4(actual, description, matchState, verbose);
  description.add$1(description, ".\n");
  if (verbose === true)
    if (typeof actual === "object" && actual !== null && (actual.constructor === Array || $.getInterceptor(actual).$isIterable())) {
      t1 = description.add$1(description, "Actual: ").addDescriptionOf$1(actual);
      t1.add$1(t1, "\n");
    } else if (typeof actual === "object" && actual !== null && !!$.getInterceptor(actual).$isMap) {
      description.add$1(description, "Actual: ");
      for (t1 = $.get$iterator$ax(actual.get$keys()), count = 25; t1.moveNext$0() === true;) {
        t2 = t1.get$current();
        if (count === 0) {
          description.add$1(description, "...\n");
          break;
        }
        description.addDescriptionOf$1(t2);
        description.add$1(description, " : ");
        description.addDescriptionOf$1(actual.$index(actual, t2));
        description.add$1(description, "\n");
        --count;
      }
    }
  if (reason != null) {
    t1 = description.add$1(description, reason);
    t1.add$1(t1, "\n");
  }
  return description.toString$0(description);
};

$.TestCase$_internal = function(id, description, testFunction) {
  var t1 = $._currentGroup;
  return new $.TestCase(id, description, $._testSetup, $._testTeardown, testFunction, 0, "", null, null, t1, null, null, true, false, null);
};

$.unittestConfiguration = function(value) {
  var t1 = $._config;
  if (t1 !== value) {
    if (t1 != null)
      throw $.wrapException($.StateError$("unittestConfiguration has already been set"));
    $._config = value;
  }
};

$._SpreadArgsHelper$ = function(callback, minExpected, maxExpected, isDone, id) {
  var t1 = maxExpected === 0 && minExpected > 0 ? minExpected : maxExpected;
  t1 = new $._SpreadArgsHelper(callback, minExpected, t1, isDone, $._currentTestCaseIndex, $._SpreadArgsHelper__makeCallbackId(id, callback), 0, null, null);
  t1._SpreadArgsHelper$5(callback, minExpected, maxExpected, isDone, id);
  return t1;
};

$._SpreadArgsHelper__makeCallbackId = function(id, callback) {
  var fname, t1, pos, t2, epos;
  if (id != null)
    return $.S(id) + " ";
  else {
    fname = $.toString$0(callback);
    t1 = $.getInterceptor$asx(fname);
    pos = t1.indexOf$1(fname, "Function '");
    t2 = $.getInterceptor$n(pos);
    if (t2.$gt(pos, 0)) {
      pos = t2.$add(pos, 10);
      epos = t1.indexOf$2(fname, "'", pos);
      if ($.$gt$n(epos, 0))
        return t1.substring$2(fname, pos, epos) + " ";
    }
  }
  return "";
};

$.group = function(description, body) {
  var parentGroup, parentSetup, parentTeardown, e, trace, stack, parentGroup0, exception, t1;
  $._ensureInitialized(true);
  parentGroup0 = $._currentGroup;
  parentGroup = parentGroup0;
  if ($.$eq(parentGroup0, "") !== true)
    $._currentGroup = $.S($._currentGroup) + $.S($.groupSep) + description;
  else
    $._currentGroup = description;
  parentSetup = $._testSetup;
  parentTeardown = $._testTeardown;
  try {
    $._testSetup = null;
    $._testTeardown = null;
    body.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    stack = trace == null ? "" : ": " + $.S($.toString$0(trace));
    $._uncaughtErrorMessage = $.S($.toString$0(e)) + $.S(stack);
  }
 finally {
    $._currentGroup = parentGroup;
    $._testSetup = parentSetup;
    $._testTeardown = parentTeardown;
  }
};

$._nextTestCase = function() {
  $._defer(new $._nextTestCase_anon());
};

$._reportTestError = function(msg, trace) {
  if ($.$lt$n($._currentTestCaseIndex, $.get$length$asx($.get$_testCases())))
    $.error$2$x($.$index$asx($.get$_testCases(), $._currentTestCaseIndex), msg, trace);
  else
    $._uncaughtErrorMessage = msg + ": " + trace;
};

$._defer = function(callback) {
  $._FutureImpl$immediate(null, null).then$1(new $._defer_anon(callback));
};

$.filterTests = function(testFilter) {
  var filterFunction = typeof testFilter === "function" || typeof testFilter === "object" && testFilter !== null && !!$.getInterceptor(testFilter).$isFunction ? testFilter : null;
  $.retainWhere$1$ax($.get$_testCases(), filterFunction);
};

$.runTests = function() {
  $._ensureInitialized(false);
  $._currentTestCaseIndex = 0;
  $._currentGroup = "";
  if ($._soloTest != null)
    $.filterTests(new $.runTests_anon());
  $._config.onStart$0();
  $._defer(new $.runTests_anon0());
};

$._guardAsync = function(tryBody, finallyBody, testNum) {
  var e, trace, t1, exception;
  try {
    t1 = tryBody.call$0();
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    $._registerException(testNum, e, trace);
  }
 finally {
    if (finallyBody != null)
      finallyBody.call$0();
  }
};

$._registerException = function(testNum, e, trace) {
  var message;
  trace = trace == null ? "" : $.toString$0(trace);
  message = typeof e === "object" && e !== null && !!$.getInterceptor(e).$isTestFailure ? e.get$message(e) : "Caught " + $.S(e);
  if ($.get$result$x($.$index$asx($.get$_testCases(), testNum)) == null)
    $.$index$asx($.get$_testCases(), testNum).fail$2(message, trace);
  else
    $.error$2$x($.$index$asx($.get$_testCases(), testNum), message, trace);
};

$._nextBatch = function() {
  for (; true;) {
    if ($.$ge$n($._currentTestCaseIndex, $.get$length$asx($.get$_testCases()))) {
      $._completeTests();
      break;
    }
    var f = $._guardAsync($.$index$asx($.get$_testCases(), $._currentTestCaseIndex).get$_run(), null, $._currentTestCaseIndex);
    if (f != null) {
      f.whenComplete$1(new $._nextBatch_anon());
      break;
    }
    $._currentTestCaseIndex = $.$add$ns($._currentTestCaseIndex, 1);
  }
};

$._completeTests = function() {
  var t1, passed, failed, errors;
  if ($._initialized !== true)
    return;
  for (t1 = $.get$iterator$ax($.get$_testCases()), passed = 0, failed = 0, errors = 0; t1.moveNext$0() === true;)
    switch ($.get$result$x(t1.get$current())) {
      case "pass":
        ++passed;
        break;
      case "fail":
        ++failed;
        break;
      case "error":
        ++errors;
        break;
    }
  $._config.onSummary$5(passed, failed, errors, $.get$testCases(), $._uncaughtErrorMessage);
  t1 = $._config;
  t1.onDone$1(passed > 0 && failed === 0 && errors === 0 && $._uncaughtErrorMessage == null);
  $._initialized = false;
};

$._fullSpec = function(spec) {
  return $.$eq($._currentGroup, "") !== true ? $.S($._currentGroup) + $.S($.groupSep) + spec : spec;
};

$.ensureInitialized = function() {
  $._ensureInitialized(true);
};

$._ensureInitialized = function(configAutoStart) {
  var t1;
  if ($._initialized === true)
    return;
  $._initialized = true;
  $.wrapAsync = new $._ensureInitialized_anon();
  $._uncaughtErrorMessage = null;
  if ($._config == null) {
    t1 = $.Configuration$();
    $.unittestConfiguration(t1);
  }
  $._config.onInit$0();
  if (configAutoStart && $._config.get$autoStart())
    $._defer($.runTests);
};

$._testThingParent.call$0 = $._testThingParent;
$._testThingParent.$name = "_testThingParent";
$._testRemoveTransform.call$0 = $._testRemoveTransform;
$._testRemoveTransform.$name = "_testRemoveTransform";
$._testDoudbleClickManager.call$0 = $._testDoudbleClickManager;
$._testDoudbleClickManager.$name = "_testDoudbleClickManager";
$._testAddRemoveFromPanel.call$0 = $._testAddRemoveFromPanel;
$._testAddRemoveFromPanel.$name = "_testAddRemoveFromPanel";
$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.wrapException.call$1 = $.wrapException;
$.wrapException.$name = "wrapException";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._asyncRunCallback.call$0 = $._asyncRunCallback;
$._asyncRunCallback.$name = "_asyncRunCallback";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
$._defaultErrorFormatter.call$5 = $._defaultErrorFormatter;
$._defaultErrorFormatter.$name = "_defaultErrorFormatter";
$.runTests.call$0 = $.runTests;
$.runTests.$name = "runTests";
$.Match = {builtin$cls: "Match"};
$.String = {builtin$cls: "String"};
$.ReceivePort = {builtin$cls: "ReceivePort"};
$.bool = {builtin$cls: "bool"};
$.$double = {builtin$cls: "double"};
$.$int = {builtin$cls: "int"};
$._ManagerStub = {builtin$cls: "_ManagerStub"};
$.List = {builtin$cls: "List"};
$.num = {builtin$cls: "num"};
$.JSArray_methods = $.JSArray.prototype;
$.C__IsNull = new $._IsNull();
$.Type_String = $.createRuntimeType('String');
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.C__IsTrue = new $._IsTrue();
$.C__IsNotNull = new $._IsNotNull();
$.EventStreamProvider_mouseup = new $.EventStreamProvider("mouseup");
$.C__IsFalse = new $._IsFalse();
$.Throws_null = new $.Throws(null);
$.C__UndefinedValue = new $._UndefinedValue();
$.EventStreamProvider_mousemove = new $.EventStreamProvider("mousemove");
$.EventStreamProvider_mouseout = new $.EventStreamProvider("mouseout");
$.List_8h5 = Isolate.makeConstantList(["body", "head", "caption", "td", "th", "colgroup", "col", "tr", "tbody", "tfoot", "thead", "track"]);
$.Map_8h6qb = new $.ConstantMap(12, {body: "html", head: "html", caption: "table", td: "tr", th: "tr", colgroup: "table", col: "colgroup", tr: "tbody", tbody: "table", tfoot: "table", thead: "table", track: "audio"}, $.List_8h5);
$.List_Aia = Isolate.makeConstantList(["caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
$.Map_Ai46y = new $.ConstantMap(9, {caption: null, col: null, colgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, $.List_Aia);
$._ArgumentError_ArgumentError = new $._ArgumentError("ArgumentError");
$.Throws__ArgumentError_ArgumentError = new $.Throws($._ArgumentError_ArgumentError);
$.Duration_0 = new $.Duration(0);
$.Type_$double = $.createRuntimeType('double');
$.C_NullThrownError = new $.NullThrownError();
$.JSInt_methods = $.JSInt.prototype;
$.EventStreamProvider_message = new $.EventStreamProvider("message");
$.Type_$int = $.createRuntimeType('int');
$.C_EventArgs = new $.EventArgs();
$.ShapeType_Rect = new $.ShapeType("Rect");
$.EventStreamProvider_mousedown = new $.EventStreamProvider("mousedown");
$.EventStreamProvider_click = new $.EventStreamProvider("click");
$.Coordinate_0_0 = new $.Coordinate(0, 0);
$.C_CloseToken = new $.CloseToken();
$.JSNull_methods = $.JSNull.prototype;
$.Type_Null = $.createRuntimeType('Null');
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.Type_bool = $.createRuntimeType('bool');
$.C__DelayedDone = new $._DelayedDone();
$.EventStreamProvider_error = new $.EventStreamProvider("error");
$.EventStreamProvider_blur = new $.EventStreamProvider("blur");
$.DisposedError_SMD = new $.DisposedError("Invalid operation on disposed object");
$.Expando__keyCount = 0;
$.dispatchPropertyName = "_zzyzx";
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$.Device__isOpera = null;
$.Device__isIE = null;
$._assertFailureHandler = null;
$._assertErrorFormatter = null;
$._config = null;
$._currentGroup = "";
$.groupSep = " ";
$._testSetup = null;
$._testTeardown = null;
$._currentTestCaseIndex = 0;
$._initialized = false;
$._uncaughtErrorMessage = null;
$._soloTest = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mod$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$mod(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return $.getInterceptor$n(receiver).$or(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return $.getInterceptor$n(receiver).$xor(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.allMatches$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).allMatches$1(receiver, a0);
};
$.clear$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.contains$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.error$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).error$2(receiver, a0, a1);
};
$.firstWhere$2$orElse$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).firstWhere$2$orElse(receiver, a0, a1);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$attributes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$attributes(receiver);
};
$.get$caption$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$caption(receiver);
};
$.get$cells$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$cells(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$client$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$client(receiver);
};
$.get$data$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$data(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$head$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$head(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$navigator$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$navigator(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$offset$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$offset(receiver);
};
$.get$onBlur$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onBlur(receiver);
};
$.get$onClick$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClick(receiver);
};
$.get$onError$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onError(receiver);
};
$.get$onMessage$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMessage(receiver);
};
$.get$onMouseDown$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseDown(receiver);
};
$.get$onMouseMove$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseMove(receiver);
};
$.get$onMouseOut$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseOut(receiver);
};
$.get$onMouseUp$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseUp(receiver);
};
$.get$parent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parent(receiver);
};
$.get$result$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$result(receiver);
};
$.get$rows$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$rows(receiver);
};
$.get$runtimeType$ = function(receiver) {
  return $.getInterceptor(receiver).get$runtimeType(receiver);
};
$.get$state$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$state(receiver);
};
$.get$tBodies$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tBodies(receiver);
};
$.get$tFoot$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tFoot(receiver);
};
$.get$tHead$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tHead(receiver);
};
$.get$tagName$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tagName(receiver);
};
$.get$topLeft$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$topLeft(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.getBoundingClientRect$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
$.indexOf$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
};
$.map$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).map$1(receiver, a0);
};
$.matches$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).matches$2(receiver, a0, a1);
};
$.postMessage$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).postMessage$1(receiver, a0);
};
$.postMessage$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).postMessage$2(receiver, a0, a1);
};
$.queryAll$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).queryAll$1(receiver, a0);
};
$.register$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).register$2(receiver, a0, a1);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.removeLast$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).removeLast$0(receiver);
};
$.replaceAll$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.retainWhere$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).retainWhere$1(receiver, a0);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$length$asx = function(receiver, value) {
  return $.getInterceptor$asx(receiver).set$length(receiver, value);
};
$.set$state$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$state(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.skip$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
$.sort$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sort$1(receiver, a0);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.sublist$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
$.toInt$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).toInt$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toList$1$growable$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.toUpperCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
$.where$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).where$1(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$nx = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return $.Expando$("asynchronous error", null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_START_TAG_REGEXP", "_START_TAG_REGEXP", "get$_START_TAG_REGEXP", function() {
  return $.RegExp_RegExp("<(\\w+)", true, false);
});
Isolate.$lazy($, "isMouseOverProperty", "Mouse_isMouseOverProperty", "get$Mouse_isMouseOverProperty", function() {
  return $.Property$("IsMouseOver", false, $.bool);
});
Isolate.$lazy($, "isMouseDirectlyOverProperty", "Mouse_isMouseDirectlyOverProperty", "get$Mouse_isMouseDirectlyOverProperty", function() {
  return $.Property$("IsMouseDirectlyOver", false, $.bool);
});
Isolate.$lazy($, "_stageMouseCacheProperty", "Mouse__stageMouseCacheProperty", "get$Mouse__stageMouseCacheProperty", function() {
  return $.Property$("_stageMouseCacheProperty", null, [$.List, $.Thing]);
});
Isolate.$lazy($, "cursorProperty", "MouseManager_cursorProperty", "get$MouseManager_cursorProperty", function() {
  return $.Property$("cursor", null, $.String);
});
Isolate.$lazy($, "_clickManagerProperty", "MouseManager__clickManagerProperty", "get$MouseManager__clickManagerProperty", function() {
  return $.Property$("_clickManager", null, $.MouseManager);
});
Isolate.$lazy($, "_isClickableProperty", "MouseManager__isClickableProperty", "get$MouseManager__isClickableProperty", function() {
  return $.Property$("isClickable", false, $.bool);
});
Isolate.$lazy($, "_isDraggableProperty", "MouseManager__isDraggableProperty", "get$MouseManager__isDraggableProperty", function() {
  return $.Property$("isDraggable", false, $.bool);
});
Isolate.$lazy($, "_clickEvent", "MouseManager__clickEvent", "get$MouseManager__clickEvent", function() {
  return $.AttachedEvent$("clickEvent", $.ThingMouseEventArgs);
});
Isolate.$lazy($, "_mouseDownEvent", "MouseManager__mouseDownEvent", "get$MouseManager__mouseDownEvent", function() {
  return $.AttachedEvent$("mouseDown", $.ThingMouseEventArgs);
});
Isolate.$lazy($, "_mouseUpEvent", "MouseManager__mouseUpEvent", "get$MouseManager__mouseUpEvent", function() {
  return $.AttachedEvent$("mouseUp", $.ThingMouseEventArgs);
});
Isolate.$lazy($, "_mouseMoveEvent", "MouseManager__mouseMoveEvent", "get$MouseManager__mouseMoveEvent", function() {
  return $.AttachedEvent$("mouseMove", $.ThingMouseEventArgs);
});
Isolate.$lazy($, "_mouseOutEvent", "MouseManager__mouseOutEvent", "get$MouseManager__mouseOutEvent", function() {
  return $.AttachedEvent$("mouseOut", null);
});
Isolate.$lazy($, "_dragStartingEvent", "MouseManager__dragStartingEvent", "get$MouseManager__dragStartingEvent", function() {
  return $.AttachedEvent$("_dragStartingEvent", $.ThingDragStartingEventArgs);
});
Isolate.$lazy($, "_dragEvent", "MouseManager__dragEvent", "get$MouseManager__dragEvent", function() {
  return $.AttachedEvent$("_dragStarting", $.ThingDragEventArgs);
});
Isolate.$lazy($, "_containerTransformProperty", "PanelThing__containerTransformProperty", "get$PanelThing__containerTransformProperty", function() {
  return $.Property$("panelTransform", null, $.AffineTransform);
});
Isolate.$lazy($, "_singletonNotLayout", "_singletonNotLayout", "get$_singletonNotLayout", function() {
  return $.HtmlEnhancedConfiguration$(false);
});
Isolate.$lazy($, "wrapAsync", "wrapAsync", "get$wrapAsync", function() {
  return new $.anon();
});
Isolate.$lazy($, "_testCases", "_testCases", "get$_testCases", function() {
  var t1 = $.List_List($, $.TestCase);
  $.setRuntimeTypeInfo(t1, [$.TestCase]);
  return t1;
});
Isolate.$lazy($, "testCases", "testCases", "get$testCases", function() {
  return $.UnmodifiableListView$($.get$_testCases(), null);
});
// Native classes
(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isIterable: function() {
    return false;
  },
  $asIterable: function() {
    return null;
  },
  $isList: function() {
    return false;
  },
  $asList: function() {
    return null;
  },
  $isArrayBuffer: function() {
    return false;
  },
  $asArrayBuffer: function() {
    return null;
  },
  $isArrayBufferView: function() {
    return false;
  },
  $asArrayBufferView: function() {
    return null;
  },
  $isBlob: function() {
    return false;
  },
  $asBlob: function() {
    return null;
  },
  $isElement: function() {
    return false;
  },
  $asElement: function() {
    return null;
  },
  $isFile: function() {
    return false;
  },
  $asFile: function() {
    return null;
  },
  $isRect: function() {
    return false;
  },
  $asRect: function() {
    return null;
  }
});

$.defineNativeMethods("Worker", $._WorkerStub);

$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("ArrayBuffer", $.ArrayBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.ArrayBufferView);

$.defineNativeMethods("Attr", $.Attr);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethodsNonleaf("Blob", $.Blob);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CSSStyleDeclaration", $.CssStyleDeclaration);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("DataView", $.DataView);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("EntityReference", $.EntityReference);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("File", $.File);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("Float32Array", $.Float32Array);

$.defineNativeMethods("Float64Array", $.Float64Array);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequestException", $.HttpRequestException);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("Int16Array", $.Int16Array);

$.defineNativeMethods("Int32Array", $.Int32Array);

$.defineNativeMethods("Int8Array", $.Int8Array);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("LocalMediaStream", $.LocalMediaStream);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethodsNonleaf("MediaStream", $.MediaStream);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethodsNonleaf("NodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("RadioNodeList", $.RadioNodeList);

$.defineNativeMethods("RangeException", $.RangeException);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent", $.TransitionEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("Uint16Array", $.Uint16Array);

$.defineNativeMethods("Uint32Array", $.Uint32Array);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8Array);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedArray);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow", $.Window);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("ClientRect", $._ClientRect);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("WebKitTransitionEvent", $._WebKitTransitionEvent);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

// 244 dynamic classes.
// 269 classes
// 25 !leaf
(function() {
  var v0_Uint8Array = "Uint8Array|Uint8ClampedArray", v1_Text = "CDATASection|Text", v2_TextPositioningElement = "SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement", v3_TextContentElement = [v2_TextPositioningElement, "SVGTextContentElement|SVGTextPathElement"].join("|"), v4__GradientElement = "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement", v5_StyledElement = [v3_TextContentElement, v4__GradientElement, "SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFESpecularLightingElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGForeignObjectElement|SVGGElement|SVGGlyphRefElement|SVGImageElement|SVGLineElement|SVGMarkerElement|SVGMaskElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSVGElement|SVGStopElement|SVGStyledElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement"].join("|"), v6_AnimationElement = "SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement", v7__SVGComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement", v8_MediaElement = "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement", v9_SvgElement = [v5_StyledElement, v6_AnimationElement, v7__SVGComponentTransferFunctionElement, "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGCursorElement|SVGElement|SVGFEDistantLightElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMPathElement|SVGMetadataElement|SVGScriptElement|SVGStyleElement|SVGVKernElement|SVGViewElement"].join("|"), v10_MouseEvent = "MouseEvent|WheelEvent", v11_ProgressEvent = "ProgressEvent|XMLHttpRequestProgressEvent", v12_UIEvent = [v10_MouseEvent, "CompositionEvent|FocusEvent|KeyboardEvent|SVGZoomEvent|TextEvent|TouchEvent|UIEvent"].join("|"), v13_Element = [v8_MediaElement, v9_SvgElement, "Element|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement"].join("|"), v14_DocumentFragment = "DocumentFragment|ShadowRoot", v15_CharacterData = [v1_Text, "CharacterData|Comment"].join("|"), v16_Document = "Document|HTMLDocument|SVGDocument", v17_Node = [v13_Element, v14_DocumentFragment, v15_CharacterData, v16_Document, "Attr|DocumentType|EntityReference|Node|Notation|ProcessingInstruction"].join("|"), v18_MediaStream = "LocalMediaStream|MediaStream";
  $.dynamicSetMetadata([["Uint8Array", v0_Uint8Array], ["ArrayBufferView", [v0_Uint8Array, "ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array"].join("|")], ["Blob", "Blob|File"], ["Text", v1_Text], ["CharacterData", v15_CharacterData], ["Document", v16_Document], ["DocumentFragment", v14_DocumentFragment], ["HTMLMediaElement", v8_MediaElement], ["SVGTextPositioningElement", v2_TextPositioningElement], ["SVGTextContentElement", v3_TextContentElement], ["SVGGradientElement", v4__GradientElement], ["SVGStyledElement", v5_StyledElement], ["SVGAnimationElement", v6_AnimationElement], ["SVGComponentTransferFunctionElement", v7__SVGComponentTransferFunctionElement], ["SVGElement", v9_SvgElement], ["Element", v13_Element], ["ProgressEvent", v11_ProgressEvent], ["MouseEvent", v10_MouseEvent], ["UIEvent", v12_UIEvent], ["Event", [v11_ProgressEvent, v12_UIEvent, "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|Event|HashChangeEvent|IDBVersionChangeEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent"].join("|")], ["Node", v17_Node], ["MediaStream", v18_MediaStream], ["EventTarget", [v17_Node, v18_MediaStream, "DOMWindow|EventTarget"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["NodeList", "NodeList|RadioNodeList"]]);
})();

var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.main.call$0 = $.main;
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=harness_browser.dart.js.map
