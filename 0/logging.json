{"dependencies":[{"uri":"file:///usr/local/Cellar/dart-editor/21604/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/21604/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nInterface used by types that have an intrinsic ordering.\n","uri":"file:///usr/local/Cellar/dart-editor/21604/dart-sdk/lib/core/comparable.dart","name":"Comparable","id":"Comparable","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n","name":"compareTo","id":"compareTo1()","children":[{"ref":{"refId":"dart.core/Comparable/T","name":"T"},"name":"other","id":"other","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"\nCompare one comparable to another.\n\nThis utility function is used as the default comparator\nfor the [List] sort function.\n","name":"compare","id":"compare2()","children":[{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"b","id":"b","kind":"param"}],"line":"43","kind":"method"},{"name":"T","id":"T","kind":"typeparam"}],"line":"26","kind":"class"}],"line":"5","kind":"library"}],"comment":"\nProvides APIs for debugging and error logging. This library introduces\nabstractions similar to those used in other languages, such as the Closure JS\nLogger and java.util.logging.Logger.\n","uri":"package:logging/logging.dart","name":"package:logging/logging.dart","id":"logging","children":[{"ref":{"refId":"logging/Level","name":"Level"},"comment":"\nLevel for the root-logger. This will be the level of all loggers if\n[hierarchicalLoggingEnabled] is false.\n","name":"_rootLevel","isPrivate":true,"id":"_rootLevel","line":"24","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nWhether to allow fine-grain logging and configuration of loggers in a\nhierarchy. When false, all logging is merged in the root logger.\n","name":"hierarchicalLoggingEnabled","id":"hierarchicalLoggingEnabled","line":"18","kind":"variable"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA log entry representation used to propagate information from [Logger] to\nindividual [Handler]s.\n","name":"LogRecord","id":"LogRecord","children":[{"ref":{"refId":"logging/Level","name":"Level"},"isFinal":true,"name":"level","id":"level","line":"280","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"message","id":"message","line":"281","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"Logger where this record is stored. ","name":"loggerName","id":"loggerName","line":"284","kind":"variable"},{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"isFinal":true,"comment":"Time when this record was created. ","name":"time","id":"time","line":"287","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"Unique sequence number greater than all log records created before it. ","name":"sequenceNumber","id":"sequenceNumber","line":"290","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_nextNumber","isPrivate":true,"id":"_nextNumber","line":"292","kind":"variable"},{"ref":{"refId":"dart.core/Exception","name":"Exception"},"comment":"Associated exception (if any) when recording errors messages. ","name":"exception","id":"exception","line":"295","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Associated exception message (if any) when recording errors messages. ","name":"exceptionText","id":"exceptionText","line":"298","kind":"variable"},{"name":"LogRecord","id":"LogRecord6()","children":[{"initializedField":{"refId":"logging/LogRecord/level","name":"level"},"ref":{"refId":"logging/Level","name":"Level"},"name":"level","id":"level","line":"301","kind":"param"},{"initializedField":{"refId":"logging/LogRecord/message","name":"message"},"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","line":"301","kind":"param"},{"initializedField":{"refId":"logging/LogRecord/loggerName","name":"loggerName"},"ref":{"refId":"dart.core/String","name":"String"},"name":"loggerName","id":"loggerName","line":"301","kind":"param"},{"isOptional":true,"name":"time","id":"time","line":"302","kind":"param"},{"initializedField":{"refId":"logging/LogRecord/exception","name":"exception"},"ref":{"refId":"dart.core/Exception","name":"Exception"},"isOptional":true,"name":"exception","id":"exception","line":"302","kind":"param"},{"initializedField":{"refId":"logging/LogRecord/exceptionText","name":"exceptionText"},"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"exceptionText","id":"exceptionText","line":"302","kind":"param"}],"line":"300","kind":"constructor"}],"line":"279","kind":"class"},{"interfaces":[{"refId":"dart.core/Comparable","arguments":[{"refId":"logging/Level","name":"Level"}],"name":"Comparable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\n[Level]s to control logging output. Logging can be enabled to include all\nlevels above certain [Level]. [Level]s are ordered using an integer\nvalue [Level.value]. The predefined [Level] constants below are sorted as\nfollows (in descending order): [Level.SHOUT], [Level.SEVERE],\n[Level.WARNING], [Level.INFO], [Level.CONFIG], [Level.FINE], [Level.FINER],\n[Level.FINEST], and [Level.ALL].\n\nWe recommend using one of the predefined logging levels. If you define your\nown level, make sure you use a value between those used in [Level.ALL] and\n[Level.OFF].\n","name":"Level","id":"Level","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"==","id":"==1()","children":[{"ref":{"refId":"logging/Level","name":"Level"},"name":"other","id":"other","kind":"param"}],"line":"264","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"<","id":"<1()","children":[{"ref":{"refId":"logging/Level","name":"Level"},"name":"other","id":"other","kind":"param"}],"line":"265","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"<=","id":"<=1()","children":[{"ref":{"refId":"logging/Level","name":"Level"},"name":"other","id":"other","kind":"param"}],"line":"266","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":">","id":">1()","children":[{"ref":{"refId":"logging/Level","name":"Level"},"name":"other","id":"other","kind":"param"}],"line":"267","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":">=","id":">=1()","children":[{"ref":{"refId":"logging/Level","name":"Level"},"name":"other","id":"other","kind":"param"}],"line":"268","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"compareTo","id":"compareTo1()","children":[{"ref":{"refId":"logging/Level","name":"Level"},"name":"other","id":"other","kind":"param"}],"line":"269","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"271","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hashCode","id":"hashCode","line":"270","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"name","id":"name","line":"224","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"\nUnique value for this level. Used to order levels, so filtering can exclude\nmessages whose level is under certain value.\n","name":"value","id":"value","line":"230","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"comment":"Special key to turn on logging for all levels ([value] = 0). ","name":"ALL","id":"ALL","line":"235","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"comment":"Special key to turn off all logging ([value] = 2000). ","name":"OFF","id":"OFF","line":"238","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"comment":"Key for highly detailed tracing ([value] = 300). ","name":"FINEST","id":"FINEST","line":"241","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"comment":"Key for fairly detailed tracing ([value] = 400). ","name":"FINER","id":"FINER","line":"244","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"comment":"Key for tracing information ([value] = 500). ","name":"FINE","id":"FINE","line":"247","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"comment":"Key for static configuration messages ([value] = 700). ","name":"CONFIG","id":"CONFIG","line":"250","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"comment":"Key for informational messages ([value] = 800). ","name":"INFO","id":"INFO","line":"253","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"comment":"Key for potential problems ([value] = 900). ","name":"WARNING","id":"WARNING","line":"256","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"comment":"Key for serious failures ([value] = 1000). ","name":"SEVERE","id":"SEVERE","line":"259","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"comment":"Key for extra debugging loudness ([value] = 1200). ","name":"SHOUT","id":"SHOUT","line":"262","kind":"variable"},{"name":"Level","id":"Level2()","children":[{"initializedField":{"refId":"logging/Level/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"initializedField":{"refId":"logging/Level/value","name":"value"},"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"232","kind":"constructor"}],"line":"221","kind":"class"},{"returnType":{"refId":"void","name":"void"},"comment":"Handler callback to process log entries as they are added to a [Logger]. ","name":"LoggerHandler","id":"LoggerHandler","children":[{"name":"LogRecord","id":"LogRecord","kind":"param"}],"line":"207","kind":"typedef"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nUse a [Logger] to log debug messages. [Logger]s are named using a\nhierarchical dot-separated name convention.\n","name":"Logger","id":"Logger","children":[{"isSetter":true,"comment":"Override the level for this particular [Logger] and its children. ","name":"level=","id":"level=1()","children":[{"ref":{"refId":"logging/Level","name":"Level"},"name":"value","id":"value","kind":"param"}],"line":"99","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clearListeners","id":"clearListeners0()","line":"119","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether a message for [value]'s level is loggable in this logger. ","name":"isLoggable","id":"isLoggable1()","children":[{"ref":{"refId":"logging/Level","name":"Level"},"name":"value","id":"value","kind":"param"}],"line":"131","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds a log record for a [message] at a particular [logLevel] if\n`isLoggable(logLevel)` is true. Use this method to create log entries for\nuser-defined levels. To record a message at a predefined level (e.g.\n[Level.INFO], [Level.WARNING], etc) you can use their specialized methods\ninstead (e.g. [info], [warning], etc).\n","name":"log","id":"log2()","children":[{"ref":{"refId":"logging/Level","name":"Level"},"name":"logLevel","id":"logLevel","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"141","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log message at level [Level.FINEST]. ","name":"finest","id":"finest1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"157","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log message at level [Level.FINER]. ","name":"finer","id":"finer1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"160","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log message at level [Level.FINE]. ","name":"fine","id":"fine1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"163","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log message at level [Level.CONFIG]. ","name":"config","id":"config1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"166","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log message at level [Level.INFO]. ","name":"info","id":"info1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"169","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log message at level [Level.WARNING]. ","name":"warning","id":"warning1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"172","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log message at level [Level.SEVERE]. ","name":"severe","id":"severe1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"175","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log message at level [Level.SHOUT]. ","name":"shout","id":"shout1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"178","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"logging/LogRecord","name":"LogRecord"}],"name":"Stream"},"name":"_getStream","isPrivate":true,"id":"_getStream0()","line":"180","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_publish","isPrivate":true,"id":"_publish1()","children":[{"ref":{"refId":"logging/LogRecord","name":"LogRecord"},"name":"record","id":"record","kind":"param"}],"line":"192","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"The full name of this logger, which includes the parent's full name. ","name":"fullName","id":"fullName","line":"36","kind":"property"},{"ref":{"refId":"logging/Level","name":"Level"},"comment":"\nEffective level considering the levels established in this logger's parents\n(when [hierarchicalLoggingEnabled] is true).\n","name":"level","id":"level","line":"90","kind":"property"},{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"logging/LogRecord","name":"LogRecord"}],"name":"Stream"},"comment":"\nReturns an stream of messages added to this [Logger]. You can listen for\nmessages using the standard stream APIs, for instance:\n   logger.onRecord.listen((record) { ... });\n","name":"onRecord","id":"onRecord","line":"117","kind":"property"},{"ref":{"refId":"logging/Logger","name":"Logger"},"isStatic":true,"comment":"Top-level root [Logger]. ","name":"root","id":"root","line":"199","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"Simple name of this logger. ","name":"name","id":"name","line":"33","kind":"variable"},{"ref":{"refId":"logging/Logger","name":"Logger"},"isFinal":true,"comment":"Parent of this logger in the hierarchy of loggers. ","name":"parent","id":"parent","line":"40","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"comment":"Logging [Level] used for entries generated on this logger. ","name":"_level","isPrivate":true,"id":"_level","line":"43","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"logging/Logger","name":"Logger"}],"name":"Map"},"comment":"Children in the hierarchy of loggers, indexed by their simple names. ","name":"children","id":"children","line":"46","kind":"variable"},{"ref":{"refId":"dart.async/StreamController","arguments":[{"refId":"logging/LogRecord","name":"LogRecord"}],"name":"StreamController"},"comment":"Controller used to notify when log entries are added to this logger. ","name":"_controller","isPrivate":true,"id":"_controller","line":"49","kind":"variable"},{"ref":{"refId":"dart.async/Stream","name":"Stream"},"comment":"The broadcast stream associated with the controller. ","name":"_stream","isPrivate":true,"id":"_stream","line":"52","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"logging/Logger","name":"Logger"}],"name":"Map"},"isStatic":true,"comment":"All [Logger]s in the system. ","name":"_loggers","isPrivate":true,"id":"_loggers","line":"202","kind":"variable"},{"comment":"\nSingleton constructor. Calling `new Logger(name)` will return the same\nactual instance whenever it is called with the same string name.\n","name":"Logger","id":"Logger1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"58","kind":"constructor"},{"name":"Logger._internal","isPrivate":true,"id":"Logger._internal2()","children":[{"initializedField":{"refId":"logging/Logger/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"initializedField":{"refId":"logging/Logger/parent","name":"parent"},"ref":{"refId":"logging/Logger","name":"Logger"},"name":"parent","id":"parent","kind":"param"}],"line":"81","kind":"constructor"}],"line":"31","kind":"class"}],"line":"10","kind":"library"}