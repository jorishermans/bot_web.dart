{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"file:///usr/local/Cellar/dart-editor/21094/dart-sdk//lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Comparable","name":"Comparable","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"compareTo1()","name":"compareTo","children":[{"ref":{"name":"T","refId":"dart.core/Comparable/T"},"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n","line":"35"},{"isStatic":true,"returnType":{"name":"int","refId":"dart.core/int"},"id":"compare2()","name":"compare","children":[{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"id":"a","name":"a","kind":"param"},{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"id":"b","name":"b","kind":"param"}],"kind":"method","comment":"\nCompare one comparable to another.\n\nThis utility function is used as the default comparator\nfor the [List] sort function.\n","line":"43"},{"id":"T","name":"T","kind":"typeparam"}],"uri":"file:///usr/local/Cellar/dart-editor/21094/dart-sdk//lib/core/comparable.dart","kind":"class","comment":"\nInterface used by types that have an intrinsic ordering.\n","line":"26"}],"uri":"file:///usr/local/Cellar/dart-editor/21094/dart-sdk//lib/core/core.dart","kind":"library","line":"5"}],"id":"logging","name":"package:logging/logging.dart","children":[{"ref":{"name":"Level","refId":"logging/Level"},"id":"_rootLevel","name":"_rootLevel","kind":"variable","comment":"\nLevel for the root-logger. This will be the level of all loggers if\n[hierarchicalLoggingEnabled] is false.\n","isPrivate":true,"line":"24"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"hierarchicalLoggingEnabled","name":"hierarchicalLoggingEnabled","kind":"variable","comment":"\nWhether to allow fine-grain logging and configuration of loggers in a\nhierarchy. When false, all logging is merged in the root logger.\n","line":"18"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"LogRecord","name":"LogRecord","children":[{"isFinal":true,"ref":{"name":"Level","refId":"logging/Level"},"id":"level","name":"level","kind":"variable","line":"276"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"variable","line":"277"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"loggerName","name":"loggerName","kind":"variable","comment":"Logger where this record is stored. ","line":"280"},{"isFinal":true,"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"id":"time","name":"time","kind":"variable","comment":"Time when this record was created. ","line":"283"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"sequenceNumber","name":"sequenceNumber","kind":"variable","comment":"Unique sequence number greater than all log records created before it. ","line":"286"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"id":"_nextNumber","name":"_nextNumber","kind":"variable","isPrivate":true,"line":"288"},{"ref":{"name":"Exception","refId":"dart.core/Exception"},"id":"exception","name":"exception","kind":"variable","comment":"Associated exception (if any) when recording errors messages. ","line":"291"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"exceptionText","name":"exceptionText","kind":"variable","comment":"Associated exception message (if any) when recording errors messages. ","line":"294"},{"id":"LogRecord6()","name":"LogRecord","children":[{"initializedField":{"name":"level","refId":"logging/LogRecord/level"},"ref":{"name":"Level","refId":"logging/Level"},"id":"level","name":"level","kind":"param","line":"297"},{"initializedField":{"name":"message","refId":"logging/LogRecord/message"},"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param","line":"297"},{"initializedField":{"name":"loggerName","refId":"logging/LogRecord/loggerName"},"ref":{"name":"String","refId":"dart.core/String"},"id":"loggerName","name":"loggerName","kind":"param","line":"297"},{"isOptional":true,"id":"time","name":"time","kind":"param","line":"298"},{"initializedField":{"name":"exception","refId":"logging/LogRecord/exception"},"ref":{"name":"Exception","refId":"dart.core/Exception"},"isOptional":true,"id":"exception","name":"exception","kind":"param","line":"298"},{"initializedField":{"name":"exceptionText","refId":"logging/LogRecord/exceptionText"},"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"exceptionText","name":"exceptionText","kind":"param","line":"298"}],"kind":"constructor","line":"296"}],"kind":"class","comment":"\nA log entry representation used to propagate information from [Logger] to\nindividual [Handler]s.\n","line":"275"},{"interfaces":[{"name":"Comparable","refId":"dart.core/Comparable","arguments":[{"name":"Level","refId":"logging/Level"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Level","name":"Level","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"ref":{"name":"Level","refId":"logging/Level"},"id":"other","name":"other","kind":"param"}],"kind":"method","line":"260"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"<1()","name":"<","children":[{"ref":{"name":"Level","refId":"logging/Level"},"id":"other","name":"other","kind":"param"}],"kind":"method","line":"261"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"<=1()","name":"<=","children":[{"ref":{"name":"Level","refId":"logging/Level"},"id":"other","name":"other","kind":"param"}],"kind":"method","line":"262"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":">1()","name":">","children":[{"ref":{"name":"Level","refId":"logging/Level"},"id":"other","name":"other","kind":"param"}],"kind":"method","line":"263"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":">=1()","name":">=","children":[{"ref":{"name":"Level","refId":"logging/Level"},"id":"other","name":"other","kind":"param"}],"kind":"method","line":"264"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"compareTo1()","name":"compareTo","children":[{"ref":{"name":"Level","refId":"logging/Level"},"id":"other","name":"other","kind":"param"}],"kind":"method","line":"265"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","line":"267"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","line":"266"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"variable","line":"220"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"value","name":"value","kind":"variable","comment":"\nUnique value for this level. Used to order levels, so filtering can exclude\nmessages whose level is under certain value.\n","line":"226"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"id":"ALL","name":"ALL","kind":"variable","comment":"Special key to turn on logging for all levels ([value] = 0). ","line":"231"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"id":"OFF","name":"OFF","kind":"variable","comment":"Special key to turn off all logging ([value] = 2000). ","line":"234"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"id":"FINEST","name":"FINEST","kind":"variable","comment":"Key for highly detailed tracing ([value] = 300). ","line":"237"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"id":"FINER","name":"FINER","kind":"variable","comment":"Key for fairly detailed tracing ([value] = 400). ","line":"240"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"id":"FINE","name":"FINE","kind":"variable","comment":"Key for tracing information ([value] = 500). ","line":"243"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"id":"CONFIG","name":"CONFIG","kind":"variable","comment":"Key for static configuration messages ([value] = 700). ","line":"246"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"id":"INFO","name":"INFO","kind":"variable","comment":"Key for informational messages ([value] = 800). ","line":"249"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"id":"WARNING","name":"WARNING","kind":"variable","comment":"Key for potential problems ([value] = 900). ","line":"252"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"id":"SEVERE","name":"SEVERE","kind":"variable","comment":"Key for serious failures ([value] = 1000). ","line":"255"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"id":"SHOUT","name":"SHOUT","kind":"variable","comment":"Key for extra debugging loudness ([value] = 1200). ","line":"258"},{"id":"Level2()","name":"Level","children":[{"initializedField":{"name":"name","refId":"logging/Level/name"},"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"param"},{"initializedField":{"name":"value","refId":"logging/Level/value"},"ref":{"name":"int","refId":"dart.core/int"},"id":"value","name":"value","kind":"param"}],"kind":"constructor","line":"228"}],"kind":"class","comment":"\n[Level]s to control logging output. Logging can be enabled to include all\nlevels above certain [Level]. [Level]s are ordered using an integer\nvalue [Level.value]. The predefined [Level] constants below are sorted as\nfollows (in descending order): [Level.SHOUT], [Level.SEVERE],\n[Level.WARNING], [Level.INFO], [Level.CONFIG], [Level.FINE], [Level.FINER],\n[Level.FINEST], and [Level.ALL].\n\nWe recommend using one of the predefined logging levels. If you define your\nown level, make sure you use a value between those used in [Level.ALL] and\n[Level.OFF].\n","line":"217"},{"returnType":{"name":"void","refId":"void"},"id":"LoggerHandler","name":"LoggerHandler","children":[{"id":"LogRecord","name":"LogRecord","kind":"param"}],"kind":"typedef","comment":"Handler callback to process log entries as they are added to a [Logger]. ","line":"203"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Logger","name":"Logger","children":[{"isSetter":true,"id":"level=1()","name":"level=","children":[{"ref":{"name":"Level","refId":"logging/Level"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"Override the level for this particular [Logger] and its children. ","line":"96"},{"returnType":{"name":"void","refId":"void"},"id":"clearListeners0()","name":"clearListeners","kind":"method","line":"116"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"isLoggable1()","name":"isLoggable","children":[{"ref":{"name":"Level","refId":"logging/Level"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"Whether a message for [value]'s level is loggable in this logger. ","line":"128"},{"returnType":{"name":"void","refId":"void"},"id":"log2()","name":"log","children":[{"ref":{"name":"Level","refId":"logging/Level"},"id":"logLevel","name":"logLevel","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"\nAdds a log record for a [message] at a particular [logLevel] if\n`isLoggable(logLevel)` is true. Use this method to create log entries for\nuser-defined levels. To record a message at a predefined level (e.g.\n[Level.INFO], [Level.WARNING], etc) you can use their specialized methods\ninstead (e.g. [info], [warning], etc).\n","line":"138"},{"returnType":{"name":"void","refId":"void"},"id":"finest1()","name":"finest","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"Log message at level [Level.FINEST]. ","line":"154"},{"returnType":{"name":"void","refId":"void"},"id":"finer1()","name":"finer","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"Log message at level [Level.FINER]. ","line":"157"},{"returnType":{"name":"void","refId":"void"},"id":"fine1()","name":"fine","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"Log message at level [Level.FINE]. ","line":"160"},{"returnType":{"name":"void","refId":"void"},"id":"config1()","name":"config","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"Log message at level [Level.CONFIG]. ","line":"163"},{"returnType":{"name":"void","refId":"void"},"id":"info1()","name":"info","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"Log message at level [Level.INFO]. ","line":"166"},{"returnType":{"name":"void","refId":"void"},"id":"warning1()","name":"warning","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"Log message at level [Level.WARNING]. ","line":"169"},{"returnType":{"name":"void","refId":"void"},"id":"severe1()","name":"severe","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"Log message at level [Level.SEVERE]. ","line":"172"},{"returnType":{"name":"void","refId":"void"},"id":"shout1()","name":"shout","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"Log message at level [Level.SHOUT]. ","line":"175"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"LogRecord","refId":"logging/LogRecord"}]},"id":"_getStream0()","name":"_getStream","kind":"method","isPrivate":true,"line":"177"},{"returnType":{"name":"void","refId":"void"},"id":"_publish1()","name":"_publish","children":[{"ref":{"name":"LogRecord","refId":"logging/LogRecord"},"id":"record","name":"record","kind":"param"}],"kind":"method","isPrivate":true,"line":"188"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"fullName","name":"fullName","kind":"property","comment":"The full name of this logger, which includes the parent's full name. ","line":"36"},{"ref":{"name":"Level","refId":"logging/Level"},"id":"level","name":"level","kind":"property","comment":"\nEffective level considering the levels established in this logger's parents\n(when [hierarchicalLoggingEnabled] is true).\n","line":"87"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"LogRecord","refId":"logging/LogRecord"}]},"id":"onRecord","name":"onRecord","kind":"property","comment":"\nReturns an stream of messages added to this [Logger]. You can listen for\nmessages using the standard stream APIs, for instance:\n   logger.onRecord.listen((record) { ... });\n","line":"114"},{"ref":{"name":"Logger","refId":"logging/Logger"},"isStatic":true,"id":"root","name":"root","kind":"property","comment":"Top-level root [Logger]. ","line":"195"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"variable","comment":"Simple name of this logger. ","line":"33"},{"isFinal":true,"ref":{"name":"Logger","refId":"logging/Logger"},"id":"parent","name":"parent","kind":"variable","comment":"Parent of this logger in the hierarchy of loggers. ","line":"40"},{"ref":{"name":"Level","refId":"logging/Level"},"id":"_level","name":"_level","kind":"variable","comment":"Logging [Level] used for entries generated on this logger. ","isPrivate":true,"line":"43"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Logger","refId":"logging/Logger"}]},"id":"children","name":"children","kind":"variable","comment":"Children in the hierarchy of loggers, indexed by their simple names. ","line":"46"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"LogRecord","refId":"logging/LogRecord"}]},"id":"_controller","name":"_controller","kind":"variable","comment":"Controller used to notify when log entries are added to this logger. ","isPrivate":true,"line":"49"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Logger","refId":"logging/Logger"}]},"isStatic":true,"id":"_loggers","name":"_loggers","kind":"variable","comment":"All [Logger]s in the system. ","isPrivate":true,"line":"198"},{"id":"Logger1()","name":"Logger","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"param"}],"kind":"constructor","comment":"\nSingleton constructor. Calling `new Logger(name)` will return the same\nactual instance whenever it is called with the same string name.\n","line":"55"},{"id":"Logger._internal2()","name":"Logger._internal","children":[{"initializedField":{"name":"name","refId":"logging/Logger/name"},"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"param"},{"initializedField":{"name":"parent","refId":"logging/Logger/parent"},"ref":{"name":"Logger","refId":"logging/Logger"},"id":"parent","name":"parent","kind":"param"}],"kind":"constructor","isPrivate":true,"line":"78"}],"kind":"class","comment":"\nUse a [Logger] to log debug messages. [Logger]s are named using a\nhierarchical dot-separated name convention.\n","line":"31"}],"uri":"package:logging/logging.dart","kind":"library","comment":"\nProvides APIs for debugging and error logging. This library introduces\nabstractions similar to those used in other languages, such as the Closure JS\nLogger and java.util.logging.Logger.\n","line":"10"}