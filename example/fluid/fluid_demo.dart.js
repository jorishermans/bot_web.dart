// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.getInterceptor(dartException).toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.Dynamic_ = {"": "Object;"};

$$.Null = {"": "Object;"};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_liblib3$_pattern,_isMultiLine,_isCaseSensitive",
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  get$pattern: function() {
    return this._liblib3$_pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message>",
  toString$0: function() {
    if (!(this.get$message() == null))
      return "Illegal argument(s): " + $.S(this.get$message());
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.toString$0$bailout(1, t1, t2);
    for (; $.ltB(t1.i_1, t2.length); t3 = t1.i_1, t1.i_1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1)) {
      if ($.gtB(t1.i_1, 0)) {
        t3 = t1.sb_0;
        $.getInterceptor$JSArray(t3).add$1(t3, ", ");
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t5 = $.Error_safeToString(t2[t4]);
      $.getInterceptor$JSArray(t3).add$1(t3, t5);
    }
    t2 = this._namedArguments;
    if (!(t2 == null)) {
      t3 = new $.NoSuchMethodError_toString_anon(t1);
      $.getInterceptor$JSArray(t2).forEach$1(t2, t3);
    }
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.toString$0$bailout(2, t1, t2);
    t3 = t1.sb_0;
    actualParameters = $.getInterceptor(t3).toString$0(t3);
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0) {
        t3 = t1.sb_0;
        $.getInterceptor$JSArray(t3).add$1(t3, ", ");
      }
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      t4 = t2[i];
      $.getInterceptor$JSArray(t3).add$1(t3, t4);
    }
    t1 = t1.sb_0;
    formalParameters = $.getInterceptor(t1).toString$0(t1);
    t1 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        t2 = env1;
        t1 = env0;
        break;
      case 2:
        t2 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer_StringBuffer("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSStringJSArray(t2); $.ltB(t1.i_1, t3.get$length(t2)); t4 = t1.i_1, t1.i_1 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, 1)) {
            if ($.gtB(t1.i_1, 0)) {
              t4 = t1.sb_0;
              $.getInterceptor$JSArray(t4).add$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t5 = $.Error_safeToString(t3.operator$index$1(t2, t1.i_1));
            $.getInterceptor$JSArray(t4).add$1(t4, t5);
          }
        t2 = this._namedArguments;
        if (!(t2 == null)) {
          t3 = new $.NoSuchMethodError_toString_anon(t1);
          $.getInterceptor$JSArray(t2).forEach$1(t2, t3);
        }
        t2 = this._existingArgumentNames;
      case 2:
        var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          t3 = t1.sb_0;
          actualParameters = $.getInterceptor(t3).toString$0(t3);
          t1.sb_0 = $.StringBuffer_StringBuffer("");
          for (t3 = $.getInterceptor$JSStringJSArray(t2), i = 0; $.ltB(i, t3.get$length(t2)); ++i) {
            if (i > 0) {
              t4 = t1.sb_0;
              $.getInterceptor$JSArray(t4).add$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t5 = t3.operator$index$1(t2, i);
            $.getInterceptor$JSArray(t4).add$1(t4, t5);
          }
          t1 = t1.sb_0;
          formalParameters = $.getInterceptor(t1).toString$0(t1);
          t1 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function() {
    return "Unsupported operation: " + this.message;
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  }
};

$$.IllegalJSRegExpException = {"": "Object;_pattern,_errmsg",
  toString$0: function() {
    return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
  }
};

$$.Iterable = {"": "Object;",
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    var iterator, buffer, t1, t2;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = $.getInterceptor$JSArray(this).get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer_StringBuffer("");
    if (separator === "")
      do {
        t1 = $.S(iterator.get$current());
        $.getInterceptor$JSArray(buffer).add$1(buffer, t1);
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      t2 = $.getInterceptor$JSArray(buffer);
      t2.add$1(buffer, t1);
      for (; iterator.moveNext$0() === true;) {
        t2.add$1(buffer, separator);
        t2.add$1(buffer, $.S(iterator.get$current()));
      }
    }
    return $.getInterceptor(buffer).toString$0(buffer);
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer, t1, t2;
    iterator = $.getInterceptor$JSArray(this).get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer_StringBuffer("");
    if (separator == null || $.eqB(separator, ""))
      do {
        t1 = $.S(iterator.get$current());
        $.getInterceptor$JSArray(buffer).add$1(buffer, t1);
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      t2 = $.getInterceptor$JSArray(buffer);
      t2.add$1(buffer, t1);
      for (; iterator.moveNext$0() === true;) {
        t2.add$1(buffer, separator);
        t2.add$1(buffer, $.S(iterator.get$current()));
      }
    }
    return $.getInterceptor(buffer).toString$0(buffer);
  },
  join$0: function() {
    return this.join$1(null);
  },
  get$length: function() {
    var it, count;
    it = $.getInterceptor$JSArray(this).get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function() {
    return $.getInterceptor$JSArray(this).get$iterator(this).moveNext$0() !== true;
  }
};

$$._HashMapImpl = {"": "Object;_keys>,_values>,_loadLimit,_numberOfEntries,_numberOfDeleted",
  _probeForAdding$1: function(key) {
    var t1, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.getInterceptor(key).get$hashCode(key);
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    hash = (t1 & this._keys.length - 1) >>> 0;
    for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.eqB(existingKey, key))
        return hash;
      else if (insertionIndex < 0 && existingKey === $.CONSTANT5)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(2, hash, key, numberOfProbes0, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        key = env0;
        break;
      case 2:
        insertionIndex = env3;
        numberOfProbes0 = env2;
        key = env1;
        hash = env0;
        break;
    }
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.getInterceptor(key).get$hashCode(key);
      case 1:
        state0 = 0;
        t3 = this._keys.length - 1;
        hash = $.getInterceptor$JSNumber(t1).operator$and$1(t1, t3);
        numberOfProbes = 1;
        insertionIndex = -1;
      case 2:
        var t1, key, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = this._keys;
                if (hash !== (hash | 0))
                  throw $.iae(hash);
                if (hash < 0 || hash >= t1.length)
                  throw $.ioore(hash);
                existingKey = t1[hash];
                if (existingKey == null) {
                  if (insertionIndex < 0)
                    return hash;
                  return insertionIndex;
                } else if ($.eqB(existingKey, key))
                  return hash;
                else if (insertionIndex < 0 && existingKey === $.CONSTANT5)
                  insertionIndex = hash;
                numberOfProbes0 = numberOfProbes + 1;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
              case 2:
                state0 = 0;
                numberOfProbes = numberOfProbes0;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var t1, t2, hash, numberOfProbes, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.getInterceptor(key).get$hashCode(key);
    t2 = this._keys.length - 1;
    hash = $.getInterceptor$JSNumber(t1).operator$and$1(t1, t2);
    if (hash !== (hash | 0))
      return this._probeForLookup$1$bailout(1, key, hash);
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.eqB(existingKey, key))
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _probeForLookup$1$bailout: function(state0, key, hash) {
    var numberOfProbes, t1, existingKey, numberOfProbes0;
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.eqB(existingKey, key))
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _ensureCapacity$0: function() {
    var t1, newNumberOfEntries, capacity, numberOfFreeOrDeleted;
    t1 = this._numberOfEntries;
    newNumberOfEntries = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    if ($.geB(newNumberOfEntries, this._loadLimit)) {
      this._grow$1(this._keys.length * 2);
      return;
    }
    capacity = this._keys.length;
    if (typeof newNumberOfEntries !== "number")
      throw $.iae(newNumberOfEntries);
    numberOfFreeOrDeleted = capacity - newNumberOfEntries;
    t1 = this._numberOfDeleted;
    if (t1 > numberOfFreeOrDeleted - t1)
      this._grow$1(capacity);
  },
  _grow$1: function(newCapacity) {
    var capacity, t1, oldKeys, oldValues, i, key, value, newIndex;
    capacity = this._keys.length;
    t1 = $.getInterceptor$JSNumber(newCapacity).operator$mul$1(newCapacity, 3);
    this._loadLimit = $.getInterceptor$JSNumber(t1).operator$tdiv$1(t1, 4);
    oldKeys = this._keys;
    oldValues = this._values;
    this._keys = $.List_List$fixedLength(newCapacity, null);
    this._values = $.List_List$fixedLength(newCapacity, null);
    for (i = 0; i < capacity; ++i) {
      if (i >= oldKeys.length)
        throw $.ioore(i);
      key = oldKeys[i];
      if (key == null || key === $.CONSTANT5)
        continue;
      if (i >= oldValues.length)
        throw $.ioore(i);
      value = oldValues[i];
      newIndex = this._probeForAdding$1(key);
      t1 = this._keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = key;
      t1 = this._values;
      if (newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = value;
    }
    this._numberOfDeleted = 0;
  },
  clear$0: function() {
    var t1, length$, t2, t3, i;
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    t1 = this._keys;
    length$ = t1.length;
    for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
      t1[i] = null;
      if (i >= t3)
        throw $.ioore(i);
      t2[i] = null;
    }
  },
  operator$indexSet$2: function(key, value) {
    var index, t1;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    t1 = this._keys;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1 = t1[index];
    if (t1 == null || t1 === $.CONSTANT5) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.operator$indexSet$2$bailout1(1, key, value, index, t1);
      this._numberOfEntries = t1 + 1;
    }
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = key;
    t1 = this._values;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  operator$indexSet$2$bailout1: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env3;
        index = env2;
        value = env1;
        key = env0;
        break;
    }
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        t1 = this._keys;
        if (index !== (index | 0))
          throw $.iae(index);
        if (index < 0 || index >= t1.length)
          throw $.ioore(index);
        t1 = t1[index];
      case 1:
        var index, t1, value, key;
        if (state0 === 1 || state0 === 0 && (t1 == null || t1 === $.CONSTANT5))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 1:
              state0 = 0;
              this._numberOfEntries = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
          }
        t1 = this._keys;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = key;
        t1 = this._values;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = value;
    }
  },
  operator$index$1: function(key) {
    var index, t1;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.operator$index$1$bailout1(1, index);
    if (index < 0)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout1: function(state0, index) {
    var t1;
    if ($.ltB(index, 0))
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$isEmpty: function() {
    return $.eq(this._numberOfEntries, 0);
  },
  get$length: function() {
    return this._numberOfEntries;
  },
  forEach$1: function(f) {
    var it, t1, t2, t3;
    it = $._HashMapImplIndexIterator$(this);
    for (; it.moveNext$0() === true;) {
      t1 = this._keys;
      t2 = it.get$current();
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t2 = t1[t2];
      t1 = this._values;
      t3 = it.get$current();
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      f.call$2(t2, t1[t3]);
    }
  },
  containsKey$1: function(key) {
    return !$.eqB(this._probeForLookup$1(key), -1);
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
    this._keys = $.List_List$fixedLength(8, null);
    this._values = $.List_List$fixedLength(8, null);
  },
  is$Map: function() {
    return true;
  }
};

$$._HashMapImplIterator = {"": "Object;",
  moveNext$0: function() {
    var t1, t2, length$, t3, newIndex, key;
    t1 = this._map;
    t2 = t1._keys;
    length$ = t2.length;
    t3 = this._index;
    if (t3 !== (t3 | 0))
      return this.moveNext$0$bailout0(1, length$, t3, t1);
    newIndex = t3 + 1;
    for (; newIndex < length$;) {
      if (newIndex < 0)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT5)) {
        this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t2, t1._values);
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = length$;
    this._liblib0$_current = null;
    return false;
  },
  moveNext$0$bailout0: function(state0, length$, t2, t1) {
    var newIndex, key;
    newIndex = $.getInterceptor$JSNumber(t2).operator$add$1(t2, 1);
    for (; $.ltB(newIndex, length$);) {
      t2 = t1._keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t2.length)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT5)) {
        this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t2, t1._values);
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = length$;
    this._liblib0$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$._HashMapImplIndexIterator = {"": "_HashMapImplIterator;_map,_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return index;
  }
};

$$._DeletedKeySentinel = {"": "Object;"};

$$._KeyValuePair = {"": "Object;key>,value="};

$$._LinkedHashMapImpl = {"": "Object;_list,_map",
  operator$indexSet$2: function(key, value) {
    var t1, t3;
    if (this._map.containsKey$1(key) === true) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.operator$indexSet$2$bailout0(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      this._list.addLast$1($._KeyValuePair$(key, value));
      t1 = this._map;
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
        return this.operator$indexSet$2$bailout0(2, t1, key);
      t3 = this._list.lastEntry$0();
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key] = t3;
    }
  },
  operator$indexSet$2$bailout0: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env2;
        value = env1;
        key = env0;
        break;
      case 2:
        key = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
      default:
        var t1, value, key, t3;
        if (state0 === 1 || state0 === 0 && this._map.containsKey$1(key) === true)
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              this._list.addLast$1($._KeyValuePair$(key, value));
              t1 = this._map;
            case 2:
              state0 = 0;
              t3 = this._list.lastEntry$0();
              $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, key, t3);
          }
    }
  },
  operator$index$1: function(key) {
    var t1, entry;
    t1 = this._map;
    entry = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key);
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  forEach$1: function(f) {
    this._list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
  },
  containsKey$1: function(key) {
    return this._map.containsKey$1(key);
  },
  get$length: function() {
    var t1 = this._map;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  clear$0: function() {
    var t1 = this._map;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    this._list.clear$0();
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _LinkedHashMapImpl$0: function() {
    this._map = $.HashMap_HashMap();
    this._list = $.DoubleLinkedQueue$();
  },
  is$Map: function() {
    return true;
  }
};

$$.Object = {"": ";",
  operator$eq$1: function(other) {
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.DoubleLinkedQueueEntry = {"": "Object;_previous=,_next=,_element",
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return this._previous._asNonSentinelEntry$0();
  },
  get$element: function() {
    return this._element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._element = e;
  }
};

$$._DoubleLinkedQueueEntrySentinel = {"": "DoubleLinkedQueueEntry;_previous,_next,_element",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  }
};

$$.DoubleLinkedQueue = {"": "Iterable;_sentinel",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  removeLast$0: function() {
    return this._sentinel._previous.remove$0();
  },
  lastEntry$0: function() {
    return this._sentinel.previousEntry$0();
  },
  get$isEmpty: function() {
    var t1 = this._sentinel;
    return t1._next === t1;
  },
  clear$0: function() {
    var t1 = this._sentinel;
    t1._next = t1;
    t1 = this._sentinel;
    t1._previous = t1;
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
  },
  is$Collection: function() {
    return true;
  }
};

$$._DoubleLinkedQueueIterator = {"": "Object;_sentinel,_currentEntry,_liblib0$_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null)
      return false;
    this._currentEntry = t1.get$_next();
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._liblib0$_current = null;
      this._sentinel = null;
      return false;
    }
    this._liblib0$_current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$._StringBufferImpl = {"": "Object;_buffer,_length",
  get$length: function() {
    return this._length;
  },
  get$isEmpty: function() {
    return $.eq(this._length, 0);
  },
  add$1: function(obj) {
    var str, t1;
    str = $.getInterceptor(obj).toString$0(obj);
    if (!(typeof str === "string"))
      throw $.$$throw($.ArgumentError$("toString() did not return a string"));
    if ($.CONSTANT0.get$isEmpty(str) === true)
      return;
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).add$1(t1, str);
    t1 = this._length;
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, t1, str);
    this._length = t1 + str.length;
  },
  add$1$bailout: function(state0, t1, str) {
    var t3 = str.length;
    this._length = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
  },
  clear$0: function() {
    this._buffer = $.List_List(0);
    this._length = 0;
  },
  toString$0: function() {
    var t1, result;
    t1 = this._buffer;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
      return "";
    t1 = this._buffer;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1)) {
      t1 = this._buffer;
      return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
    }
    result = $.Strings__toJsStringArray(this._buffer).join("");
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).add$1(t1, result);
    return result;
  },
  _StringBufferImpl$1: function(content$) {
    this.clear$0();
    this.add$1(content$);
  }
};

$$.ListIterator = {"": "Object;_liblib$_list,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition, t2, t3;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib$_list;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout(2, t1, t2, t3, nextPosition);
    if (nextPosition < t3) {
      this._current = t1.operator$index$1(nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._position = t2.get$length(t1);
    this._current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        nextPosition = env3;
        t3 = env2;
        t2 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        t1 = this._liblib$_list;
        t2 = $.getInterceptor$JSStringJSArray(t1);
        t3 = t2.get$length(t1);
      case 2:
        var t1, nextPosition, t2, t3;
        state0 = 0;
        if ($.ltB(nextPosition, t3)) {
          this._current = t1.operator$index$1(nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._position = t2.get$length(t1);
        this._current = null;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.ObjectInterceptor = {"": "Object;",
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  operator$indexSet$2: function(receiver, a0, a1) {
    return receiver.operator$indexSet$2(a0, a1);
  },
  get$length: function(receiver) {
    return receiver.get$length();
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  operator$and$1: function(receiver, a0) {
    return receiver.operator$and$1(a0);
  },
  clear$0: function(receiver) {
    return receiver.clear$0();
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  operator$index$1: function(receiver, a0) {
    return receiver.operator$index$1(a0);
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  operator$sub$1: function(receiver, a0) {
    return receiver.operator$sub$1(a0);
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  operator$add$1: function(receiver, a0) {
    return receiver.operator$add$1(a0);
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  operator$tdiv$1: function(receiver, a0) {
    return receiver.operator$tdiv$1(a0);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  operator$mod$1: function(receiver, a0) {
    return receiver.operator$mod$1(a0);
  },
  operator$mul$1: function(receiver, a0) {
    return receiver.operator$mul$1(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  is$bool: true
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.Collections_collectionToString(receiver);
  },
  get$iterator: function(receiver) {
    return $._ArrayIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  operator$index$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  operator$indexSet$2: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._ArrayIterator = {"": "Object;_liblib2$_list,_liblib2$_position,_liblib2$_current",
  get$current: function() {
    return this._liblib2$_current;
  },
  moveNext$0: function() {
    var t1, nextPosition, length$;
    t1 = this._liblib2$_position;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout2(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib2$_list;
    length$ = t1.length;
    if (nextPosition < length$) {
      this._liblib2$_position = nextPosition;
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib2$_current = t1[nextPosition];
      return true;
    }
    this._liblib2$_position = length$;
    this._liblib2$_current = null;
    return false;
  },
  moveNext$0$bailout2: function(state0, t1) {
    var nextPosition, length$;
    nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    t1 = this._liblib2$_list;
    length$ = t1.length;
    if ($.ltB(nextPosition, length$)) {
      this._liblib2$_position = nextPosition;
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib2$_current = t1[nextPosition];
      return true;
    }
    this._liblib2$_position = length$;
    this._liblib2$_current = null;
    return false;
  }
};

$$.JSNumber = {"": "Object;",
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  operator$add$1: function(receiver, other) {
    return receiver + other;
  },
  operator$sub$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  operator$mul$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  operator$mod$1: function(receiver, other) {
    var result;
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  operator$tdiv$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return this.truncate$0(receiver / other);
  },
  operator$and$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  }
};

$$.JSInt = {"": "JSNumber;"};

$$.JSDouble = {"": "JSNumber;"};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    if ($.ltB(startIndex, 0))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.gtB(startIndex, endIndex))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.gtB(endIndex, receiver.length))
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  operator$index$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  is$String: true
};

$$._TypedImageData = {"": "Object;data>,height>,width>", is$_TypedImageData: true,
  is$ImageData: function() {
    return true;
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_liblib1$_length,_liblib1$_position,_liblib1$_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._liblib1$_position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout1(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib1$_length;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout1(2, t1, nextPosition);
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout1(3, nextPosition, t1);
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib1$_current = t1[nextPosition];
      this._liblib1$_position = nextPosition;
      return true;
    }
    this._liblib1$_current = null;
    this._liblib1$_position = t1;
    return false;
  },
  moveNext$0$bailout1: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        nextPosition = env1;
        t1 = env0;
        break;
      case 3:
        t1 = env1;
        nextPosition = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._liblib1$_position;
      case 1:
        state0 = 0;
        nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        t1 = this._liblib1$_length;
      case 2:
        state0 = 0;
      case 3:
        var t1, nextPosition;
        if (state0 === 3 || state0 === 0 && $.ltB(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 3:
              state0 = 0;
              this._liblib1$_current = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, nextPosition);
              this._liblib1$_position = nextPosition;
              return true;
          }
        this._liblib1$_current = null;
        this._liblib1$_position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$._Random = {"": "Object;",
  nextInt$1: function(max) {
    if (max < 0)
      throw $.$$throw($.ArgumentError$("negative max: " + $.S(max)));
    if (max > 4294967295)
      max = 4294967295;
    return (Math.random() * max) >>> 0;
  }
};

$$.Array2d = {"": "ListBase;width>,height>,_source",
  get$length: function() {
    var t1 = this._source;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  operator$index$1: function(index) {
    var t1 = this._source;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout0(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout0: function(state0, t1, index) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  operator$indexSet$2: function(index, value) {
    var t1 = this._source;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
      return this.operator$indexSet$2$bailout(1, index, t1, value);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  operator$indexSet$2$bailout: function(state0, index, t1, value) {
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, index, value);
  },
  Array2d$wrap$2: function(width, source) {
    var t1, t2, t3;
    $.requireArgumentNotNull(width, "width");
    $.requireArgumentNotNull(source, "source");
    $.requireArgument($.ge(width, 0), "width", "width must be non-zero");
    t1 = this.height;
    t2 = $.eqB($.getInterceptor$JSNumber(width).operator$mul$1(width, t1), 0);
    t3 = this._source;
    if (t2)
      $.requireArgument($.eq($.getInterceptor$JSStringJSArray(t3).get$length(t3), 0), "width", "width must be greater than zero if the source is non-empty");
    else {
      t1 = $.getInterceptor$JSStringJSArray(t3);
      $.requireArgument($.gt(t1.get$length(t3), 0), "source", "if width is non-zero, source must be non-empty");
      t3 = t1.get$length(t3);
      $.requireArgument($.eq($.getInterceptor$JSNumber(t3).operator$mod$1(t3, width), 0), "width", "width must evenly divide the source");
    }
  }
};

$$.Enumerable = {"": "Iterable;",
  get$isEmpty: function() {
    return this.some$1(new $.Enumerable_isEmpty_anon()) !== true;
  },
  some$1: function(f) {
    var t1;
    $.requireArgumentNotNull(f, "f");
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      if (f.call$1(t1.get$current()) === true)
        return true;
    return false;
  },
  join$1: function(separator) {
    var sb, t1, t2, t3;
    sb = $.StringBuffer_StringBuffer("");
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this), t2 = $.getInterceptor$JSStringJSArray(sb); t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      if ($.gtB(t2.get$length(sb), 0))
        t2.add$1(sb, separator);
      t2.add$1(sb, t3);
    }
    return $.getInterceptor(sb).toString$0(sb);
  },
  join$0: function() {
    return this.join$1(", ");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toString$0: function() {
    return "[" + $.S(this.join$0()) + "]";
  }
};

$$.ListBase = {"": "Enumerable;",
  get$iterator: function() {
    return $.ListIterator$(this);
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  set$length: function(newLength) {
    throw $.$$throw($.UnsupportedError$("Cannot change the length of an unmodifiable list"));
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear an unmodifiable list"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$.DetailedArgumentError = {"": "Object;argument,details",
  get$message: function() {
    return "Illegal argument: \"" + $.S(this.argument) + "\" -- " + $.S(this.details);
  },
  toString$0: function() {
    return this.get$message();
  },
  DetailedArgumentError$2: function(argument, details) {
    $.requireArgumentNotNullOrEmpty(this.argument, "argument");
    $.requireArgumentNotNullOrEmpty(this.details, "details");
  }
};

$$.InvalidOperationError = {"": "Object;message"};

$$.NullArgumentError = {"": "DetailedArgumentError;argument,details"};

$$.Size = {"": "Object;width>,height>",
  operator$eq$1: function(other) {
    return !(other == null) && $.eqB(this.width, other.get$width()) && $.eqB(this.height, other.get$height());
  },
  get$area: function() {
    var t1, t2;
    t1 = this.width;
    t2 = this.height;
    return $.getInterceptor$JSNumber(t1).operator$mul$1(t1, t2);
  },
  isEmpty$0: function() {
    return $.eq(this.get$area(), 0);
  },
  get$isEmpty: function() {
    return new $.BoundClosure(this, "isEmpty$0");
  },
  scale$1: function(magnitude) {
    var t1, t2;
    t1 = this.width;
    t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, magnitude);
    t2 = this.height;
    return $.Size$(t1, $.getInterceptor$JSNumber(t2).operator$mul$1(t2, magnitude));
  },
  operator$mul$1: function(magnitude) {
    return this.scale$1(magnitude);
  },
  toString$0: function() {
    return "(" + $.S(this.width) + " x " + $.S(this.height) + ")";
  }
};

$$.main_anon = {"": "Closure;",
  call$0: function() {
    $._ctx = $.get$_canvas().get$context2d();
    window.requestAnimationFrame$1($._update);
  }
};

$$.Maps__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true) {
      t2 = this.result_1;
      $.getInterceptor$JSArray(t2).add$1(t2, ", ");
    }
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.Collections__emitObject(k, t1, t2);
    $.getInterceptor$JSArray(t1).add$1(t1, ": ");
    $.Collections__emitObject(v, t1, t2);
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.Enumerable_isEmpty_anon = {"": "Closure;",
  call$1: function(e) {
    return true;
  }
};

$$._LinkedHashMapImpl_forEach_anon = {"": "Closure;f_0",
  call$1: function(entry) {
    this.f_0.call$2(entry.get$key(), entry.get$value());
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    if ($.gtB(t1.i_1, 0)) {
      t2 = t1.sb_0;
      $.getInterceptor$JSArray(t2).add$1(t2, ", ");
    }
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, key);
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, ": ");
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    $.getInterceptor$JSArray(t2).add$1(t2, t3);
    t3 = t1.i_1;
    t1.i_1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1);
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.BoundClosure = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};
$.main = function() {
  var t1, t2, t3;
  t1 = $.CONSTANT.width;
  $.get$_canvas().set$width(t1);
  t2 = $.CONSTANT.height;
  $.get$_canvas().set$height(t2);
  t3 = $.S(t1) + "px";
  $.get$_canvas().get$style().set$width(t3);
  t3 = $.S(t2) + "px";
  $.get$_canvas().get$style().set$height(t3);
  window.setTimeout$2(new $.main_anon(), 0);
};

$._update = function(highResTime) {
  var t1, t2, i, firstValues, t3, t4, t5;
  if ($._values == null) {
    t1 = $._ctx;
    t2 = $.CONSTANT.width;
    $._data = t1.createImageData$2(t2, $.CONSTANT.height);
    $._values = $.Array2d$wrap(t2, $.Uint32Array_Uint32Array$fromBuffer($._data.get$data().get$buffer(), null, null));
    i = 0;
    while (true) {
      t1 = $._values;
      t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      if (typeof t1 !== "number")
        return $._update$bailout(1, t1, i);
      if (!(i < t1))
        break;
      t1 = $._values;
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
        return $._update$bailout(2, i, t1);
      if ($._botHelperRandom == null)
        $._botHelperRandom = $.Random_Random(null);
      t2 = $._botHelperRandom.nextInt$1(4294967296);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
      ++i;
    }
  }
  t1 = $._values;
  if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return $._update$bailout(3, t1);
  if (0 >= t1.length)
    throw $.ioore(0);
  firstValues = t1[0];
  if (typeof firstValues !== "number")
    return $._update$bailout(4, firstValues);
  i = 0;
  while (true) {
    t1 = $._values;
    t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof t1 !== "number")
      return $._update$bailout(5, i, firstValues, t1);
    if (!(i < t1))
      break;
    t1 = $._values;
    t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof t1 !== "number")
      return $._update$bailout(6, i, t1, firstValues);
    if (i < t1 - 1) {
      t1 = $._values;
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
        return $._update$bailout(7, i, t1, firstValues);
      t3 = i + 1;
      t4 = t1.length;
      if (t3 >= t4)
        throw $.ioore(t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return $._update$bailout(8, t3, i, t1, firstValues);
      t3 += 255;
      if (i >= t4)
        throw $.ioore(i);
      t1[i] = t3;
    }
    ++i;
  }
  t1 = $._values;
  if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return $._update$bailout(9, firstValues, t1);
  t3 = t1.length;
  t4 = t3 - 1;
  t5 = firstValues + 255;
  if (t4 < 0)
    throw $.ioore(t4);
  t1[t4] = t5;
  $._ctx.putImageData$3($._data, 0, 0);
  window.requestAnimationFrame$1($._update);
};

$._update$bailout = function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      i = env1;
      t1 = env0;
      break;
    case 2:
      t1 = env1;
      i = env0;
      break;
    case 3:
      t1 = env0;
      break;
    case 4:
      firstValues = env0;
      break;
    case 5:
      t1 = env2;
      firstValues = env1;
      i = env0;
      break;
    case 6:
      firstValues = env2;
      t1 = env1;
      i = env0;
      break;
    case 7:
      firstValues = env2;
      t1 = env1;
      i = env0;
      break;
    case 8:
      firstValues = env3;
      t1 = env2;
      i = env1;
      t3 = env0;
      break;
    case 9:
      t1 = env1;
      firstValues = env0;
      break;
    case 10:
      t1 = env2;
      firstValues = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      if (state0 === 2 || state0 === 1 || state0 === 0 && $._values == null)
        switch (state0) {
          case 0:
            t1 = $._ctx;
            t2 = $.CONSTANT.width;
            $._data = t1.createImageData$2(t2, $.CONSTANT.height);
            $._values = $.Array2d$wrap(t2, $.Uint32Array_Uint32Array$fromBuffer($._data.get$data().get$buffer(), null, null));
            i = 0;
          default:
            L0:
              while (true)
                switch (state0) {
                  case 0:
                    t1 = $._values;
                    t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
                  case 1:
                    state0 = 0;
                    if (!$.ltB(i, t1))
                      break L0;
                    t1 = $._values;
                  case 2:
                    state0 = 0;
                    if ($._botHelperRandom == null)
                      $._botHelperRandom = $.Random_Random(null);
                    t2 = $._botHelperRandom.nextInt$1(4294967296);
                    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, t2);
                    ++i;
                }
        }
      t1 = $._values;
    case 3:
      state0 = 0;
      firstValues = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
    case 4:
      state0 = 0;
      i = 0;
    case 5:
    case 6:
    case 7:
    case 8:
      L1:
        while (true)
          switch (state0) {
            case 0:
              t1 = $._values;
              t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
            case 5:
              state0 = 0;
              if (!$.ltB(i, t1))
                break L1;
              t1 = $._values;
              t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
            case 6:
              state0 = 0;
            default:
              if (state0 === 8 || state0 === 7 || state0 === 0 && $.ltB(i, $.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1)))
                switch (state0) {
                  case 0:
                    t1 = $._values;
                  case 7:
                    state0 = 0;
                    t3 = i + 1;
                    t3 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t3);
                  case 8:
                    state0 = 0;
                    t3 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 255);
                    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, t3);
                }
              ++i;
          }
      t1 = $._values;
    case 9:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    case 10:
      var t1, t2, i, firstValues, t3, t5;
      state0 = 0;
      t3 = $.getInterceptor$JSNumber(t3).operator$sub$1(t3, 1);
      t5 = $.getInterceptor$JSNumber(firstValues).operator$add$1(firstValues, 255);
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t3, t5);
      $._ctx.putImageData$3($._data, 0, 0);
      window.requestAnimationFrame$1($._update);
  }
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string;
  if (typeof strings !== "object" || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  if (!strings.constructor === Array)
    strings = $.List_List$from(strings);
  length$ = strings.length;
  for (i = 0; i < length$; ++i) {
    if (i >= strings.length)
      throw $.ioore(i);
    string = strings[i];
    if (!(typeof string === "string"))
      throw $.$$throw($.ArgumentError$(string));
  }
  return strings;
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env2;
      t1 = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      if (!(!(strings == null) && strings.constructor === Array))
        strings = $.List_List$from(strings);
      t1 = $.getInterceptor$JSStringJSArray(strings);
      length$ = t1.get$length(strings);
    case 2:
      var strings, t1, length$, i, string;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        string = t1.operator$index$1(strings, i);
        if (!(typeof string === "string"))
          throw $.$$throw($.ArgumentError$(string));
      }
      return strings;
  }
};

$._ArrayIterator$ = function(_list) {
  return new $._ArrayIterator(_list, -1, null);
};

$.gt = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a > b : $.gt$slow(a, b);
};

$.ge = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a >= b : $.ge$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a < b : $.lt$slow(a, b) === true;
};

$.checkNumbers = function(a, b) {
  if (typeof a === "number")
    if (typeof b === "number")
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash, t1;
  hash = object.$identityHash;
  if (hash == null) {
    t1 = $.Primitives_hashCodeSeed;
    hash = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled, t1;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      name$ = decompiled;
  }
  t1 = $.getInterceptor$JSString(name$);
  return t1.charCodeAt$1(name$, 0) === 36 ? t1.substring$1(name$, 1) : name$;
};

$.Primitives_newFixedList = function(length$) {
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT1;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  var t1 = this;
  return $.getInterceptor(t1).toString$0(t1);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === "string")
      if ($.CONSTANT0.endsWith$1(message, "is null") === true || $.CONSTANT0.endsWith$1(message, "is undefined") === true || $.CONSTANT0.endsWith$1(message, "is null or undefined") === true || $.CONSTANT0.endsWith$1(message, "of undefined") === true || $.CONSTANT0.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === "string" ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, t1, key;
  iterator = $.CONSTANT2.get$iterator(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (t1 = $.getInterceptor$JSArray(result); iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    t1.operator$indexSet$2(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return new $.invokeClosure_anon(closure).call$0();
  else if ($.eqB(numberOfArguments, 1))
    return new $.invokeClosure_anon0(closure, arg1).call$0();
  else if ($.eqB(numberOfArguments, 2))
    return new $.invokeClosure_anon1(closure, arg1, arg2).call$0();
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  $;
  function$ = function($0, $1) { return $.invokeClosure.call$5(closure, $, arity, $0, $1); };
  closure.$identity = function$;
  return function$;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var name$ = tag;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  if (name$ === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === "string")
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function(function$, object, property) {
  return function$.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT6));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT6)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, t2, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (isMultiLine === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "m");
  }
  if (isCaseSensitive !== true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, t1, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer_StringBuffer("");
      length$ = receiver.length;
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        t1.add$1(result, receiver[i]);
        t1.add$1(result, to);
      }
      return t1.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer("");
  $.Collections__emitCollection(c, result, $.List_List(0));
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.is$List());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.getInterceptor$JSArray(c).get$iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = typeof o === "object" && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}";
      $.getInterceptor$JSArray(result).add$1(result, t1);
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor$JSArray(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor$JSArray(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(c).get$iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer("");
  $.Maps__emitMap(m, result, $.List_List(0));
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  t1 = new $.Maps__emitMap_anon(t1, result, visiting);
  $.getInterceptor$JSArray(m).forEach$1(m, t1);
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.ListIterator$ = function(_list) {
  return new $.ListIterator(_list, -1, null);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === "string") {
    t1 = $.CONSTANT0.replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.List_List = function(length$) {
  if (!(typeof length$ === "number" && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length$) + "."));
  return new Array(length$);
};

$.List_List$fixedLength = function(length$, fill) {
  var result, t1, i;
  if (!(typeof length$ === "number" && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length$) + "."));
  result = $.Primitives_newFixedList(length$);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.is$JavaScriptIndexingBehavior())
    return $.List_List$fixedLength$bailout(1, length$, fill, result);
  if (!$.eqB(length$, 0) && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, length$, fill, result) {
  var i;
  if (!$.eqB(length$, 0) && !(fill == null))
    for (i = 0; i < result.length; ++i)
      $.CONSTANT2.operator$indexSet$2(result, i, fill);
  return result;
};

$.List_List$from = function(other) {
  var list, t1;
  list = $.List_List(0);
  for (t1 = $.getInterceptor$JSArray(other).get$iterator(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  return list;
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT4.operator$tdiv$1(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  var t1, t2;
  t1 = $.getInterceptor$JSNumber(currentProbe).operator$add$1(currentProbe, numberOfProbes);
  t2 = $.getInterceptor$JSNumber(length$).operator$sub$1(length$, 1);
  return $.getInterceptor$JSNumber(t1).operator$and$1(t1, t2);
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel) {
  return new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.query = function(selector) {
  return document.query$1(selector);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$.Uint32Array_Uint32Array$fromBuffer = function(buffer, byteOffset, length$) {
  return $._TypedArrayFactoryProvider_createUint32Array_fromBuffer(buffer, byteOffset, length$);
};

$._TypedImageData$ = function(data, height, width) {
  return new $._TypedImageData(data, height, width);
};

$._convertNativeToDart_ImageData = function(nativeImageData) {
  0;
  if (typeof nativeImageData === "object" && nativeImageData !== null && nativeImageData.is$ImageData())
    return nativeImageData;
  return $._TypedImageData$(nativeImageData.data, nativeImageData.height, nativeImageData.width);
};

$._convertDartToNative_ImageData = function(imageData) {
  if (typeof imageData === "object" && imageData !== null && !!imageData.is$_TypedImageData)
    return {data: imageData.data, height: imageData.height, width: imageData.width};
  return imageData;
};

$._TypedArrayFactoryProvider_createUint32Array_fromBuffer = function(buffer, byteOffset, length$) {
  if (length$ == null)
    return new Uint32Array(buffer, byteOffset);
  return new Uint32Array(buffer, byteOffset, length$);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.getInterceptor$JSStringJSArray(array).get$length(array), -1, null);
};

$.Random_Random = function(seed) {
  return $.CONSTANT3;
};

$.Array2d$wrap = function(width, source) {
  var t1;
  if (!(width == null) && $.gtB(width, 0) && !(source == null)) {
    t1 = $.getInterceptor$JSStringJSArray(source).get$length(source);
    t1 = $.getInterceptor$JSNumber(t1).operator$tdiv$1(t1, width);
  } else
    t1 = 0;
  t1 = new $.Array2d(width, t1, source);
  t1.Array2d$wrap$2(width, source);
  return t1;
};

$.DetailedArgumentError$ = function(argument, details) {
  var t1 = new $.DetailedArgumentError(argument, details);
  t1.DetailedArgumentError$2(argument, details);
  return t1;
};

$.InvalidOperationError$ = function(message) {
  return new $.InvalidOperationError(message);
};

$.NullArgumentError$ = function(argument) {
  var t1 = new $.NullArgumentError(argument, "cannot be null");
  t1.DetailedArgumentError$2(argument, "cannot be null");
  return t1;
};

$.Size$ = function(width, height) {
  return new $.Size(width, height);
};

$.requireArgument = function(truth, argName, message) {
  $._metaRequireArgumentNotNullOrEmpty(argName);
  if (truth !== true)
    throw $.$$throw($.DetailedArgumentError$(argName, message));
};

$.requireArgumentNotNull = function(argument, argName) {
  $._metaRequireArgumentNotNullOrEmpty(argName);
  if (argument == null)
    throw $.$$throw($.NullArgumentError$(argName));
};

$.requireArgumentNotNullOrEmpty = function(argument, argName) {
  $._metaRequireArgumentNotNullOrEmpty(argName);
  if (argument == null)
    throw $.$$throw($.NullArgumentError$(argName));
  else if ($.eqB($.getInterceptor$JSStringJSArray(argument).get$length(argument), 0))
    throw $.$$throw($.DetailedArgumentError$(argName, "cannot be an empty string"));
};

$._metaRequireArgumentNotNullOrEmpty = function(argName) {
  if (argName == null || $.eqB($.getInterceptor$JSStringJSArray(argName).get$length(argName), 0))
    throw $.$$throw($.InvalidOperationError$("That's just sad. Give me a good argName"));
};

$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$._update.call$1 = $._update;
$._update.$name = "_update";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
Isolate.$finishClasses($$);
$$ = {};
$.String = {builtin$cls: 'String'};
$.$int = {builtin$cls: '$int'};
$.Node = {builtin$cls: 'Node'};
$.CONSTANT4 = new Isolate.$isolateProperties.JSInt();
$.CONSTANT0 = new Isolate.$isolateProperties.JSString();
$.CONSTANT1 = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT3 = new Isolate.$isolateProperties._Random();
$.CONSTANT5 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT = new Isolate.$isolateProperties.Size(100, 100);
$.CONSTANT2 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT6 = new Isolate.$isolateProperties.Object();
$._getTypeNameOf = null;
$._size = Isolate.$isolateProperties.CONSTANT;
$._ctx = null;
$._data = null;
$._botHelperRandom = null;
$._values = null;
$.Primitives_hashCodeSeed = 0;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT5;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, '_canvas', '_canvas', 'get$_canvas', function() {
  return $.query("canvas");
});
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {        if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  is$JavaScriptIndexingBehavior: function() {
    return false;
  },
  is$Collection: function() {
    return false;
  },
  is$List: function() {
    return false;
  },
  is$Map: function() {
    return false;
  },
  is$ImageData: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  }
});

$.$defineNativeClass("HTMLAnchorElement", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("ArrayBufferView", {"": "buffer>"});

$.$defineNativeClass("HTMLButtonElement", {"": "value="});

$.$defineNativeClass("HTMLCanvasElement", {"": "height=,width=",
  getContext$1: function(contextId) {
    return this.getContext(contextId);
  },
  get$context2d: function() {
    return this.getContext$1("2d");
  }
});

$.$defineNativeClass("CanvasRenderingContext2D", {
  createImageData$2: function(imagedata_OR_sw, sh) {
    var t1 = $ === sh;
    if (t1)
      sh = null;
    if ((typeof imagedata_OR_sw === "object" && imagedata_OR_sw !== null && imagedata_OR_sw.is$ImageData() || imagedata_OR_sw == null) && t1)
      return $._convertNativeToDart_ImageData(this._createImageData_1$1($._convertDartToNative_ImageData(imagedata_OR_sw)));
    if (typeof imagedata_OR_sw === "number" || imagedata_OR_sw == null)
      return $._convertNativeToDart_ImageData(this._createImageData_2$2(imagedata_OR_sw, sh));
    throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
  },
  _createImageData_1$1: function(imagedata) {
    return this.createImageData(imagedata);
  },
  _createImageData_2$2: function(sw, sh) {
    return this.createImageData(sw,sh);
  },
  putImageData$7: function(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
    var t1, t2, t3, t4;
    t1 = $ === dirtyX;
    if (t1)
      dirtyX = null;
    t2 = $ === dirtyY;
    if (t2)
      dirtyY = null;
    t3 = $ === dirtyWidth;
    if (t3)
      dirtyWidth = null;
    t4 = $ === dirtyHeight;
    if (t4)
      dirtyHeight = null;
    if (t1 && t2 && t3 && t4) {
      this._putImageData_1$3($._convertDartToNative_ImageData(imagedata), dx, dy);
      return;
    }
    this._putImageData_2$7($._convertDartToNative_ImageData(imagedata), dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);
    return;
  },
  putImageData$3: function(imagedata, dx, dy) {
    return this.putImageData$7(imagedata, dx, dy, $, $, $, $);
  },
  _putImageData_1$3: function(imagedata, dx, dy) {
    return this.putImageData(imagedata,dx,dy);
  },
  _putImageData_2$7: function(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
    return this.putImageData(imagedata,dx,dy,dirtyX,dirtyY,dirtyWidth,dirtyHeight);
  }
});

$.$defineNativeClass("CharacterData", {"": "data>,length>",
  remove$0: function() {
    return this.remove();
  }
});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  _getPropertyValue$1: function(propertyName) {
    return this.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(propertyName) {
    var propValue = this._getPropertyValue$1(propertyName);
    return !(propValue == null) ? propValue : "";
  },
  setProperty$3: function(propertyName, value, priority) {
    this.setProperty(propertyName, value, priority);
    if (!!this.setAttribute)
      this.setAttribute(propertyName, value);
  },
  get$clear: function() {
    return this.getPropertyValue$1("clear");
  },
  clear$0: function() {
    return this.get$clear().call$0();
  },
  get$height: function() {
    return this.getPropertyValue$1("height");
  },
  set$height: function(value) {
    this.setProperty$3("height", value, "");
  },
  get$width: function() {
    return this.getPropertyValue$1("width");
  },
  set$width: function(value) {
    this.setProperty$3("width", value, "");
  }
});

$.$defineNativeClass("Document", {
  $$dom_getElementById$1: function(elementId) {
    return this.getElementById(elementId);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors) === true)
      return this.$$dom_getElementById$1($.CONSTANT0.substring$1(selectors, 1));
    return this.$$dom_querySelector$1(selectors);
  }
});

$.$defineNativeClass("DocumentFragment", {
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  get$style: function() {
    return $.Element_Element$tag("div").get$style();
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "style>",
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height=,width="});

$.$defineNativeClass("EventException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("FileException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>"});

$.$defineNativeClass("HTMLCollection", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height=,width="});

$.$defineNativeClass("ImageData", {"": "data>,height>,width>",
  is$ImageData: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLImageElement", {"": "height=,width="});

$.$defineNativeClass("HTMLInputElement", {"": "height=,pattern>,value=,width="});

$.$defineNativeClass("HTMLLIElement", {"": "value="});

$.$defineNativeClass("HTMLMeterElement", {"": "value="});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Node", {
  remove$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$0")) {
      var t1 = this.parentNode;
      if (!(t1 == null))
        t1.$$dom_removeChild$1(this);
    } else
      return Object.prototype.remove$0.call(this);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLObjectElement", {"": "data>,height=,width="});

$.$defineNativeClass("HTMLOptionElement", {"": "value="});

$.$defineNativeClass("HTMLOutputElement", {"": "value="});

$.$defineNativeClass("HTMLParamElement", {"": "value="});

$.$defineNativeClass("ProcessingInstruction", {"": "data>"});

$.$defineNativeClass("HTMLProgressElement", {"": "value="});

$.$defineNativeClass("RadioNodeList", {"": "value="});

$.$defineNativeClass("RangeException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "length=,value="});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return !(this.$$dom_getItem$1(key) == null);
  },
  operator$index$1: function(key) {
    return this.$$dom_getItem$1(key);
  },
  operator$indexSet$2: function(key, value) {
    this.$$dom_setItem$2(key, value);
  },
  clear$0: function() {
    return this.$$dom_clear$0();
  },
  forEach$1: function(f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(i);
      if (key == null)
        return;
      f.call$2(key, this.operator$index$1(key));
    }
  },
  get$length: function() {
    return this.length;
  },
  get$isEmpty: function() {
    return this.$$dom_key$1(0) == null;
  },
  $$dom_clear$0: function() {
    return this.clear();
  },
  $$dom_getItem$1: function(key) {
    return this.getItem(key);
  },
  $$dom_key$1: function(index) {
    return this.key(index);
  },
  $$dom_setItem$2: function(key, data) {
    return this.setItem(key,data);
  },
  is$Map: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLTextAreaElement", {"": "value="});

$.$defineNativeClass("Uint32Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8Array", {
  get$length: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this);
  },
  operator$index$1: function(index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("operator$index$1")) {
      return this[index];
    } else
      return Object.prototype.operator$index$1.call(this, index);
  },
  operator$indexSet$2: function(index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("operator$indexSet$2")) {
      this[index] = value;
    } else
      return Object.prototype.operator$indexSet$2.call(this, index, value);
  },
  get$iterator: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this);
    } else
      return Object.prototype.get$iterator.call(this);
  },
  forEach$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, f);
  },
  get$isEmpty: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
    } else
      return Object.prototype.get$isEmpty.call(this);
  },
  add$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, value);
  },
  addLast$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addLast$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addLast$1.call(this, value);
  },
  set$length: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$length")) {
      throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
    } else
      return Object.prototype.set$length.call(this, value);
  },
  clear$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("clear$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
    } else
      return Object.prototype.clear$0.call(this);
  },
  removeLast$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height=,width="});

$.$defineNativeClass("DOMWindow", {
  requestAnimationFrame$1: function(callback) {
    this._ensureRequestAnimationFrame$0();
    return this._requestAnimationFrame$1(callback);
  },
  _requestAnimationFrame$1: function(callback) {
    return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function() {
    if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
  },
  setTimeout$2: function(handler, timeout) {
    return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
  }
});

$.$defineNativeClass("XPathException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFECompositeElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEFloodElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEImageElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEMergeElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFETileElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFilterElement", {"": "height>,width>"});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height>,width>"});

$.$defineNativeClass("SVGImageElement", {"": "height>,width>"});

$.$defineNativeClass("SVGMaskElement", {"": "height>,width>"});

$.$defineNativeClass("SVGPatternElement", {"": "height>,width>"});

$.$defineNativeClass("SVGRectElement", {"": "height>,width>"});

$.$defineNativeClass("SVGException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height>,width>"});

$.$defineNativeClass("SVGUseElement", {"": "height>,width>"});

// 69 dynamic classes.
// 194 classes
// 17 !leaf
(function() {
  var v0_Uint8Array = "Uint8Array|Uint8ClampedArray", v1_Element = "Element|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLMediaElement|HTMLVideoElement|HTMLAudioElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement|SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGClipPathElement|SVGCursorElement|SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEDiffuseLightingElement|SVGDefsElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEConvolveMatrixElement|SVGFEFloodElement|SVGFEImageElement|SVGFEMergeNodeElement|SVGFEDropShadowElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeElement|SVGFEGaussianBlurElement|SVGFESpotLightElement|SVGFETileElement|SVGFESpecularLightingElement|SVGFilterElement|SVGFontFaceElement|SVGFETurbulenceElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGFEPointLightElement|SVGFontFaceFormatElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGGlyphElement|SVGImageElement|SVGLineElement|SVGGElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGFontElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement|SVGUseElement|SVGCircleElement|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement", v2_DocumentFragment = "DocumentFragment|ShadowRoot", v3_CharacterData = "CharacterData|Text|CDATASection|Comment", v4_Document = "Document|SVGDocument|HTMLDocument";
  $.dynamicSetMetadata([["Uint8Array", v0_Uint8Array], ["ArrayBufferView", [v0_Uint8Array, "ArrayBufferView|Uint32Array"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["CharacterData", v3_CharacterData], ["Document", v4_Document], ["DocumentFragment", v2_DocumentFragment], ["Element", v1_Element], ["Node", [v1_Element, v2_DocumentFragment, v3_CharacterData, v4_Document, "Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction"].join("|")], ["NodeList", "NodeList|RadioNodeList"]]);
})();


//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.main(); });
      } else {
        $.main();
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.main(); });
  } else {
    $.main();
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=fluid_demo.dart.js.map