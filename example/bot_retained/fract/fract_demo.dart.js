// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Bound closures
$$.Closure$wrapException = {"": "Closure;call$1,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

$$.Closure$callDartFunctionWith1Arg = {"": "Closure;call$2,$name"};

(function (reflectionData) {
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = {};
  if (!init.mangledGlobalNames) init.mangledGlobalNames = {};
  if (!init.statics) init.statics = {};
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var descriptor = data[3];
    var isRoot = !!data[4];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (typeof element === "function") {
          $[previousProperty = property] = element;
          functions.push(property);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = newDesc;
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot]);
  }
})([
["_interceptors", "dart:_interceptors", , {
getInterceptor: function(object) {
  return $.getInterceptor(object);
},

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
},

setDispatchProperty: function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return $.C_UnknownJavaScriptObject;
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
},

initializeDispatchProperty: function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

initializeDispatchProperty$bailout: function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  toString$0: function(receiver) {
    return $.Primitives_objectToString(receiver);
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  }
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  }
},

JavaScriptObject: {"": "Interceptor;"},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  join$1: function(receiver, separator) {
    var t1, list, i, t2;
    t1 = receiver.length;
    list = $.List_List(t1);
    for (i = 0; i < receiver.length; ++i) {
      t2 = $.S(receiver[i]);
      if (i >= t1)
        throw $.ioore(i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  $isList: true
},

JSMutableArray: {"": "JSArray;",
  $asJSArray: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;"},

JSNumber: {"": "num/Interceptor;",
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;", $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver.charCodeAt(index);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression(new $.ArgumentError(endIndex));
    if (startIndex < 0)
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if (endIndex == null)
      throw $.iae(endIndex);
    if (startIndex > endIndex)
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if (endIndex > receiver.length)
      throw $.wrapException(new $.RangeError("value " + endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  $isString: true
}}],
["_js_helper", "dart:_js_helper", , {
S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException(new $.ArgumentError(value));
  return res;
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback($.getInterceptor(object));
  if ($.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = $.getRuntimeTypeInfo(object);
  return $.S($name) + $.joinArguments(t1, 0);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

iae: function(argument) {
  throw $.wrapException(new $.ArgumentError(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.iae(index);
  throw $.wrapException(new $.RangeError("value " + $.S(index)));
},

wrapException: function(ex) {
  var wrapper = $.DartError$(ex == null ? new $.NullThrownError() : ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return new $.invokeClosure_closure(closure).call$0();
  else if (t1.$eq(numberOfArguments, 1))
    return new $.invokeClosure_closure0(closure, arg1).call$0();
  else if (t1.$eq(numberOfArguments, 2))
    return new $.invokeClosure_closure1(closure, arg1, arg2).call$0();
  else
    throw $.wrapException(new $._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw $.wrapException(new $.CyclicInitializationError("Cyclic initialization for static " + $.S(staticName)));
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return type[0].builtin$cls + $.joinArguments(type, 1);
  else if (typeof type == "function")
    return type.builtin$cls;
  else
    return;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = $.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

typeNameInChrome: function(obj) {
  return obj.constructor.name;
},

typeNameInSafari: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  var getTagFunction = $.getBaseFunctionForTypeNameOf();
  if (typeof dartExperimentalFixupGetTag == "function")
    return $.applyExperimentalFixup(dartExperimentalFixupGetTag, getTagFunction);
  return getTagFunction;
},

getBaseFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox$closure;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
},

applyExperimentalFixup: function(fixupJSFunction, originalGetTagDartFunction) {
  return new $.applyExperimentalFixup_newGetTagDartFunction(fixupJSFunction((function(invoke, closure){return function(arg){ return invoke(closure, arg); };})($.callDartFunctionWith1Arg$closure.call$2, originalGetTagDartFunction)));
},

callDartFunctionWith1Arg: function(fn, arg) {
  return fn.call$1(arg);
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.get$getTypeNameOf().call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  tag = $.get$getTypeNameOf().call$1(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

DartError: {"": "Object;",
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.stack == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.stack);
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper$closure.call$0;
  },
  static: {
DartError$: function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
},

DartError_toStringWrapper: function() {
  return $.toString$0(this);
}}

},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

Null: {"": "Object;"},

applyExperimentalFixup_newGetTagDartFunction: {"": "Closure;newGetTagJSFunction_0",
  call$1: function(object) {
    return this.newGetTagJSFunction_0(object);
  }
}}],
["bot", "package:bot/bot.dart", , {
_metaRequireArgumentNotNullOrEmpty: function(argName) {
  if (argName.length === 0)
    throw $.wrapException(new $.InvalidOperationError("That's just sad. Give me a good argName"));
},

DetailedArgumentError: {"": "ArgumentError;",
  get$message: function(_) {
    return "Illegal argument: \"" + this.argument + "\" -- " + this.details;
  },
  toString$0: function(_) {
    return "Illegal argument: \"" + this.argument + "\" -- " + this.details;
  },
  DetailedArgumentError$2: function(argument, details) {
    if (this.argument.length === 0)
      throw $.wrapException(new $.InvalidOperationError("That's just sad. Give me a valid argument"));
    if (this.details.length === 0)
      throw $.wrapException(new $.InvalidOperationError("That's just sad. I need details!"));
  }
},

InvalidOperationError: {"": "Object;message"},

NullArgumentError: {"": "DetailedArgumentError;argument,details,message"},

AffineTransform: {"": "Object;_scX,_shY,_shX,_scY,_tX,_tY",
  scale$2: function(_, sx, sy) {
    this._scX = $.$mul$n(this._scX, sx);
    this._shY = $.$mul$n(this._shY, sx);
    this._shX = $.$mul$n(this._shX, sy);
    this._scY = $.$mul$n(this._scY, sy);
    return this;
  },
  concatenate$1: function(tx) {
    var m0, m1, t1, t2, t3;
    m0 = this._scX;
    m1 = this._shX;
    this._scX = $.$add$ns($.$mul$n(tx._scX, m0), $.$mul$n(tx._shY, m1));
    this._shX = $.$add$ns($.$mul$n(tx._shX, m0), $.$mul$n(tx._scY, m1));
    t1 = this._tX;
    t2 = tx._tX;
    if (typeof m0 !== "number")
      throw $.iae(m0);
    t3 = tx._tY;
    if (typeof m1 !== "number")
      throw $.iae(m1);
    this._tX = t1 + (t2 * m0 + t3 * m1);
    m0 = this._shY;
    m1 = this._scY;
    this._shY = $.$add$ns($.$mul$n(tx._scX, m0), $.$mul$n(tx._shY, m1));
    this._scY = $.$add$ns($.$mul$n(tx._shX, m0), $.$mul$n(tx._scY, m1));
    t3 = this._tY;
    t2 = tx._tX;
    if (typeof m0 !== "number")
      throw $.iae(m0);
    t1 = tx._tY;
    if (typeof m1 !== "number")
      throw $.iae(m1);
    this._tY = t3 + (t2 * m0 + t1 * m1);
    return this;
  },
  translate$2: function(_, dx, dy) {
    var t1, t2, t3;
    t1 = this._tX;
    t2 = this._scX;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = this._shX;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    this._tX = t1 + (dx * t2 + dy * t3);
    t3 = this._tY;
    t2 = this._shY;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t1 = this._scY;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this._tY = t3 + (dx * t2 + dy * t1);
    return this;
  },
  setToRotation$3: function(theta, x, y) {
    var cos, sin;
    cos = Math.cos(theta);
    sin = Math.sin(theta);
    return this.setTransform$6(this, cos, sin, -sin, cos, x - x * cos + y * sin, y - x * sin - y * cos);
  },
  setTransform$6: function(_, m00, m10, m01, m11, m02, m12) {
    this._scX = m00;
    this._shY = m10;
    this._shX = m01;
    this._scY = m11;
    this._tX = m02;
    this._tY = m12;
    return this;
  },
  $eq: function(_, other) {
    var t1 = other == null;
    if (t1)
      return false;
    if (!t1)
      if ($.$eq(this._scX, other.get$_scX()))
        if ($.$eq(this._shX, other.get$_shX()))
          other.get$_tX();
    return false;
  },
  toString$0: function(_) {
    return $.JSArray_methods.join$1([this._scX, this._shY, this._shX, this._scY, this._tX, this._tY], ", ");
  },
  static: {
AffineTransform$: function(scaleX, shearY, shearX, scaleY, translateX, translateY) {
  return new $.AffineTransform(scaleX, shearY, shearX, scaleY, translateX, translateY);
}}

}}],
["bot_html", "package:bot_web/bot_html.dart", , {
CanvasUtil_transform: function(ctx, tx) {
  var t1;
  $._metaRequireArgumentNotNullOrEmpty("ctx");
  if (ctx == null) {
    t1 = new $.NullArgumentError("ctx", "cannot be null", null);
    t1.DetailedArgumentError$2("ctx", "cannot be null");
    $.throwExpression(t1);
  }
  $._metaRequireArgumentNotNullOrEmpty("tx");
  ctx.transform(tx._scX, tx._shY, tx._shX, tx._scY, tx._tX, tx._tY);
}}],
["dart._collection.dev", "dart:_collection-dev", , {
IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw $.ioore(i);
    if (t1[i] === iterable)
      return $.S(leftDelimiter) + "..." + $.S(rightDelimiter);
  }
  result = $.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
  }
  return result.get$_contents();
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  moveNext$0: function() {
    var t1, $length, t2;
    t1 = this._iterable;
    $length = t1.length;
    if (this._length !== $length)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t2 = this._index;
    if (t2 >= $length) {
      this._current = null;
      return false;
    }
    if (t2 < 0)
      throw $.ioore(t2);
    this._current = t1[t2];
    this._index = this._index + 1;
    return true;
  }
}}],
["dart.core", "dart:core", , {
Error_safeToString: function(object) {
  if (false)
    return $.JSArray_methods.toString$0(object);
  return $.Primitives_objectToString(object);
},

List_List: function($length) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
},

Error: {"": "Object;"},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message>",
  toString$0: function(_) {
    if (this.get$message(this) != null)
      return "Illegal argument(s): " + $.S(this.get$message(this));
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(this.modifiedObject)) + ".";
  }
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    return "Exception: " + this.message;
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  toString$0: function(_) {
    return $.Primitives_objectToString(this);
  }
},

StringBuffer: {"": "Object;_contents<",
  get$isEmpty: function(_) {
    return this._contents.length === 0;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    if (typeof separator !== "string")
      return this.writeAll$2$bailout(1, objects, separator);
    iterator = $.get$iterator$a(objects);
    if (!iterator.moveNext$0())
      return;
    if ($.JSString_methods.get$isEmpty(separator))
      do {
        str = iterator._current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator._current);
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator._current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  writeAll$2$bailout: function(state0, objects, separator) {
    var iterator, str, t1;
    iterator = $.get$iterator$a(objects);
    if (!iterator.moveNext$0())
      return;
    if ($.get$isEmpty$as(separator))
      do {
        str = iterator._current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator._current);
      for (t1 = typeof separator === "string"; iterator.moveNext$0();) {
        str = t1 ? separator : $.S(separator);
        this._contents = this._contents + str;
        str = iterator._current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

}}],
["dart.dom.html", "dart:html", , {
_HTMLElement: {"": "Element;"},

AnchorElement: {"": "_HTMLElement;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

CanvasElement: {"": "_HTMLElement;",
  get$context2D: function(receiver) {
    return receiver.getContext("2d");
  }
},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

Element: {"": "Node;",
  toString$0: function(receiver) {
    return receiver.localName;
  }
},

EventTarget: {"": "Interceptor;"},

FileException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

Node: {"": "EventTarget;",
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? $.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  }
}}],
["fract_demo.dart", "fract_demo.dart", , {
main: function() {
  var ctx, tx;
  ctx = $.get$context2D$x(document.querySelector("#content"));
  tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  tx.scale$2(tx, 200, 200);
  tx.translate$2(tx, 0, 1.5);
  tx.concatenate$1($.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(-1.5707963267948966, 2, 0));
  $.CanvasUtil_transform(ctx, tx);
  ctx.lineWidth = 0.01;
  ctx.strokeStyle = "black";
  ctx.beginPath();
  $.drawBranch(ctx, 12);
  ctx.stroke();
},

drawBranch: function(ctx, levels) {
  var rightTx, t1;
  if (typeof levels !== "number")
    return $.drawBranch$bailout(1, ctx, levels);
  if (levels === 0)
    return;
  ctx.moveTo(0, 0);
  ctx.lineTo(1, 0);
  ctx.save();
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(rightTx, 1, 0);
  rightTx.scale$2(rightTx, 0.62, 0.62);
  rightTx.concatenate$1($.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(1.0471975511965976, 0, 0));
  $.CanvasUtil_transform(ctx, rightTx);
  t1 = levels - 1;
  $.drawBranch(ctx, t1);
  ctx.restore();
  ctx.save();
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(rightTx, 1, 0);
  rightTx.scale$2(rightTx, 0.62, 0.62);
  rightTx.concatenate$1($.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(-1.0471975511965976, 0, 0));
  $.CanvasUtil_transform(ctx, rightTx);
  $.drawBranch(ctx, t1);
  ctx.restore();
},

drawBranch$bailout: function(state0, ctx, levels) {
  var t1, rightTx;
  t1 = $.getInterceptor(levels);
  if (t1.$eq(levels, 0))
    return;
  ctx.moveTo(0, 0);
  ctx.lineTo(1, 0);
  ctx.save();
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(rightTx, 1, 0);
  rightTx.scale$2(rightTx, 0.62, 0.62);
  rightTx.concatenate$1($.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(1.0471975511965976, 0, 0));
  $.CanvasUtil_transform(ctx, rightTx);
  $.drawBranch(ctx, t1.$sub(levels, 1));
  ctx.restore();
  ctx.save();
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(rightTx, 1, 0);
  rightTx.scale$2(rightTx, 0.62, 0.62);
  rightTx.concatenate$1($.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(-1.0471975511965976, 0, 0));
  $.CanvasUtil_transform(ctx, rightTx);
  $.drawBranch(ctx, t1.$sub(levels, 1));
  ctx.restore();
}},
1],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$.callDartFunctionWith1Arg$closure = new $.Closure$callDartFunctionWith1Arg($.callDartFunctionWith1Arg, "callDartFunctionWith1Arg$closure");
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$a = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$as = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.C_UnknownJavaScriptObject = new $.UnknownJavaScriptObject();
$.JSArray_methods = $.JSArray.prototype;
$.JSString_methods = $.JSString.prototype;
$.dispatchPropertyName = null;
$.interceptorsByTag = null;
$.leafTags = null;
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.get$context2D$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$context2D(receiver);
};
$.get$isEmpty$as = function(receiver) {
  return $.getInterceptor$as(receiver).get$isEmpty(receiver);
};
$.get$iterator$a = function(receiver) {
  return $.getInterceptor$a(receiver).get$iterator(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
Isolate.$lazy($, "getTypeNameOf", "getTypeNameOf", "get$getTypeNameOf", function() {
  return $.getFunctionForTypeNameOf();
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return $.List_List(null);
});
// Native classes
$.defineNativeMethods("AutocompleteErrorEvent|CanvasGradient|CanvasPattern|CanvasRenderingContext|CanvasRenderingContext2D|DOMError|ErrorEvent|Event|FileError|MediaError|MediaKeyError|NavigatorUserMediaError|PositionError|SQLError|SQLException|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedTransformList|SpeechRecognitionError", $.Interceptor);

$.defineNativeMethods("HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLVideoElement", $._HTMLElement);

$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethods("SVGAElement|SVGAltGlyphElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEFloodElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGForeignObjectElement|SVGGElement|SVGGradientElement|SVGImageElement|SVGLineElement|SVGLinearGradientElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRadialGradientElement|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGStyledElement|SVGSwitchElement|SVGSymbolElement|SVGTSpanElement|SVGTextContentElement|SVGTextElement|SVGTextPathElement|SVGTextPositioningElement|SVGTitleElement|SVGUseElement|SVGViewElement", $.Element);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("Document|HTMLDocument", $.Node);

$.defineNativeMethodsNonleaf("Node", $.Node);


init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.PlainJavaScriptObject.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.main(); });
      } else {
        $.main();
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.main(); });
  } else {
    $.main();
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        var constructor = defineClass(name, cls, fields, desc);
        isolateProperties[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return this." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = arguments.callee.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
})()

//# sourceMappingURL=fract_demo.dart.js.map
//@ sourceMappingURL=fract_demo.dart.js.map
